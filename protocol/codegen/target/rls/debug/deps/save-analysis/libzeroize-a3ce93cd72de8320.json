{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4","program":"/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","zeroize","--edition=2018","/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","-C","metadata=a3ce93cd72de8320","-C","extra-filename=-a3ce93cd72de8320","--out-dir","/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps","-L","dependency=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu"],"output":"/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/libzeroize-a3ce93cd72de8320.rmeta"},"prelude":{"crate_id":{"name":"zeroize","disambiguator":[17761694431144581022,0]},"crate_root":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src","external_crates":[{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}}],"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":0,"byte_end":27688,"line_start":1,"line_end":868,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":0,"byte_end":27688,"line_start":1,"line_end":868,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":112},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":245},{"krate":0,"index":113},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":247},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":268},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":280},{"krate":0,"index":284},{"krate":0,"index":290},{"krate":0,"index":295},{"krate":0,"index":302},{"krate":0,"index":308},{"krate":0,"index":316},{"krate":0,"index":323},{"krate":0,"index":332},{"krate":0,"index":340},{"krate":0,"index":350},{"krate":0,"index":359},{"krate":0,"index":370},{"krate":0,"index":380},{"krate":0,"index":392}],"decl_id":null,"docs":" Securely zero memory with a simple trait ([`Zeroize`]) built on stable Rust\n primitives which guarantee the operation will not be \"optimized away\".","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs, rust_2018_idioms, unused_qualifications)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":247,"byte_end":310,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/ Securely zero memory with a simple trait ([`Zeroize`]) built on stable Rust","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":312,"byte_end":391,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ primitives which guarantee the operation will not be \"optimized away\".","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":392,"byte_end":466,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":467,"byte_end":470,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ## About","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":471,"byte_end":483,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":484,"byte_end":487,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [Zeroing memory securely is hard] - compilers optimize for performance, and","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":488,"byte_end":567,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ in doing so they love to \"optimize away\" unnecessary zeroing calls. There are","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":568,"byte_end":649,"line_start":15,"line_end":15,"column_start":1,"column_end":82}},{"value":"/ many documented \"tricks\" to attempt to avoid these optimizations and ensure","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":650,"byte_end":729,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ that a zeroing routine is performed reliably.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":730,"byte_end":779,"line_start":17,"line_end":17,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":780,"byte_end":783,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This crate isn't about tricks: it uses [`core::ptr::write_volatile`]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":784,"byte_end":856,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/ and [`core::sync::atomic`] memory fences to provide easy-to-use, portable","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":857,"byte_end":934,"line_start":20,"line_end":20,"column_start":1,"column_end":78}},{"value":"/ zeroing behavior which works on all of Rust's core number types and slices","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":935,"byte_end":1013,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ thereof, implemented in pure Rust with no usage of FFI or assembly.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1014,"byte_end":1085,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1086,"byte_end":1089,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ - No insecure fallbacks!","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1090,"byte_end":1118,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ - No dependencies!","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1119,"byte_end":1141,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/ - No FFI or inline assembly! **WASM friendly** (and tested)!","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1142,"byte_end":1206,"line_start":26,"line_end":26,"column_start":1,"column_end":65}},{"value":"/ - `#![no_std]` i.e. **embedded-friendly**!","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1207,"byte_end":1253,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/ - No functionality besides securely zeroing memory!","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1254,"byte_end":1309,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"/ - (Optional) Custom derive support for zeroing complex structures","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1310,"byte_end":1379,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1380,"byte_end":1383,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Minimum Supported Rust Version","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1384,"byte_end":1421,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1422,"byte_end":1425,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Requires Rust **1.51** or newer.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1426,"byte_end":1462,"line_start":33,"line_end":33,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1463,"byte_end":1466,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ In the future, we reserve the right to change MSRV (i.e. MSRV is out-of-scope","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1467,"byte_end":1548,"line_start":35,"line_end":35,"column_start":1,"column_end":82}},{"value":"/ for this crate's SemVer guarantees), however when we do it will be accompanied","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1549,"byte_end":1631,"line_start":36,"line_end":36,"column_start":1,"column_end":83}},{"value":"/ by a minor version bump.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1632,"byte_end":1660,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1661,"byte_end":1664,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1665,"byte_end":1677,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1678,"byte_end":1681,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1682,"byte_end":1689,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1690,"byte_end":1715,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1716,"byte_end":1719,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1720,"byte_end":1735,"line_start":44,"line_end":44,"column_start":1,"column_end":16}},{"value":"/     // Protip: don't embed secrets in your source code.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1736,"byte_end":1795,"line_start":45,"line_end":45,"column_start":1,"column_end":60}},{"value":"/     // This is just an example.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1796,"byte_end":1831,"line_start":46,"line_end":46,"column_start":1,"column_end":36}},{"value":"/     let mut secret = b\"Air shield password: 1,2,3,4,5\".to_vec();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1832,"byte_end":1900,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/     // [ ... ] open the air shield here","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1901,"byte_end":1944,"line_start":48,"line_end":48,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1945,"byte_end":1948,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/     // Now that we're done using the secret, zero it out.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":1949,"byte_end":2010,"line_start":50,"line_end":50,"column_start":1,"column_end":62}},{"value":"/     secret.zeroize();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2011,"byte_end":2036,"line_start":51,"line_end":51,"column_start":1,"column_end":26}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2037,"byte_end":2042,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2043,"byte_end":2050,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2051,"byte_end":2054,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The [`Zeroize`] trait is impl'd on all of Rust's core scalar types including","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2055,"byte_end":2135,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ integers, floats, `bool`, and `char`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2136,"byte_end":2177,"line_start":56,"line_end":56,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2178,"byte_end":2181,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Additionally, it's implemented on slices and `IterMut`s of the above types.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2182,"byte_end":2261,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2262,"byte_end":2265,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ When the `alloc` feature is enabled (which it is by default), it's also","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2266,"byte_end":2341,"line_start":60,"line_end":60,"column_start":1,"column_end":76}},{"value":"/ impl'd for `Vec<T>` for the above types as well as `String`, where it provides","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2342,"byte_end":2424,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"/ [`Vec::clear`] / [`String::clear`]-like behavior (truncating to zero-length)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2425,"byte_end":2505,"line_start":62,"line_end":62,"column_start":1,"column_end":81}},{"value":"/ but ensures the backing memory is securely zeroed with some caveats.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2506,"byte_end":2578,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/ (NOTE: see \"Stack/Heap Zeroing Notes\" for important `Vec`/`String` details)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2579,"byte_end":2658,"line_start":64,"line_end":64,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2659,"byte_end":2662,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ The [`DefaultIsZeroes`] marker trait can be impl'd on types which also","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2663,"byte_end":2737,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"/ impl [`Default`], which implements [`Zeroize`] by overwriting a value with","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2738,"byte_end":2816,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ the default value.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2817,"byte_end":2839,"line_start":68,"line_end":68,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2840,"byte_end":2843,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ## Custom Derive Support","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2844,"byte_end":2872,"line_start":70,"line_end":70,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2873,"byte_end":2876,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ This crate has custom derive support for the `Zeroize` trait,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2877,"byte_end":2942,"line_start":72,"line_end":72,"column_start":1,"column_end":66}},{"value":"/ gated under the `zeroize` crate's `zeroize_derive` Cargo feature,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":2943,"byte_end":3012,"line_start":73,"line_end":73,"column_start":1,"column_end":70}},{"value":"/ which automatically calls `zeroize()` on all members of a struct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3013,"byte_end":3081,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/ or tuple struct.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3082,"byte_end":3102,"line_start":75,"line_end":75,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3103,"byte_end":3106,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ Attributes supported for `Zeroize`:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3107,"byte_end":3146,"line_start":77,"line_end":77,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3147,"byte_end":3150,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ On the item level:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3151,"byte_end":3173,"line_start":79,"line_end":79,"column_start":1,"column_end":23}},{"value":"/ - `#[zeroize(drop)]`: *deprecated* use `ZeroizeOnDrop` instead","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3174,"byte_end":3240,"line_start":80,"line_end":80,"column_start":1,"column_end":67}},{"value":"/ - `#[zeroize(bound = \"T: MyTrait\")]`: this replaces any trait bounds","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3241,"byte_end":3313,"line_start":81,"line_end":81,"column_start":1,"column_end":73}},{"value":"/   inferred by zeroize","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3314,"byte_end":3339,"line_start":82,"line_end":82,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3340,"byte_end":3343,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ On the field level:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3344,"byte_end":3367,"line_start":84,"line_end":84,"column_start":1,"column_end":24}},{"value":"/ - `#[zeroize(skip)]`: skips this field or variant when calling `zeroize()`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3368,"byte_end":3446,"line_start":85,"line_end":85,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3447,"byte_end":3450,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Attributes supported for `ZeroizeOnDrop`:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3451,"byte_end":3496,"line_start":87,"line_end":87,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3497,"byte_end":3500,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ On the field level:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3501,"byte_end":3524,"line_start":89,"line_end":89,"column_start":1,"column_end":24}},{"value":"/ - `#[zeroize(skip)]`: skips this field or variant when calling `zeroize()`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3525,"byte_end":3603,"line_start":90,"line_end":90,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3604,"byte_end":3607,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Example which derives `Drop`:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3608,"byte_end":3641,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3642,"byte_end":3645,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3646,"byte_end":3653,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"zeroize_derive\")]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3654,"byte_end":3694,"line_start":95,"line_end":95,"column_start":1,"column_end":41}},{"value":"/ # {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3695,"byte_end":3702,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ use zeroize::{Zeroize, ZeroizeOnDrop};","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3703,"byte_end":3745,"line_start":97,"line_end":97,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3746,"byte_end":3749,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ // This struct will be zeroized on drop","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3750,"byte_end":3793,"line_start":99,"line_end":99,"column_start":1,"column_end":44}},{"value":"/ #[derive(Zeroize, ZeroizeOnDrop)]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3794,"byte_end":3831,"line_start":100,"line_end":100,"column_start":1,"column_end":38}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3832,"byte_end":3862,"line_start":101,"line_end":101,"column_start":1,"column_end":31}},{"value":"/ # }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3863,"byte_end":3870,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3871,"byte_end":3878,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3879,"byte_end":3882,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Example which does not derive `Drop` (useful for e.g. `Copy` types)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3883,"byte_end":3954,"line_start":105,"line_end":105,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3955,"byte_end":3958,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3959,"byte_end":3966,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ #[cfg(feature = \"zeroize_derive\")]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":3967,"byte_end":4005,"line_start":108,"line_end":108,"column_start":1,"column_end":39}},{"value":"/ # {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4006,"byte_end":4013,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4014,"byte_end":4039,"line_start":110,"line_end":110,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4040,"byte_end":4043,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ // This struct will *NOT* be zeroized on drop","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4044,"byte_end":4093,"line_start":112,"line_end":112,"column_start":1,"column_end":50}},{"value":"/ #[derive(Copy, Clone, Zeroize)]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4094,"byte_end":4129,"line_start":113,"line_end":113,"column_start":1,"column_end":36}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4130,"byte_end":4160,"line_start":114,"line_end":114,"column_start":1,"column_end":31}},{"value":"/ # }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4161,"byte_end":4168,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4169,"byte_end":4176,"line_start":116,"line_end":116,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4177,"byte_end":4180,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Example which only derives `Drop`:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4181,"byte_end":4219,"line_start":118,"line_end":118,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4220,"byte_end":4223,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4224,"byte_end":4231,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"zeroize_derive\")]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4232,"byte_end":4272,"line_start":121,"line_end":121,"column_start":1,"column_end":41}},{"value":"/ # {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4273,"byte_end":4280,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"/ use zeroize::ZeroizeOnDrop;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4281,"byte_end":4312,"line_start":123,"line_end":123,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4313,"byte_end":4316,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ // This struct will be zeroized on drop","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4317,"byte_end":4360,"line_start":125,"line_end":125,"column_start":1,"column_end":44}},{"value":"/ #[derive(ZeroizeOnDrop)]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4361,"byte_end":4389,"line_start":126,"line_end":126,"column_start":1,"column_end":29}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4390,"byte_end":4420,"line_start":127,"line_end":127,"column_start":1,"column_end":31}},{"value":"/ # }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4421,"byte_end":4428,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4429,"byte_end":4436,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4437,"byte_end":4440,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ ## `Zeroizing<Z>`: wrapper for zeroizing arbitrary values on drop","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4441,"byte_end":4510,"line_start":131,"line_end":131,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4511,"byte_end":4514,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ `Zeroizing<Z: Zeroize>` is a generic wrapper type that impls `Deref`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4515,"byte_end":4587,"line_start":133,"line_end":133,"column_start":1,"column_end":73}},{"value":"/ and `DerefMut`, allowing access to an inner value of type `Z`, and also","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4588,"byte_end":4663,"line_start":134,"line_end":134,"column_start":1,"column_end":76}},{"value":"/ impls a `Drop` handler which calls `zeroize()` on its contents:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4664,"byte_end":4731,"line_start":135,"line_end":135,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4732,"byte_end":4735,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4736,"byte_end":4743,"line_start":137,"line_end":137,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroizing;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4744,"byte_end":4771,"line_start":138,"line_end":138,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4772,"byte_end":4775,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4776,"byte_end":4791,"line_start":140,"line_end":140,"column_start":1,"column_end":16}},{"value":"/     let mut secret = Zeroizing::new([0u8; 5]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4792,"byte_end":4842,"line_start":141,"line_end":141,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4843,"byte_end":4846,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/     // Set the air shield password","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4847,"byte_end":4885,"line_start":143,"line_end":143,"column_start":1,"column_end":39}},{"value":"/     // Protip (again): don't embed secrets in your source code.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4886,"byte_end":4953,"line_start":144,"line_end":144,"column_start":1,"column_end":68}},{"value":"/     secret.copy_from_slice(&[1, 2, 3, 4, 5]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":4954,"byte_end":5003,"line_start":145,"line_end":145,"column_start":1,"column_end":50}},{"value":"/     assert_eq!(secret.as_ref(), &[1, 2, 3, 4, 5]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5004,"byte_end":5058,"line_start":146,"line_end":146,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5059,"byte_end":5062,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/     // The contents of `secret` will be automatically zeroized on drop","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5063,"byte_end":5137,"line_start":148,"line_end":148,"column_start":1,"column_end":75}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5138,"byte_end":5143,"line_start":149,"line_end":149,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5144,"byte_end":5151,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5152,"byte_end":5155,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ ## What guarantees does this crate provide?","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5156,"byte_end":5203,"line_start":152,"line_end":152,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5204,"byte_end":5207,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ This crate guarantees the following:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5208,"byte_end":5248,"line_start":154,"line_end":154,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5249,"byte_end":5252,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ 1. The zeroing operation can't be \"optimized away\" by the compiler.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5253,"byte_end":5324,"line_start":156,"line_end":156,"column_start":1,"column_end":72}},{"value":"/ 2. All subsequent reads to memory will see \"zeroized\" values.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5325,"byte_end":5390,"line_start":157,"line_end":157,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5391,"byte_end":5394,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ LLVM's volatile semantics ensure #1 is true.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5395,"byte_end":5443,"line_start":159,"line_end":159,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5444,"byte_end":5447,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Additionally, thanks to work by the [Unsafe Code Guidelines Working Group],","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5448,"byte_end":5527,"line_start":161,"line_end":161,"column_start":1,"column_end":80}},{"value":"/ we can now fairly confidently say #2 is true as well. Previously there were","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5528,"byte_end":5607,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/ worries that the approach used by this crate (mixing volatile and","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5608,"byte_end":5677,"line_start":163,"line_end":163,"column_start":1,"column_end":70}},{"value":"/ non-volatile accesses) was undefined behavior due to language contained","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5678,"byte_end":5753,"line_start":164,"line_end":164,"column_start":1,"column_end":76}},{"value":"/ in the documentation for `write_volatile`, however after some discussion","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5754,"byte_end":5830,"line_start":165,"line_end":165,"column_start":1,"column_end":77}},{"value":"/ [these remarks have been removed] and the specific usage pattern in this","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5831,"byte_end":5907,"line_start":166,"line_end":166,"column_start":1,"column_end":77}},{"value":"/ crate is considered to be well-defined.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5908,"byte_end":5951,"line_start":167,"line_end":167,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5952,"byte_end":5955,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Additionally this crate leverages [`core::sync::atomic::compiler_fence`]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":5956,"byte_end":6032,"line_start":169,"line_end":169,"column_start":1,"column_end":77}},{"value":"/ with the strictest ordering","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6033,"byte_end":6064,"line_start":170,"line_end":170,"column_start":1,"column_end":32}},{"value":"/ ([`Ordering::SeqCst`]) as a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6065,"byte_end":6096,"line_start":171,"line_end":171,"column_start":1,"column_end":32}},{"value":"/ precaution to help ensure reads are not reordered before memory has been","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6097,"byte_end":6173,"line_start":172,"line_end":172,"column_start":1,"column_end":77}},{"value":"/ zeroed.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6174,"byte_end":6185,"line_start":173,"line_end":173,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6186,"byte_end":6189,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ All of that said, there is still potential for microarchitectural attacks","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6190,"byte_end":6267,"line_start":175,"line_end":175,"column_start":1,"column_end":78}},{"value":"/ (ala Spectre/Meltdown) to leak \"zeroized\" secrets through covert channels.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6268,"byte_end":6346,"line_start":176,"line_end":176,"column_start":1,"column_end":79}},{"value":"/ This crate makes no guarantees that zeroized values cannot be leaked","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6347,"byte_end":6419,"line_start":177,"line_end":177,"column_start":1,"column_end":73}},{"value":"/ through such channels, as they represent flaws in the underlying hardware.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6420,"byte_end":6498,"line_start":178,"line_end":178,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6499,"byte_end":6502,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ ## Stack/Heap Zeroing Notes","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6503,"byte_end":6534,"line_start":180,"line_end":180,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6535,"byte_end":6538,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This crate can be used to zero values from either the stack or the heap.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6539,"byte_end":6615,"line_start":182,"line_end":182,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6616,"byte_end":6619,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ However, be aware several operations in Rust can unintentionally leave","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6620,"byte_end":6694,"line_start":184,"line_end":184,"column_start":1,"column_end":75}},{"value":"/ copies of data in memory. This includes but is not limited to:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6695,"byte_end":6761,"line_start":185,"line_end":185,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6762,"byte_end":6765,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ - Moves and [`Copy`]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6766,"byte_end":6790,"line_start":187,"line_end":187,"column_start":1,"column_end":25}},{"value":"/ - Heap reallocation when using [`Vec`] and [`String`]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6791,"byte_end":6848,"line_start":188,"line_end":188,"column_start":1,"column_end":58}},{"value":"/ - Borrowers of a reference making copies of the data","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6849,"byte_end":6905,"line_start":189,"line_end":189,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6906,"byte_end":6909,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ [`Pin`][`core::pin::Pin`] can be leveraged in conjunction with this crate","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6910,"byte_end":6987,"line_start":191,"line_end":191,"column_start":1,"column_end":78}},{"value":"/ to ensure data kept on the stack isn't moved.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":6988,"byte_end":7037,"line_start":192,"line_end":192,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7038,"byte_end":7041,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ The `Zeroize` impls for `Vec` and `String` zeroize the entire capacity of","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7042,"byte_end":7119,"line_start":194,"line_end":194,"column_start":1,"column_end":78}},{"value":"/ their backing buffer, but cannot guarantee copies of the data were not","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7120,"byte_end":7194,"line_start":195,"line_end":195,"column_start":1,"column_end":75}},{"value":"/ previously made by buffer reallocation. It's therefore important when","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7195,"byte_end":7268,"line_start":196,"line_end":196,"column_start":1,"column_end":74}},{"value":"/ attempting to zeroize such buffers to initialize them to the correct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7269,"byte_end":7341,"line_start":197,"line_end":197,"column_start":1,"column_end":73}},{"value":"/ capacity, and take care to prevent subsequent reallocation.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7342,"byte_end":7405,"line_start":198,"line_end":198,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7406,"byte_end":7409,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ The `secrecy` crate provides higher-level abstractions for eliminating","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7410,"byte_end":7484,"line_start":200,"line_end":200,"column_start":1,"column_end":75}},{"value":"/ usage patterns which can cause reallocations:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7485,"byte_end":7534,"line_start":201,"line_end":201,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7535,"byte_end":7538,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ <https://crates.io/crates/secrecy>","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7539,"byte_end":7577,"line_start":203,"line_end":203,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7578,"byte_end":7581,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ ## What about: clearing registers, mlock, mprotect, etc?","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7582,"byte_end":7642,"line_start":205,"line_end":205,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7643,"byte_end":7646,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This crate is focused on providing simple, unobtrusive support for reliably","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7647,"byte_end":7726,"line_start":207,"line_end":207,"column_start":1,"column_end":80}},{"value":"/ zeroing memory using the best approach possible on stable Rust.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7727,"byte_end":7794,"line_start":208,"line_end":208,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7795,"byte_end":7798,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ Clearing registers is a difficult problem that can't easily be solved by","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7799,"byte_end":7875,"line_start":210,"line_end":210,"column_start":1,"column_end":77}},{"value":"/ something like a crate, and requires either inline ASM or rustc support.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7876,"byte_end":7952,"line_start":211,"line_end":211,"column_start":1,"column_end":77}},{"value":"/ See <https://github.com/rust-lang/rust/issues/17046> for background on","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":7953,"byte_end":8027,"line_start":212,"line_end":212,"column_start":1,"column_end":75}},{"value":"/ this particular problem.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8028,"byte_end":8056,"line_start":213,"line_end":213,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8057,"byte_end":8060,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ Other memory protection mechanisms are interesting and useful, but often","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8061,"byte_end":8137,"line_start":215,"line_end":215,"column_start":1,"column_end":77}},{"value":"/ overkill (e.g. defending against RAM scraping or attackers with swap access).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8138,"byte_end":8219,"line_start":216,"line_end":216,"column_start":1,"column_end":82}},{"value":"/ In as much as there may be merit to these approaches, there are also many","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8220,"byte_end":8297,"line_start":217,"line_end":217,"column_start":1,"column_end":78}},{"value":"/ other crates that already implement more sophisticated memory protections.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8298,"byte_end":8376,"line_start":218,"line_end":218,"column_start":1,"column_end":79}},{"value":"/ Such protections are explicitly out-of-scope for this crate.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8377,"byte_end":8441,"line_start":219,"line_end":219,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8442,"byte_end":8445,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ Zeroing memory is [good cryptographic hygiene] and this crate seeks to promote","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8446,"byte_end":8528,"line_start":221,"line_end":221,"column_start":1,"column_end":83}},{"value":"/ it in the most unobtrusive manner possible. This includes omitting complex","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8529,"byte_end":8607,"line_start":222,"line_end":222,"column_start":1,"column_end":79}},{"value":"/ `unsafe` memory protection systems and just trying to make the best memory","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8608,"byte_end":8686,"line_start":223,"line_end":223,"column_start":1,"column_end":79}},{"value":"/ zeroing crate available.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8687,"byte_end":8715,"line_start":224,"line_end":224,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8716,"byte_end":8719,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ [Zeroing memory securely is hard]: http://www.daemonology.net/blog/2014-09-04-how-to-zero-a-buffer.html","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8720,"byte_end":8827,"line_start":226,"line_end":226,"column_start":1,"column_end":108}},{"value":"/ [Unsafe Code Guidelines Working Group]: https://github.com/rust-lang/unsafe-code-guidelines","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8828,"byte_end":8923,"line_start":227,"line_end":227,"column_start":1,"column_end":96}},{"value":"/ [these remarks have been removed]: https://github.com/rust-lang/rust/pull/60972","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":8924,"byte_end":9007,"line_start":228,"line_end":228,"column_start":1,"column_end":84}},{"value":"/ [good cryptographic hygiene]: https://github.com/veorq/cryptocoding#clean-memory-of-secret-data","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":9008,"byte_end":9107,"line_start":229,"line_end":229,"column_start":1,"column_end":100}},{"value":"/ [`Ordering::SeqCst`]: core::sync::atomic::Ordering::SeqCst","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":9108,"byte_end":9170,"line_start":230,"line_end":230,"column_start":1,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":92},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":9980,"byte_end":9987,"line_start":257,"line_end":257,"column_start":11,"column_end":18},"name":"Zeroize","qualname":"::Zeroize","value":"Zeroize","parent":null,"children":[{"krate":0,"index":93}],"decl_id":null,"docs":" Trait for securely erasing types from memory\n","sig":null,"attributes":[{"value":"/ Trait for securely erasing types from memory","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":9921,"byte_end":9969,"line_start":256,"line_end":256,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10148,"byte_end":10155,"line_start":260,"line_end":260,"column_start":8,"column_end":15},"name":"zeroize","qualname":"::Zeroize::zeroize","value":"pub fn zeroize(&mut Self)","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Zero out this object from memory using Rust intrinsics which ensure the\n zeroization operation is not \"optimized away\" by the compiler.\n","sig":null,"attributes":[{"value":"/ Zero out this object from memory using Rust intrinsics which ensure the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":9994,"byte_end":10069,"line_start":258,"line_end":258,"column_start":5,"column_end":80}},{"value":"/ zeroization operation is not \"optimized away\" by the compiler.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10074,"byte_end":10140,"line_start":259,"line_end":259,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":94},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10279,"byte_end":10292,"line_start":264,"line_end":264,"column_start":11,"column_end":24},"name":"ZeroizeOnDrop","qualname":"::ZeroizeOnDrop","value":"ZeroizeOnDrop","parent":null,"children":[],"decl_id":null,"docs":" Marker trait signifying that this type will [`zeroize`](Zeroize::zeroize) itself on [`Drop`].\n","sig":null,"attributes":[{"value":"/ Marker trait signifying that this type will [`zeroize`](Zeroize::zeroize) itself on [`Drop`].","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10171,"byte_end":10268,"line_start":263,"line_end":263,"column_start":1,"column_end":98}}]},{"kind":"Mod","id":{"krate":0,"index":95},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10320,"byte_end":10330,"line_start":267,"line_end":267,"column_start":9,"column_end":19},"name":"__internal","qualname":"::__internal","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":104}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10426,"byte_end":10445,"line_start":271,"line_end":271,"column_start":15,"column_end":34},"name":"AssertZeroizeOnDrop","qualname":"::__internal::AssertZeroizeOnDrop","value":"AssertZeroizeOnDrop","parent":null,"children":[{"krate":0,"index":98}],"decl_id":null,"docs":" Auto-deref workaround for deriving `ZeroizeOnDrop`.\n","sig":null,"attributes":[{"value":"/ Auto-deref workaround for deriving `ZeroizeOnDrop`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10356,"byte_end":10411,"line_start":270,"line_end":270,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10459,"byte_end":10477,"line_start":272,"line_end":272,"column_start":12,"column_end":30},"name":"zeroize_or_on_drop","qualname":"::__internal::AssertZeroizeOnDrop::zeroize_or_on_drop","value":"pub fn zeroize_or_on_drop(Self)","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":102},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10682,"byte_end":10695,"line_start":280,"line_end":280,"column_start":15,"column_end":28},"name":"AssertZeroize","qualname":"::__internal::AssertZeroize","value":"AssertZeroize","parent":null,"children":[{"krate":0,"index":103}],"decl_id":null,"docs":" Auto-deref workaround for deriving `ZeroizeOnDrop`.\n","sig":null,"attributes":[{"value":"/ Auto-deref workaround for deriving `ZeroizeOnDrop`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10612,"byte_end":10667,"line_start":279,"line_end":279,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10709,"byte_end":10727,"line_start":281,"line_end":281,"column_start":12,"column_end":30},"name":"zeroize_or_on_drop","qualname":"::__internal::AssertZeroize::zeroize_or_on_drop","value":"pub fn zeroize_or_on_drop(&mut Self)","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":107},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10975,"byte_end":10990,"line_start":292,"line_end":292,"column_start":11,"column_end":26},"name":"DefaultIsZeroes","qualname":"::DefaultIsZeroes","value":"DefaultIsZeroes: Copy + Default + Sized","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for types whose `Default` is the desired zeroization result\n","sig":null,"attributes":[{"value":"/ Marker trait for types whose `Default` is the desired zeroization result","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10888,"byte_end":10964,"line_start":291,"line_end":291,"column_start":1,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":152},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18304,"byte_end":18314,"line_start":519,"line_end":519,"column_start":11,"column_end":21},"name":"TryZeroize","qualname":"::TryZeroize","value":"TryZeroize","parent":null,"children":[{"krate":0,"index":153}],"decl_id":null,"docs":" Fallible trait for representing cases where zeroization may or may not be\n possible.","sig":null,"attributes":[{"value":"/ Fallible trait for representing cases where zeroization may or may not be","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18051,"byte_end":18128,"line_start":514,"line_end":514,"column_start":1,"column_end":78}},{"value":"/ possible.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18129,"byte_end":18142,"line_start":515,"line_end":515,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18143,"byte_end":18146,"line_start":516,"line_end":516,"column_start":1,"column_end":4}},{"value":"/ This is primarily useful for scenarios like reference counted data, where","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18147,"byte_end":18224,"line_start":517,"line_end":517,"column_start":1,"column_end":78}},{"value":"/ zeroization is only possible when the last reference is dropped.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18225,"byte_end":18293,"line_start":518,"line_end":518,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18506,"byte_end":18517,"line_start":524,"line_end":524,"column_start":8,"column_end":19},"name":"try_zeroize","qualname":"::TryZeroize::try_zeroize","value":"pub fn try_zeroize(&mut Self) -> bool","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Try to zero out this object from memory using Rust intrinsics which\n ensure the zeroization operation is not \"optimized away\" by the\n compiler.\n","sig":null,"attributes":[{"value":"/ Try to zero out this object from memory using Rust intrinsics which","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18321,"byte_end":18392,"line_start":520,"line_end":520,"column_start":5,"column_end":76}},{"value":"/ ensure the zeroization operation is not \"optimized away\" by the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18397,"byte_end":18464,"line_start":521,"line_end":521,"column_start":5,"column_end":72}},{"value":"/ compiler.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18469,"byte_end":18482,"line_start":522,"line_end":522,"column_start":5,"column_end":18}},{"value":"must_use","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18487,"byte_end":18498,"line_start":523,"line_end":523,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":247},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18719,"byte_end":18728,"line_start":530,"line_end":530,"column_start":12,"column_end":21},"name":"Zeroizing","qualname":"::Zeroizing","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a\n `Drop` handler which zeroizes dropped values.\n","sig":null,"attributes":[{"value":"/ `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18541,"byte_end":18616,"line_start":527,"line_end":527,"column_start":1,"column_end":76}},{"value":"/ `Drop` handler which zeroizes dropped values.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18617,"byte_end":18666,"line_start":528,"line_end":528,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18911,"byte_end":18914,"line_start":538,"line_end":538,"column_start":12,"column_end":15},"name":"new","qualname":"<Zeroizing<Z>>::new","value":"pub fn new(Z) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Move value inside a `Zeroizing` wrapper which ensures it will be\n zeroized when it's dropped.\n","sig":null,"attributes":[{"value":"/ Move value inside a `Zeroizing` wrapper which ensures it will be","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18795,"byte_end":18863,"line_start":536,"line_end":536,"column_start":5,"column_end":73}},{"value":"/ zeroized when it's dropped.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18868,"byte_end":18899,"line_start":537,"line_end":537,"column_start":5,"column_end":36}}]}],"impls":[{"id":3,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10795,"byte_end":10796,"line_start":284,"line_end":284,"column_start":49,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":11039,"byte_end":11040,"line_start":294,"line_end":294,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":12393,"byte_end":12400,"line_start":355,"line_end":355,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":12554,"byte_end":12560,"line_start":366,"line_end":366,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":14081,"byte_end":14087,"line_start":406,"line_end":406,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":16229,"byte_end":16232,"line_start":456,"line_end":456,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":17372,"byte_end":17375,"line_start":487,"line_end":487,"column_start":27,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":17501,"byte_end":17504,"line_start":491,"line_end":491,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":17829,"byte_end":17832,"line_start":504,"line_end":504,"column_start":27,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":17957,"byte_end":17963,"line_start":508,"line_end":508,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18754,"byte_end":18763,"line_start":532,"line_end":532,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19000,"byte_end":19009,"line_start":543,"line_end":543,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19220,"byte_end":19229,"line_start":554,"line_end":554,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19354,"byte_end":19363,"line_start":563,"line_end":563,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19492,"byte_end":19501,"line_start":574,"line_end":574,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19618,"byte_end":19627,"line_start":583,"line_end":583,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19744,"byte_end":19753,"line_start":592,"line_end":592,"column_start":27,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19795,"byte_end":19804,"line_start":594,"line_end":594,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":21557,"byte_end":21568,"line_start":644,"line_end":644,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":21713,"byte_end":21724,"line_start":648,"line_end":648,"column_start":27,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":21819,"byte_end":21832,"line_start":650,"line_end":650,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":21966,"byte_end":21979,"line_start":654,"line_end":654,"column_start":24,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10795,"byte_end":10796,"line_start":284,"line_end":284,"column_start":49,"column_end":50},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":105},"to":{"krate":0,"index":102}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10992,"byte_end":10996,"line_start":292,"line_end":292,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":107}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":10999,"byte_end":11006,"line_start":292,"line_end":292,"column_start":35,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":3002},"to":{"krate":0,"index":107}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":11009,"byte_end":11014,"line_start":292,"line_end":292,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":107}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":11039,"byte_end":11040,"line_start":294,"line_end":294,"column_start":21,"column_end":22},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":109},"to":{"krate":0,"index":92}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":12393,"byte_end":12400,"line_start":355,"line_end":355,"column_start":25,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":10382},"to":{"krate":0,"index":92}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":12554,"byte_end":12560,"line_start":366,"line_end":366,"column_start":21,"column_end":27},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":45974},"to":{"krate":0,"index":92}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":14081,"byte_end":14087,"line_start":406,"line_end":406,"column_start":27,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":45974},"to":{"krate":0,"index":94}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":16229,"byte_end":16232,"line_start":456,"line_end":456,"column_start":21,"column_end":24},"kind":{"Impl":{"id":36}},"from":{"krate":4,"index":7089},"to":{"krate":0,"index":92}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":17372,"byte_end":17375,"line_start":487,"line_end":487,"column_start":27,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":4,"index":7089},"to":{"krate":0,"index":94}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":17501,"byte_end":17504,"line_start":491,"line_end":491,"column_start":21,"column_end":24},"kind":{"Impl":{"id":38}},"from":{"krate":4,"index":315},"to":{"krate":0,"index":92}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":17829,"byte_end":17832,"line_start":504,"line_end":504,"column_start":27,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":4,"index":315},"to":{"krate":0,"index":94}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":17957,"byte_end":17963,"line_start":508,"line_end":508,"column_start":18,"column_end":24},"kind":{"Impl":{"id":40}},"from":{"krate":4,"index":7626},"to":{"krate":0,"index":92}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":18754,"byte_end":18763,"line_start":532,"line_end":532,"column_start":9,"column_end":18},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19000,"byte_end":19009,"line_start":543,"line_end":543,"column_start":36,"column_end":45},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19220,"byte_end":19229,"line_start":554,"line_end":554,"column_start":21,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19354,"byte_end":19363,"line_start":563,"line_end":563,"column_start":24,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19492,"byte_end":19501,"line_start":574,"line_end":574,"column_start":27,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":3255}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19618,"byte_end":19627,"line_start":583,"line_end":583,"column_start":21,"column_end":30},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":247},"to":{"krate":0,"index":92}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19744,"byte_end":19753,"line_start":592,"line_end":592,"column_start":27,"column_end":36},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":247},"to":{"krate":0,"index":94}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":19795,"byte_end":19804,"line_start":594,"line_end":594,"column_start":18,"column_end":27},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":247},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":21557,"byte_end":21568,"line_start":644,"line_end":644,"column_start":21,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":1,"index":3042},"to":{"krate":0,"index":92}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":21713,"byte_end":21724,"line_start":648,"line_end":648,"column_start":27,"column_end":38},"kind":{"Impl":{"id":50}},"from":{"krate":1,"index":3042},"to":{"krate":0,"index":94}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":21819,"byte_end":21832,"line_start":650,"line_end":650,"column_start":18,"column_end":31},"kind":{"Impl":{"id":51}},"from":{"krate":1,"index":37470},"to":{"krate":0,"index":92}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.5.4/src/lib.rs","byte_start":21966,"byte_end":21979,"line_start":654,"line_end":654,"column_start":24,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":1,"index":37470},"to":{"krate":0,"index":94}}]}