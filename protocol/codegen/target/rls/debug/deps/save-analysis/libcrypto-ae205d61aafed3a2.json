{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36","program":"/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","crypto","/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=ae205d61aafed3a2","-C","extra-filename=-ae205d61aafed3a2","--out-dir","/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps","-L","dependency=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps","--extern","libc=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/liblibc-f1edaa3968dc46ce.rmeta","--extern","rand=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/librand-9f51c69a8d6b03dd.rmeta","--extern","rustc_serialize=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/librustc_serialize-864b67e8a595458c.rmeta","--extern","time=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/libtime-5bd16e065c1d156a.rmeta","--cap-lints","allow","-L","native=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/build/rust-crypto-58a54cda12f065cd/out","-l","static=_rust_crypto_helpers","--error-format=json","--sysroot","/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu"],"output":"/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/libcrypto-ae205d61aafed3a2.rmeta"},"prelude":{"crate_id":{"name":"crypto","disambiguator":[4428471495132552028,0]},"crate_root":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src","external_crates":[{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":20,"id":{"name":"rand","disambiguator":[11047295623073088141,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":21,"id":{"name":"rand","disambiguator":[5354048139712400415,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":22,"id":{"name":"libc","disambiguator":[17359017214528108778,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":23,"id":{"name":"rustc_serialize","disambiguator":[7233836946577334950,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","num":24,"id":{"name":"time","disambiguator":[16635379481553186502,0]}}],"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":301,"byte_end":1231,"line_start":7,"line_end":58,"column_start":1,"column_end":15}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":301,"byte_end":1231,"line_start":7,"line_end":58,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":12},{"krate":0,"index":63},{"krate":0,"index":111},{"krate":0,"index":291},{"krate":0,"index":304},{"krate":0,"index":335},{"krate":0,"index":428},{"krate":0,"index":521},{"krate":0,"index":786},{"krate":0,"index":819},{"krate":0,"index":949},{"krate":0,"index":1018},{"krate":0,"index":1057},{"krate":0,"index":1166},{"krate":0,"index":1302},{"krate":0,"index":1318},{"krate":0,"index":1391},{"krate":0,"index":1464},{"krate":0,"index":1535},{"krate":0,"index":1592},{"krate":0,"index":1630},{"krate":0,"index":1650},{"krate":0,"index":1670},{"krate":0,"index":1724},{"krate":0,"index":1780},{"krate":0,"index":1814},{"krate":0,"index":1853},{"krate":0,"index":1895},{"krate":0,"index":1967},{"krate":0,"index":2041},{"krate":0,"index":2111},{"krate":0,"index":2290},{"krate":0,"index":2364},{"krate":0,"index":2423},{"krate":0,"index":2490},{"krate":0,"index":2508},{"krate":0,"index":2546},{"krate":0,"index":2558},{"krate":0,"index":2615}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"aead","qualname":"::aead","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":10}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs","byte_start":1544,"byte_end":1557,"line_start":7,"line_end":7,"column_start":11,"column_end":24},"name":"AeadEncryptor","qualname":"::aead::AeadEncryptor","value":"AeadEncryptor","parent":null,"children":[{"krate":0,"index":9}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs","byte_start":1565,"byte_end":1572,"line_start":9,"line_end":9,"column_start":5,"column_end":12},"name":"encrypt","qualname":"::aead::AeadEncryptor::encrypt","value":"pub fn encrypt(&mut Self, &[u8], &mut [u8], &mut [u8])","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":10},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs","byte_start":1647,"byte_end":1660,"line_start":12,"line_end":12,"column_start":11,"column_end":24},"name":"AeadDecryptor","qualname":"::aead::AeadDecryptor","value":"AeadDecryptor","parent":null,"children":[{"krate":0,"index":11}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aead.rs","byte_start":1668,"byte_end":1675,"line_start":14,"line_end":14,"column_start":5,"column_end":12},"name":"decrypt","qualname":"::aead::AeadDecryptor::decrypt","value":"pub fn decrypt(&mut Self, &[u8], &mut [u8], &[u8]) -> bool","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":12},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"aes","qualname":"::aes","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":2674},{"krate":0,"index":2681},{"krate":0,"index":2683},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2675},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":2386,"byte_end":2396,"line_start":19,"line_end":19,"column_start":5,"column_end":15},"name":"KeySize128","qualname":"::aes::KeySize::KeySize128","value":"KeySize::KeySize128","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2677},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":2402,"byte_end":2412,"line_start":20,"line_end":20,"column_start":5,"column_end":15},"name":"KeySize192","qualname":"::aes::KeySize::KeySize192","value":"KeySize::KeySize192","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2679},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":2418,"byte_end":2428,"line_start":21,"line_end":21,"column_start":5,"column_end":15},"name":"KeySize256","qualname":"::aes::KeySize::KeySize256","value":"KeySize::KeySize256","parent":{"krate":0,"index":2674},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2674},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":2372,"byte_end":2379,"line_start":18,"line_end":18,"column_start":10,"column_end":17},"name":"KeySize","qualname":"::aes::KeySize","value":"pub enum KeySize { KeySize128, KeySize192, KeySize256, }","parent":null,"children":[{"krate":0,"index":2675},{"krate":0,"index":2677},{"krate":0,"index":2679}],"decl_id":null,"docs":" AES key size\n","sig":null,"attributes":[{"value":"/ AES key size","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":2323,"byte_end":2339,"line_start":16,"line_end":16,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":2547,"byte_end":2560,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"ecb_encryptor","qualname":"::aes::ecb_encryptor","value":"pub fn ecb_encryptor<X: PaddingProcessor + Send + 'static>(KeySize, &[u8], X)\n-> Box<Encryptor>","parent":null,"children":[],"decl_id":null,"docs":" Get the best implementation of an EcbEncryptor\n","sig":null,"attributes":[{"value":"/ Get the best implementation of an EcbEncryptor","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":2432,"byte_end":2482,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":2483,"byte_end":2539,"line_start":25,"line_end":25,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":4552,"byte_end":4565,"line_start":82,"line_end":82,"column_start":8,"column_end":21},"name":"ecb_decryptor","qualname":"::aes::ecb_decryptor","value":"pub fn ecb_decryptor<X: PaddingProcessor + Send + 'static>(KeySize, &[u8], X)\n-> Box<Decryptor>","parent":null,"children":[],"decl_id":null,"docs":" Get the best implementation of an EcbDecryptor\n","sig":null,"attributes":[{"value":"/ Get the best implementation of an EcbDecryptor","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":4437,"byte_end":4487,"line_start":80,"line_end":80,"column_start":1,"column_end":51}},{"value":"cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":4488,"byte_end":4544,"line_start":81,"line_end":81,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":6556,"byte_end":6569,"line_start":138,"line_end":138,"column_start":8,"column_end":21},"name":"cbc_encryptor","qualname":"::aes::cbc_encryptor","value":"pub fn cbc_encryptor<X: PaddingProcessor + Send +\n'static>(KeySize, &[u8], &[u8], X) -> Box<Encryptor + 'static>","parent":null,"children":[],"decl_id":null,"docs":" Get the best implementation of a CbcEncryptor\n","sig":null,"attributes":[{"value":"/ Get the best implementation of a CbcEncryptor","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":6442,"byte_end":6491,"line_start":136,"line_end":136,"column_start":1,"column_end":50}},{"value":"cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":6492,"byte_end":6548,"line_start":137,"line_end":137,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":8708,"byte_end":8721,"line_start":196,"line_end":196,"column_start":8,"column_end":21},"name":"cbc_decryptor","qualname":"::aes::cbc_decryptor","value":"pub fn cbc_decryptor<X: PaddingProcessor + Send +\n'static>(KeySize, &[u8], &[u8], X) -> Box<Decryptor + 'static>","parent":null,"children":[],"decl_id":null,"docs":" Get the best implementation of a CbcDecryptor\n","sig":null,"attributes":[{"value":"/ Get the best implementation of a CbcDecryptor","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":8594,"byte_end":8643,"line_start":194,"line_end":194,"column_start":1,"column_end":50}},{"value":"cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":8644,"byte_end":8700,"line_start":195,"line_end":195,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":10935,"byte_end":10938,"line_start":254,"line_end":254,"column_start":8,"column_end":11},"name":"ctr","qualname":"::aes::ctr","value":"pub fn ctr(KeySize, &[u8], &[u8]) -> Box<SynchronousStreamCipher + 'static>","parent":null,"children":[],"decl_id":null,"docs":" Get the best implementation of a Ctr\n","sig":null,"attributes":[{"value":"/ Get the best implementation of a Ctr","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":10830,"byte_end":10870,"line_start":252,"line_end":252,"column_start":1,"column_end":41}},{"value":"cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes.rs","byte_start":10871,"byte_end":10927,"line_start":253,"line_end":253,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":63},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"aes_gcm","qualname":"::aes_gcm","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":98},{"krate":0,"index":105},{"krate":0,"index":108}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":91},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs","byte_start":33386,"byte_end":33392,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"AesGcm","qualname":"::aes_gcm::AesGcm","value":"AesGcm {  }","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs","byte_start":33540,"byte_end":33543,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<AesGcm>::new","value":"pub fn new(KeySize, &[u8], &[u8], &[u8]) -> AesGcm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":111},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"aessafe","qualname":"::aessafe","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":2684},{"krate":0,"index":2687},{"krate":0,"index":2690},{"krate":0,"index":2691},{"krate":0,"index":2694},{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2703},{"krate":0,"index":2708},{"krate":0,"index":2711},{"krate":0,"index":2714},{"krate":0,"index":2717},{"krate":0,"index":2720},{"krate":0,"index":2721},{"krate":0,"index":2724},{"krate":0,"index":2727},{"krate":0,"index":2728},{"krate":0,"index":2733},{"krate":0,"index":2738},{"krate":0,"index":2741},{"krate":0,"index":2744},{"krate":0,"index":2747},{"krate":0,"index":2750},{"krate":0,"index":2751},{"krate":0,"index":2754},{"krate":0,"index":2757},{"krate":0,"index":2758},{"krate":0,"index":2763},{"krate":0,"index":2768},{"krate":0,"index":2771},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":2774},{"krate":0,"index":2777},{"krate":0,"index":2780},{"krate":0,"index":2781},{"krate":0,"index":2784},{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2793},{"krate":0,"index":2798},{"krate":0,"index":2801},{"krate":0,"index":2804},{"krate":0,"index":2807},{"krate":0,"index":2810},{"krate":0,"index":2811},{"krate":0,"index":2814},{"krate":0,"index":2817},{"krate":0,"index":2818},{"krate":0,"index":2823},{"krate":0,"index":2828},{"krate":0,"index":2831},{"krate":0,"index":2834},{"krate":0,"index":2837},{"krate":0,"index":2840},{"krate":0,"index":2841},{"krate":0,"index":2844},{"krate":0,"index":2847},{"krate":0,"index":2848},{"krate":0,"index":2853},{"krate":0,"index":2858},{"krate":0,"index":2861},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":2864},{"krate":0,"index":2875},{"krate":0,"index":2878},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":195},{"krate":0,"index":2880},{"krate":0,"index":2887},{"krate":0,"index":2890},{"krate":0,"index":198},{"krate":0,"index":202},{"krate":0,"index":2892},{"krate":0,"index":2897},{"krate":0,"index":2900},{"krate":0,"index":205},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":235},{"krate":0,"index":242},{"krate":0,"index":246},{"krate":0,"index":251},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":265},{"krate":0,"index":271},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":285}],"decl_id":null,"docs":"\nThe `aessafe` module implements the AES algorithm completely in software without using any table\nlookups or other timing dependant mechanisms. This module actually contains two seperate\nimplementations - an implementation that works on a single block at a time and a second\nimplementation that processes 8 blocks in parallel. Some block encryption modes really only work if\nyou are processing a single blocks (CFB, OFB, and CBC encryption for example) while other modes\nare trivially parallelizable (CTR and CBC decryption). Processing more blocks at once allows for\ngreater efficiency, especially when using wide registers, such as the XMM registers available in\nx86 processors.","sig":null,"attributes":[{"value":"*\n\nThe `aessafe` module implements the AES algorithm completely in software without using any table\nlookups or other timing dependant mechanisms. This module actually contains two seperate\nimplementations - an implementation that works on a single block at a time and a second\nimplementation that processes 8 blocks in parallel. Some block encryption modes really only work if\nyou are processing a single blocks (CFB, OFB, and CBC encryption for example) while other modes\nare trivially parallelizable (CTR and CBC decryption). Processing more blocks at once allows for\ngreater efficiency, especially when using wide registers, such as the XMM registers available in\nx86 processors.\n\n## AES Algorithm\n\nThere are lots of places to go to on the internet for an involved description of how AES works. For\nthe purposes of this description, it sufficies to say that AES is just a block cipher that takes\na key of 16, 24, or 32 bytes and uses that to either encrypt or decrypt a block of 16 bytes. An\nencryption or decryption operation consists of a number of rounds which involve some combination of\nthe following 4 basic operations:\n\n* ShiftRows\n* MixColumns\n* SubBytes\n* AddRoundKey\n\n## Timing problems\n\nMost software implementations of AES use a large set of lookup tables - generally at least the\nSubBytes step is implemented via lookup tables; faster implementations generally implement the\nMixColumns step this way as well. This is largely a design flaw in the AES implementation as it was\nnot realized during the NIST standardization process that table lookups can lead to security\nproblems [1]. The issue is that not all table lookups occur in constant time - an address that was\nrecently used is looked up much faster than one that hasn't been used in a while. A careful\nadversary can measure the amount of time that each AES operation takes and use that information to\nhelp determine the secret key or plain text information. More specifically, its not table lookups\nthat lead to these types of timing attacks - the issue is table lookups that use secret information\nas part of the address to lookup. A table lookup that is performed the exact same way every time\nregardless of the key or plaintext doesn't leak any information. This implementation uses no data\ndependant table lookups.\n\n## Bit Slicing\n\nBit Slicing is a technique that is basically a software emulation of hardware implementation\ntechniques. One of the earliest implementations of this technique was for a DES implementation [4].\nIn hardware, table lookups do not present the same timing problems as they do in software, however\nthey present other problems - namely that a 256 byte S-box table takes up a huge amount of space on\na chip. Hardware implementations, thus, tend to avoid table lookups and instead calculate the\ncontents of the S-Boxes as part of every operation. So, the key to an efficient Bit Sliced software\nimplementation is to re-arrange all of the bits of data to process into a form that can easily be\napplied in much the same way that it would be in hardeware. It is fortunate, that AES was designed\nsuch that these types of hardware implementations could be very efficient - the contents of the\nS-boxes are defined by a mathematical formula.\n\nA hardware implementation works on single bits at a time. Unlike adding variables in software,\nhowever, that occur generally one at a time, hardware implementations are extremely parallel and\noperate on many, many bits at once. Bit Slicing emulates that by moving all \"equivalent\" bits into\ncommon registers and then operating on large groups of bits all at once. Calculating the S-box value\nfor a single bit is extremely expensive, but its much cheaper when you can amortize that cost over\n128 bits (as in an XMM register). This implementation follows the same strategy as in [5] and that\nis an excellent source for more specific details. However, a short description follows.\n\nThe input data is simply a collection of bytes. Each byte is comprised of 8 bits, a low order bit\n(bit 0) through a high order bit (bit 7). Bit slicing the input data simply takes all of the low\norder bits (bit 0) from the input data, and moves them into a single register (eg: XMM0). Next, all\nof them 2nd lowest bits are moved into their own register (eg: XMM1), and so on. After completion,\nwe're left with 8 variables, each of which contains an equivalent set of bits. The exact order of\nthose bits is irrevent for the implementation of the SubBytes step, however, it is very important\nfor the MixColumns step. Again, see [5] for details. Due to the design of AES, its them possible to\nexecute the entire AES operation using just bitwise exclusive ors and rotates once we have Bit\nSliced the input data. After the completion of the AES operation, we then un-Bit Slice the data\nto give us our output. Clearly, the more bits that we can process at once, the faster this will go -\nthus, the version that processes 8 blocks at once is roughly 8 times faster than processing just a\nsingle block at a time.\n\nThe ShiftRows step is fairly straight-forward to implement on the Bit Sliced state. The MixColumns\nand especially the SubBytes steps are more complicated. This implementation draws heavily on the\nformulas from [5], [6], and [7] to implement these steps.\n\n## Implementation\n\nBoth implementations work basically the same way and share pretty much all of their code. The key\nis first processed to create all of the round keys where each round key is just a 16 byte chunk of\ndata that is combined into the AES state by the AddRoundKey step as part of each encryption or\ndecryption round. Processing the round key can be expensive, so this is done before encryption or\ndecryption. Before encrypting or decrypting data, the data to be processed by be Bit Sliced into 8\nseperate variables where each variable holds equivalent bytes from the state. This Bit Sliced state\nis stored as a Bs8State<T>, where T is the type that stores each set of bits. The first\nimplementation stores these bits in a u32 which permits up to 8 * 32 = 1024 bits of data to be\nprocessed at once. This implementation only processes a single block at a time, so, in reality, only\n512 bits are processed at once and the remaining 512 bits of the variables are unused. The 2nd\nimplementation uses u32x4s - vectors of 4 u32s. Thus, we can process 8 * 128 = 4096 bits at once,\nwhich corresponds exactly to 8 blocks.\n\nThe Bs8State struct implements the AesOps trait, which contains methods for each of the 4 main steps\nof the AES algorithm. The types, T, each implement the AesBitValueOps trait, which containts methods\nnecessary for processing a collection or bit values and the AesOps trait relies heavily on this\ntrait to perform its operations.\n\nThe Bs4State and Bs2State struct implement operations of various subfields of the full GF(2^8)\nfinite field which allows for efficient computation of the AES S-Boxes. See [7] for details.\n\n## References\n\n[1] - \"Cache-Collision Timing Attacks Against AES\". Joseph Bonneau and Ilya Mironov.\n      http://www.jbonneau.com/doc/BM06-CHES-aes_cache_timing.pdf\n[2] - \"Software mitigations to hedge AES against cache-based software side channel vulnerabilities\".\n      Ernie Brickell, et al. http://eprint.iacr.org/2006/052.pdf.\n[3] - \"Cache Attacks and Countermeasures: the Case of AES (Extended Version)\".\n      Dag Arne Osvik, et al. tau.ac.il/~tromer/papers/cache.pdf‎.\n[4] - \"A Fast New DES Implementation in Software\". Eli Biham.\n      http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.52.5429&rep=rep1&type=pdf.\n[5] - \"Faster and Timing-Attack Resistant AES-GCM\". Emilia K ̈asper and Peter Schwabe.\n      http://www.chesworkshop.org/ches2009/presentations/01_Session_1/CHES2009_ekasper.pdf.\n[6] - \"FAST AES DECRYPTION\". Vinit Azad. http://webcache.googleusercontent.com/\n      search?q=cache:ld_f8pSgURcJ:csusdspace.calstate.edu/bitstream/handle/10211.9/1224/\n      Vinit_Azad_MS_Report.doc%3Fsequence%3D2+&cd=4&hl=en&ct=clnk&gl=us&client=ubuntu.\n[7] - \"A Very Compact Rijndael S-box\". D. Canright.\n      http://www.dtic.mil/cgi-bin/GetTRDoc?AD=ADA434781.\n*/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":43929,"byte_end":52031,"line_start":7,"line_end":124,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2684},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":54197,"byte_end":54216,"line_start":204,"line_end":204,"column_start":20,"column_end":39},"name":"AesSafe128Encryptor","qualname":"::aessafe::AesSafe128Encryptor","value":"AesSafe128Encryptor {  }","parent":null,"children":[{"krate":0,"index":2685}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2691},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":54242,"byte_end":54261,"line_start":205,"line_end":205,"column_start":20,"column_end":39},"name":"AesSafe128Decryptor","qualname":"::aessafe::AesSafe128Decryptor","value":"AesSafe128Decryptor {  }","parent":null,"children":[{"krate":0,"index":2692}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2714},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":54490,"byte_end":54509,"line_start":211,"line_end":211,"column_start":20,"column_end":39},"name":"AesSafe192Encryptor","qualname":"::aessafe::AesSafe192Encryptor","value":"AesSafe192Encryptor {  }","parent":null,"children":[{"krate":0,"index":2715}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2721},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":54535,"byte_end":54554,"line_start":212,"line_end":212,"column_start":20,"column_end":39},"name":"AesSafe192Decryptor","qualname":"::aessafe::AesSafe192Decryptor","value":"AesSafe192Decryptor {  }","parent":null,"children":[{"krate":0,"index":2722}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2744},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":54783,"byte_end":54802,"line_start":218,"line_end":218,"column_start":20,"column_end":39},"name":"AesSafe256Encryptor","qualname":"::aessafe::AesSafe256Encryptor","value":"AesSafe256Encryptor {  }","parent":null,"children":[{"krate":0,"index":2745}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2751},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":54828,"byte_end":54847,"line_start":219,"line_end":219,"column_start":20,"column_end":39},"name":"AesSafe256Decryptor","qualname":"::aessafe::AesSafe256Decryptor","value":"AesSafe256Decryptor {  }","parent":null,"children":[{"krate":0,"index":2752}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2774},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":57324,"byte_end":57345,"line_start":306,"line_end":306,"column_start":23,"column_end":44},"name":"AesSafe128EncryptorX8","qualname":"::aessafe::AesSafe128EncryptorX8","value":"AesSafe128EncryptorX8 {  }","parent":null,"children":[{"krate":0,"index":2775}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2781},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":57374,"byte_end":57395,"line_start":307,"line_end":307,"column_start":23,"column_end":44},"name":"AesSafe128DecryptorX8","qualname":"::aessafe::AesSafe128DecryptorX8","value":"AesSafe128DecryptorX8 {  }","parent":null,"children":[{"krate":0,"index":2782}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2804},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":57647,"byte_end":57668,"line_start":313,"line_end":313,"column_start":23,"column_end":44},"name":"AesSafe192EncryptorX8","qualname":"::aessafe::AesSafe192EncryptorX8","value":"AesSafe192EncryptorX8 {  }","parent":null,"children":[{"krate":0,"index":2805}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2811},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":57697,"byte_end":57718,"line_start":314,"line_end":314,"column_start":23,"column_end":44},"name":"AesSafe192DecryptorX8","qualname":"::aessafe::AesSafe192DecryptorX8","value":"AesSafe192DecryptorX8 {  }","parent":null,"children":[{"krate":0,"index":2812}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2834},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":57970,"byte_end":57991,"line_start":320,"line_end":320,"column_start":23,"column_end":44},"name":"AesSafe256EncryptorX8","qualname":"::aessafe::AesSafe256EncryptorX8","value":"AesSafe256EncryptorX8 {  }","parent":null,"children":[{"krate":0,"index":2835}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2841},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":58020,"byte_end":58041,"line_start":321,"line_end":321,"column_start":23,"column_end":44},"name":"AesSafe256DecryptorX8","qualname":"::aessafe::AesSafe256DecryptorX8","value":"AesSafe256DecryptorX8 {  }","parent":null,"children":[{"krate":0,"index":2842}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":291},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bcrypt","qualname":"::bcrypt","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":299},{"krate":0,"index":302},{"krate":0,"index":303}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":303},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt.rs","byte_start":90145,"byte_end":90151,"line_start":24,"line_end":24,"column_start":8,"column_end":14},"name":"bcrypt","qualname":"::bcrypt::bcrypt","value":"pub fn bcrypt(u32, &[u8], &[u8], &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":304},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bcrypt_pbkdf","qualname":"::bcrypt_pbkdf","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":312},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":330},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/bcrypt_pbkdf.rs","byte_start":101518,"byte_end":101530,"line_start":38,"line_end":38,"column_start":8,"column_end":20},"name":"bcrypt_pbkdf","qualname":"::bcrypt_pbkdf::bcrypt_pbkdf","value":"pub fn bcrypt_pbkdf(&[u8], &[u8], u32, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":335},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"blake2b","qualname":"::blake2b","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":2902},{"krate":0,"index":2919},{"krate":0,"index":372},{"krate":0,"index":2920},{"krate":0,"index":2935},{"krate":0,"index":2936},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":416},{"krate":0,"index":422}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2902},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":116892,"byte_end":116899,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"Blake2b","qualname":"::blake2b::Blake2b","value":"Blake2b {  }","parent":null,"children":[{"krate":0,"index":2903},{"krate":0,"index":2905},{"krate":0,"index":2907},{"krate":0,"index":2909},{"krate":0,"index":2911},{"krate":0,"index":2912},{"krate":0,"index":2914},{"krate":0,"index":2915},{"krate":0,"index":2916},{"krate":0,"index":2917},{"krate":0,"index":2918}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":121166,"byte_end":121169,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<Blake2b>::new","value":"pub fn new(usize) -> Blake2b","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":121602,"byte_end":121611,"line_start":195,"line_end":195,"column_start":12,"column_end":21},"name":"new_keyed","qualname":"<Blake2b>::new_keyed","value":"pub fn new_keyed(usize, &[u8]) -> Blake2b","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":125332,"byte_end":125337,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"name":"reset","qualname":"<Blake2b>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":125887,"byte_end":125894,"line_start":331,"line_end":331,"column_start":12,"column_end":19},"name":"blake2b","qualname":"<Blake2b>::blake2b","value":"pub fn blake2b(&mut [u8], &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":428},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"blake2s","qualname":"::blake2s","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":2941},{"krate":0,"index":2958},{"krate":0,"index":465},{"krate":0,"index":2959},{"krate":0,"index":2973},{"krate":0,"index":2974},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":509},{"krate":0,"index":515}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2941},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":136393,"byte_end":136400,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"Blake2s","qualname":"::blake2s::Blake2s","value":"Blake2s {  }","parent":null,"children":[{"krate":0,"index":2942},{"krate":0,"index":2944},{"krate":0,"index":2946},{"krate":0,"index":2948},{"krate":0,"index":2950},{"krate":0,"index":2951},{"krate":0,"index":2953},{"krate":0,"index":2954},{"krate":0,"index":2955},{"krate":0,"index":2956},{"krate":0,"index":2957}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":140539,"byte_end":140542,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<Blake2s>::new","value":"pub fn new(usize) -> Blake2s","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":140975,"byte_end":140984,"line_start":188,"line_end":188,"column_start":12,"column_end":21},"name":"new_keyed","qualname":"<Blake2s>::new_keyed","value":"pub fn new_keyed(usize, &[u8]) -> Blake2s","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":144619,"byte_end":144624,"line_start":299,"line_end":299,"column_start":12,"column_end":17},"name":"reset","qualname":"<Blake2s>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":145174,"byte_end":145181,"line_start":321,"line_end":321,"column_start":12,"column_end":19},"name":"blake2s","qualname":"<Blake2s>::blake2s","value":"pub fn blake2s(&mut [u8], &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":521},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"blockmodes","qualname":"::blockmodes","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":544},{"krate":0,"index":547},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":2979},{"krate":0,"index":2995},{"krate":0,"index":2997},{"krate":0,"index":600},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":2998},{"krate":0,"index":3000},{"krate":0,"index":3002},{"krate":0,"index":634},{"krate":0,"index":3003},{"krate":0,"index":3005},{"krate":0,"index":3007},{"krate":0,"index":639},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":650},{"krate":0,"index":656},{"krate":0,"index":659},{"krate":0,"index":662},{"krate":0,"index":668},{"krate":0,"index":671},{"krate":0,"index":674},{"krate":0,"index":678},{"krate":0,"index":683},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":693},{"krate":0,"index":697},{"krate":0,"index":702},{"krate":0,"index":706},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":717},{"krate":0,"index":722},{"krate":0,"index":726},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":737},{"krate":0,"index":742},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":752},{"krate":0,"index":757},{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":766},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":777},{"krate":0,"index":780},{"krate":0,"index":783}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":595},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":154105,"byte_end":154121,"line_start":32,"line_end":32,"column_start":11,"column_end":27},"name":"PaddingProcessor","qualname":"::blockmodes::PaddingProcessor","value":"PaddingProcessor","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":598}],"decl_id":null,"docs":" A PaddingProcessor handles adding or removing padding\n","sig":null,"attributes":[{"value":"/ A PaddingProcessor handles adding or removing padding","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":154037,"byte_end":154094,"line_start":31,"line_end":31,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":154351,"byte_end":154360,"line_start":36,"line_end":36,"column_start":8,"column_end":17},"name":"pad_input","qualname":"::blockmodes::PaddingProcessor::pad_input","value":"pub fn pad_input<W: WriteBuffer>(&mut Self, &mut W)","parent":{"krate":0,"index":595},"children":[],"decl_id":null,"docs":" Add padding to the last block of input data\n If the mode can't handle a non-full block, it signals that error by simply leaving the block\n as it is which will be detected as an InvalidLength error.\n","sig":null,"attributes":[{"value":"/ Add padding to the last block of input data","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":154128,"byte_end":154175,"line_start":33,"line_end":33,"column_start":5,"column_end":52}},{"value":"/ If the mode can't handle a non-full block, it signals that error by simply leaving the block","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":154180,"byte_end":154276,"line_start":34,"line_end":34,"column_start":5,"column_end":101}},{"value":"/ as it is which will be detected as an InvalidLength error.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":154281,"byte_end":154343,"line_start":35,"line_end":35,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":154528,"byte_end":154540,"line_start":40,"line_end":40,"column_start":8,"column_end":20},"name":"strip_output","qualname":"::blockmodes::PaddingProcessor::strip_output","value":"pub fn strip_output<R: ReadBuffer>(&mut Self, &mut R) -> bool","parent":{"krate":0,"index":595},"children":[],"decl_id":null,"docs":" Remove padding from the last block of output data\n If false is returned, the processing fails\n","sig":null,"attributes":[{"value":"/ Remove padding from the last block of output data","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":154416,"byte_end":154469,"line_start":38,"line_end":38,"column_start":5,"column_end":58}},{"value":"/ If false is returned, the processing fails","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":154474,"byte_end":154520,"line_start":39,"line_end":39,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":2998},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":172349,"byte_end":172358,"line_start":421,"line_end":421,"column_start":12,"column_end":21},"name":"NoPadding","qualname":"::blockmodes::NoPadding","value":"","parent":null,"children":[],"decl_id":null,"docs":" No padding mode for ECB and CBC encryption\n","sig":null,"attributes":[{"value":"/ No padding mode for ECB and CBC encryption","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":172268,"byte_end":172314,"line_start":419,"line_end":419,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":3003},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":172618,"byte_end":172629,"line_start":430,"line_end":430,"column_start":12,"column_end":23},"name":"PkcsPadding","qualname":"::blockmodes::PkcsPadding","value":"","parent":null,"children":[],"decl_id":null,"docs":" PKCS padding mode for ECB and CBC encryption\n","sig":null,"attributes":[{"value":"/ PKCS padding mode for ECB and CBC encryption","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":172535,"byte_end":172583,"line_start":428,"line_end":428,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":644},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":174081,"byte_end":174091,"line_start":464,"line_end":464,"column_start":12,"column_end":22},"name":"EncPadding","qualname":"::blockmodes::EncPadding","value":"EncPadding {  }","parent":null,"children":[{"krate":0,"index":646}],"decl_id":null,"docs":" Wraps a PaddingProcessor so that only pad_input() will actually be called.\n","sig":null,"attributes":[{"value":"/ Wraps a PaddingProcessor so that only pad_input() will actually be called.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":173991,"byte_end":174069,"line_start":463,"line_end":463,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":656},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":174546,"byte_end":174556,"line_start":478,"line_end":478,"column_start":12,"column_end":22},"name":"DecPadding","qualname":"::blockmodes::DecPadding","value":"DecPadding {  }","parent":null,"children":[{"krate":0,"index":658}],"decl_id":null,"docs":" Wraps a PaddingProcessor so that only strip_output() will actually be called.\n","sig":null,"attributes":[{"value":"/ Wraps a PaddingProcessor so that only strip_output() will actually be called.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":174453,"byte_end":174534,"line_start":477,"line_end":477,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":674},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":175214,"byte_end":175226,"line_start":502,"line_end":502,"column_start":12,"column_end":24},"name":"EcbEncryptor","qualname":"::blockmodes::EcbEncryptor","value":"EcbEncryptor {  }","parent":null,"children":[{"krate":0,"index":677}],"decl_id":null,"docs":" ECB Encryption mode\n","sig":null,"attributes":[{"value":"/ ECB Encryption mode","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":175179,"byte_end":175202,"line_start":501,"line_end":501,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":175423,"byte_end":175426,"line_start":508,"line_end":508,"column_start":12,"column_end":15},"name":"new","qualname":"<EcbEncryptor<T, X>>::new","value":"pub fn new(T, X) -> EcbEncryptor<T, EncPadding<X>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new ECB encryption mode object\n","sig":null,"attributes":[{"value":"/ Create a new ECB encryption mode object","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":175368,"byte_end":175411,"line_start":507,"line_end":507,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":175753,"byte_end":175758,"line_start":517,"line_end":517,"column_start":12,"column_end":17},"name":"reset","qualname":"<EcbEncryptor<T, X>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":693},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":176412,"byte_end":176424,"line_start":540,"line_end":540,"column_start":12,"column_end":24},"name":"EcbDecryptor","qualname":"::blockmodes::EcbDecryptor","value":"EcbDecryptor {  }","parent":null,"children":[{"krate":0,"index":696}],"decl_id":null,"docs":" ECB Decryption mode\n","sig":null,"attributes":[{"value":"/ ECB Decryption mode","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":176377,"byte_end":176400,"line_start":539,"line_end":539,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":176621,"byte_end":176624,"line_start":546,"line_end":546,"column_start":12,"column_end":15},"name":"new","qualname":"<EcbDecryptor<T, X>>::new","value":"pub fn new(T, X) -> EcbDecryptor<T, DecPadding<X>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new ECB decryption mode object\n","sig":null,"attributes":[{"value":"/ Create a new ECB decryption mode object","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":176566,"byte_end":176609,"line_start":545,"line_end":545,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":176951,"byte_end":176956,"line_start":555,"line_end":555,"column_start":12,"column_end":17},"name":"reset","qualname":"<EcbDecryptor<T, X>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":713},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":177770,"byte_end":177782,"line_start":582,"line_end":582,"column_start":12,"column_end":24},"name":"CbcEncryptor","qualname":"::blockmodes::CbcEncryptor","value":"CbcEncryptor {  }","parent":null,"children":[{"krate":0,"index":716}],"decl_id":null,"docs":" CBC encryption mode\n","sig":null,"attributes":[{"value":"/ CBC encryption mode","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":177735,"byte_end":177758,"line_start":581,"line_end":581,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":177979,"byte_end":177982,"line_start":588,"line_end":588,"column_start":12,"column_end":15},"name":"new","qualname":"<CbcEncryptor<T, X>>::new","value":"pub fn new(T, X, Vec<u8>) -> CbcEncryptor<T, EncPadding<X>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CBC encryption mode object\n","sig":null,"attributes":[{"value":"/ Create a new CBC encryption mode object","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":177924,"byte_end":177967,"line_start":587,"line_end":587,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":178488,"byte_end":178493,"line_start":603,"line_end":603,"column_start":12,"column_end":17},"name":"reset","qualname":"<CbcEncryptor<T, X>>::reset","value":"pub fn reset(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":733},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":179336,"byte_end":179348,"line_start":630,"line_end":630,"column_start":12,"column_end":24},"name":"CbcDecryptor","qualname":"::blockmodes::CbcDecryptor","value":"CbcDecryptor {  }","parent":null,"children":[{"krate":0,"index":736}],"decl_id":null,"docs":" CBC decryption mode\n","sig":null,"attributes":[{"value":"/ CBC decryption mode","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":179301,"byte_end":179324,"line_start":629,"line_end":629,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":179545,"byte_end":179548,"line_start":636,"line_end":636,"column_start":12,"column_end":15},"name":"new","qualname":"<CbcDecryptor<T, X>>::new","value":"pub fn new(T, X, Vec<u8>) -> CbcDecryptor<T, DecPadding<X>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CBC decryption mode object\n","sig":null,"attributes":[{"value":"/ Create a new CBC decryption mode object","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":179490,"byte_end":179533,"line_start":635,"line_end":635,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":180054,"byte_end":180059,"line_start":651,"line_end":651,"column_start":12,"column_end":17},"name":"reset","qualname":"<CbcDecryptor<T, X>>::reset","value":"pub fn reset(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":747},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":180695,"byte_end":180702,"line_start":675,"line_end":675,"column_start":12,"column_end":19},"name":"CtrMode","qualname":"::blockmodes::CtrMode","value":"CtrMode {  }","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751}],"decl_id":null,"docs":" CTR Mode\n","sig":null,"attributes":[{"value":"/ CTR Mode","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":180671,"byte_end":180683,"line_start":674,"line_end":674,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":180850,"byte_end":180853,"line_start":683,"line_end":683,"column_start":12,"column_end":15},"name":"new","qualname":"<CtrMode<A>>::new","value":"pub fn new(A, Vec<u8>) -> CtrMode<A>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CTR object\n","sig":null,"attributes":[{"value":"/ Create a new CTR object","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":180811,"byte_end":180838,"line_start":682,"line_end":682,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":181118,"byte_end":181123,"line_start":691,"line_end":691,"column_start":12,"column_end":17},"name":"reset","qualname":"<CtrMode<A>>::reset","value":"pub fn reset(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":766},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":182778,"byte_end":182787,"line_start":738,"line_end":738,"column_start":12,"column_end":21},"name":"CtrModeX8","qualname":"::blockmodes::CtrModeX8","value":"CtrModeX8 {  }","parent":null,"children":[{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770}],"decl_id":null,"docs":" CTR Mode that operates on 8 blocks at a time\n","sig":null,"attributes":[{"value":"/ CTR Mode that operates on 8 blocks at a time","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":182718,"byte_end":182766,"line_start":737,"line_end":737,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":183200,"byte_end":183203,"line_start":753,"line_end":753,"column_start":12,"column_end":15},"name":"new","qualname":"<CtrModeX8<A>>::new","value":"pub fn new(A, &[u8]) -> CtrModeX8<A>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CTR object that operates on 8 blocks at a time\n","sig":null,"attributes":[{"value":"/ Create a new CTR object that operates on 8 blocks at a time","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":183125,"byte_end":183188,"line_start":752,"line_end":752,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":183600,"byte_end":183605,"line_start":763,"line_end":763,"column_start":12,"column_end":17},"name":"reset","qualname":"<CtrModeX8<A>>::reset","value":"pub fn reset(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":786},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"blowfish","qualname":"::blowfish","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":791},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":3008},{"krate":0,"index":3014},{"krate":0,"index":3019},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":813},{"krate":0,"index":816}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3008},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":208182,"byte_end":208190,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"Blowfish","qualname":"::blowfish::Blowfish","value":"Blowfish {  }","parent":null,"children":[{"krate":0,"index":3009},{"krate":0,"index":3012}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":208511,"byte_end":208514,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<Blowfish>::new","value":"pub fn new(&[u8]) -> Blowfish","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":208759,"byte_end":208769,"line_start":38,"line_end":38,"column_start":12,"column_end":22},"name":"init_state","qualname":"<Blowfish>::init_state","value":"pub fn init_state() -> Blowfish","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":224360,"byte_end":224370,"line_start":219,"line_end":219,"column_start":12,"column_end":22},"name":"expand_key","qualname":"<Blowfish>::expand_key","value":"pub fn expand_key(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":225092,"byte_end":225109,"line_start":245,"line_end":245,"column_start":12,"column_end":29},"name":"salted_expand_key","qualname":"<Blowfish>::salted_expand_key","value":"pub fn salted_expand_key(&mut Self, &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":226511,"byte_end":226518,"line_start":282,"line_end":282,"column_start":12,"column_end":19},"name":"encrypt","qualname":"<Blowfish>::encrypt","value":"pub fn encrypt(&Self, u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":819},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"buffer","qualname":"::buffer","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":823},{"krate":0,"index":3020},{"krate":0,"index":3025},{"krate":0,"index":3027},{"krate":0,"index":826},{"krate":0,"index":841},{"krate":0,"index":853},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":871},{"krate":0,"index":875},{"krate":0,"index":881},{"krate":0,"index":891},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":910},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":929},{"krate":0,"index":933},{"krate":0,"index":936}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3021},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241187,"byte_end":241202,"line_start":13,"line_end":13,"column_start":5,"column_end":20},"name":"BufferUnderflow","qualname":"::buffer::BufferResult::BufferUnderflow","value":"BufferResult::BufferUnderflow","parent":{"krate":0,"index":3020},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3023},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241208,"byte_end":241222,"line_start":14,"line_end":14,"column_start":5,"column_end":19},"name":"BufferOverflow","qualname":"::buffer::BufferResult::BufferOverflow","value":"BufferResult::BufferOverflow","parent":{"krate":0,"index":3020},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3020},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241168,"byte_end":241180,"line_start":12,"line_end":12,"column_start":10,"column_end":22},"name":"BufferResult","qualname":"::buffer::BufferResult","value":"pub enum BufferResult { BufferUnderflow, BufferOverflow, }","parent":null,"children":[{"krate":0,"index":3021},{"krate":0,"index":3023}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":826},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241236,"byte_end":241246,"line_start":17,"line_end":17,"column_start":11,"column_end":21},"name":"ReadBuffer","qualname":"::buffer::ReadBuffer","value":"ReadBuffer","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241256,"byte_end":241264,"line_start":18,"line_end":18,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::buffer::ReadBuffer::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241288,"byte_end":241295,"line_start":19,"line_end":19,"column_start":8,"column_end":15},"name":"is_full","qualname":"::buffer::ReadBuffer::is_full","value":"pub fn is_full(&Self) -> bool","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241319,"byte_end":241328,"line_start":20,"line_end":20,"column_start":8,"column_end":17},"name":"remaining","qualname":"::buffer::ReadBuffer::remaining","value":"pub fn remaining(&Self) -> usize","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241353,"byte_end":241361,"line_start":21,"line_end":21,"column_start":8,"column_end":16},"name":"capacity","qualname":"::buffer::ReadBuffer::capacity","value":"pub fn capacity(&Self) -> usize","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241386,"byte_end":241394,"line_start":22,"line_end":22,"column_start":8,"column_end":16},"name":"position","qualname":"::buffer::ReadBuffer::position","value":"pub fn position(&Self) -> usize","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241458,"byte_end":241464,"line_start":24,"line_end":24,"column_start":8,"column_end":14},"name":"rewind","qualname":"::buffer::ReadBuffer::rewind","value":"pub fn rewind(&mut Self, usize)","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241501,"byte_end":241509,"line_start":25,"line_end":25,"column_start":8,"column_end":16},"name":"truncate","qualname":"::buffer::ReadBuffer::truncate","value":"pub fn truncate(&mut Self, usize)","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241544,"byte_end":241549,"line_start":26,"line_end":26,"column_start":8,"column_end":13},"name":"reset","qualname":"::buffer::ReadBuffer::reset","value":"pub fn reset(&mut Self)","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241570,"byte_end":241579,"line_start":28,"line_end":28,"column_start":8,"column_end":17},"name":"peek_next","qualname":"::buffer::ReadBuffer::peek_next","value":"pub fn peek_next(&Self, usize) -> &[u8]","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241618,"byte_end":241632,"line_start":29,"line_end":29,"column_start":8,"column_end":22},"name":"peek_remaining","qualname":"::buffer::ReadBuffer::peek_remaining","value":"pub fn peek_remaining(&Self) -> &[u8]","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241706,"byte_end":241715,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"take_next","qualname":"::buffer::ReadBuffer::take_next","value":"pub fn take_next(&mut Self, usize) -> &[u8]","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241758,"byte_end":241772,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"take_remaining","qualname":"::buffer::ReadBuffer::take_remaining","value":"pub fn take_remaining(&mut Self) -> &[u8]","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":241873,"byte_end":241880,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"push_to","qualname":"::buffer::ReadBuffer::push_to","value":"pub fn push_to<W: WriteBuffer>(&mut Self, &mut W)","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":841},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242094,"byte_end":242105,"line_start":45,"line_end":45,"column_start":11,"column_end":22},"name":"WriteBuffer","qualname":"::buffer::WriteBuffer","value":"WriteBuffer","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242115,"byte_end":242123,"line_start":46,"line_end":46,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::buffer::WriteBuffer::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242147,"byte_end":242154,"line_start":47,"line_end":47,"column_start":8,"column_end":15},"name":"is_full","qualname":"::buffer::WriteBuffer::is_full","value":"pub fn is_full(&Self) -> bool","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242178,"byte_end":242187,"line_start":48,"line_end":48,"column_start":8,"column_end":17},"name":"remaining","qualname":"::buffer::WriteBuffer::remaining","value":"pub fn remaining(&Self) -> usize","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242212,"byte_end":242220,"line_start":49,"line_end":49,"column_start":8,"column_end":16},"name":"capacity","qualname":"::buffer::WriteBuffer::capacity","value":"pub fn capacity(&Self) -> usize","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242245,"byte_end":242253,"line_start":50,"line_end":50,"column_start":8,"column_end":16},"name":"position","qualname":"::buffer::WriteBuffer::position","value":"pub fn position(&Self) -> usize","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242317,"byte_end":242323,"line_start":52,"line_end":52,"column_start":8,"column_end":14},"name":"rewind","qualname":"::buffer::WriteBuffer::rewind","value":"pub fn rewind(&mut Self, usize)","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242360,"byte_end":242365,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"reset","qualname":"::buffer::WriteBuffer::reset","value":"pub fn reset(&mut Self)","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242425,"byte_end":242441,"line_start":56,"line_end":56,"column_start":8,"column_end":24},"name":"peek_read_buffer","qualname":"::buffer::WriteBuffer::peek_read_buffer","value":"pub fn peek_read_buffer(&mut Self) -> RefReadBuffer","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242479,"byte_end":242488,"line_start":58,"line_end":58,"column_start":8,"column_end":17},"name":"take_next","qualname":"::buffer::WriteBuffer::take_next","value":"pub fn take_next(&mut Self, usize) -> &mut [u8]","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242535,"byte_end":242549,"line_start":59,"line_end":59,"column_start":8,"column_end":22},"name":"take_remaining","qualname":"::buffer::WriteBuffer::take_remaining","value":"pub fn take_remaining(&mut Self) -> &mut [u8]","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242653,"byte_end":242669,"line_start":63,"line_end":63,"column_start":8,"column_end":24},"name":"take_read_buffer","qualname":"::buffer::WriteBuffer::take_read_buffer","value":"pub fn take_read_buffer(&mut Self) -> RefReadBuffer","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":853},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242713,"byte_end":242726,"line_start":66,"line_end":66,"column_start":12,"column_end":25},"name":"RefReadBuffer","qualname":"::buffer::RefReadBuffer","value":"RefReadBuffer {  }","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242812,"byte_end":242815,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<RefReadBuffer>::new","value":"pub fn new(&[u8]) -> RefReadBuffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":871},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":243674,"byte_end":243689,"line_start":101,"line_end":101,"column_start":12,"column_end":27},"name":"OwnedReadBuffer","qualname":"::buffer::OwnedReadBuffer","value":"OwnedReadBuffer {  }","parent":null,"children":[{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":243779,"byte_end":243782,"line_start":108,"line_end":108,"column_start":12,"column_end":15},"name":"new","qualname":"<OwnedReadBuffer>::new","value":"pub fn new(Vec<u8>) -> OwnedReadBuffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":243967,"byte_end":243979,"line_start":116,"line_end":116,"column_start":12,"column_end":24},"name":"new_with_len","qualname":"<OwnedReadBuffer>::new_with_len","value":"pub fn new_with_len<'a>(Vec<u8>, usize) -> OwnedReadBuffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":244150,"byte_end":244167,"line_start":123,"line_end":123,"column_start":12,"column_end":29},"name":"into_write_buffer","qualname":"<OwnedReadBuffer>::into_write_buffer","value":"pub fn into_write_buffer(Self) -> OwnedWriteBuffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":244254,"byte_end":244273,"line_start":126,"line_end":126,"column_start":12,"column_end":31},"name":"borrow_write_buffer","qualname":"<OwnedReadBuffer>::borrow_write_buffer","value":"pub fn borrow_write_buffer(&mut Self) -> BorrowedWriteBuffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":891},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":245070,"byte_end":245084,"line_start":152,"line_end":152,"column_start":12,"column_end":26},"name":"RefWriteBuffer","qualname":"::buffer::RefWriteBuffer","value":"RefWriteBuffer {  }","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":245191,"byte_end":245194,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<RefWriteBuffer>::new","value":"pub fn new(&mut [u8]) -> RefWriteBuffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":910},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":246182,"byte_end":246201,"line_start":194,"line_end":194,"column_start":12,"column_end":31},"name":"BorrowedWriteBuffer","qualname":"::buffer::BorrowedWriteBuffer","value":"BorrowedWriteBuffer {  }","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":929},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":247530,"byte_end":247546,"line_start":244,"line_end":244,"column_start":12,"column_end":28},"name":"OwnedWriteBuffer","qualname":"::buffer::OwnedWriteBuffer","value":"OwnedWriteBuffer {  }","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":247637,"byte_end":247640,"line_start":251,"line_end":251,"column_start":12,"column_end":15},"name":"new","qualname":"<OwnedWriteBuffer>::new","value":"pub fn new(Vec<u8>) -> OwnedWriteBuffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":247827,"byte_end":247843,"line_start":259,"line_end":259,"column_start":12,"column_end":28},"name":"into_read_buffer","qualname":"<OwnedWriteBuffer>::into_read_buffer","value":"pub fn into_read_buffer(Self) -> OwnedReadBuffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":949},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chacha20","qualname":"::chacha20","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":957},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":980},{"krate":0,"index":983},{"krate":0,"index":986},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":3028},{"krate":0,"index":3033},{"krate":0,"index":3035},{"krate":0,"index":3036},{"krate":0,"index":3041},{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1012},{"krate":0,"index":1014},{"krate":0,"index":1016}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3036},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":249460,"byte_end":249468,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"ChaCha20","qualname":"::chacha20::ChaCha20","value":"ChaCha20 {  }","parent":null,"children":[{"krate":0,"index":3037},{"krate":0,"index":3038},{"krate":0,"index":3040}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":251203,"byte_end":251206,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<ChaCha20>::new","value":"pub fn new(&[u8], &[u8]) -> ChaCha20","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":251462,"byte_end":251475,"line_start":95,"line_end":95,"column_start":12,"column_end":25},"name":"new_xchacha20","qualname":"<ChaCha20>::new_xchacha20","value":"pub fn new_xchacha20(&[u8], &[u8]) -> ChaCha20","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1018},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chacha20poly1305","qualname":"::chacha20poly1305","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs","parent":null,"children":[{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1035},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":3042},{"krate":0,"index":3047},{"krate":0,"index":3049},{"krate":0,"index":1045},{"krate":0,"index":1050},{"krate":0,"index":1053}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3042},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs","byte_start":276621,"byte_end":276637,"line_start":16,"line_end":16,"column_start":12,"column_end":28},"name":"ChaCha20Poly1305","qualname":"::chacha20poly1305::ChaCha20Poly1305","value":"ChaCha20Poly1305 {  }","parent":null,"children":[{"krate":0,"index":3043},{"krate":0,"index":3044},{"krate":0,"index":3045},{"krate":0,"index":3046}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs","byte_start":276759,"byte_end":276762,"line_start":24,"line_end":24,"column_start":10,"column_end":13},"name":"new","qualname":"<ChaCha20Poly1305>::new","value":"pub fn new(&[u8], &[u8], &[u8]) -> ChaCha20Poly1305","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1166},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"curve25519","qualname":"::curve25519","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","parent":null,"children":[{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1171},{"krate":0,"index":1174},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1191},{"krate":0,"index":3088},{"krate":0,"index":3092},{"krate":0,"index":3095},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1209},{"krate":0,"index":1212},{"krate":0,"index":1215},{"krate":0,"index":3096},{"krate":0,"index":3100},{"krate":0,"index":3102},{"krate":0,"index":3103},{"krate":0,"index":3108},{"krate":0,"index":3110},{"krate":0,"index":3111},{"krate":0,"index":3116},{"krate":0,"index":3118},{"krate":0,"index":3119},{"krate":0,"index":3123},{"krate":0,"index":3125},{"krate":0,"index":3126},{"krate":0,"index":3131},{"krate":0,"index":3133},{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1260},{"krate":0,"index":1268},{"krate":0,"index":1271},{"krate":0,"index":1274},{"krate":0,"index":1277},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1285},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1293},{"krate":0,"index":1297},{"krate":0,"index":1299}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3088},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":508183,"byte_end":508185,"line_start":15,"line_end":15,"column_start":12,"column_end":14},"name":"Fe","qualname":"::curve25519::Fe","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3090},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":508186,"byte_end":508199,"line_start":15,"line_end":15,"column_start":15,"column_end":28},"name":"0","qualname":"::curve25519::Fe::0","value":"[i32; 10]","parent":{"krate":0,"index":3088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":522470,"byte_end":522480,"line_start":404,"line_end":404,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Fe>::from_bytes","value":"pub fn from_bytes(&[u8]) -> Fe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":524643,"byte_end":524651,"line_start":457,"line_end":457,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<Fe>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1219},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":527521,"byte_end":527536,"line_start":541,"line_end":541,"column_start":12,"column_end":27},"name":"maybe_swap_with","qualname":"<Fe>::maybe_swap_with","value":"pub fn maybe_swap_with(&mut Self, &mut Fe, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":528845,"byte_end":528854,"line_start":591,"line_end":591,"column_start":12,"column_end":21},"name":"maybe_set","qualname":"<Fe>::maybe_set","value":"pub fn maybe_set(&mut Self, &Fe, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":543161,"byte_end":543167,"line_start":946,"line_end":946,"column_start":12,"column_end":18},"name":"invert","qualname":"<Fe>::invert","value":"pub fn invert(&Self) -> Fe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3096},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":546950,"byte_end":546954,"line_start":1066,"line_end":1066,"column_start":12,"column_end":16},"name":"GeP2","qualname":"::curve25519::GeP2","value":"GeP2 {  }","parent":null,"children":[{"krate":0,"index":3097},{"krate":0,"index":3098},{"krate":0,"index":3099}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3103},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":547027,"byte_end":547031,"line_start":1073,"line_end":1073,"column_start":12,"column_end":16},"name":"GeP3","qualname":"::curve25519::GeP3","value":"GeP3 {  }","parent":null,"children":[{"krate":0,"index":3104},{"krate":0,"index":3105},{"krate":0,"index":3106},{"krate":0,"index":3107}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3111},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":547115,"byte_end":547121,"line_start":1081,"line_end":1081,"column_start":12,"column_end":18},"name":"GeP1P1","qualname":"::curve25519::GeP1P1","value":"GeP1P1 {  }","parent":null,"children":[{"krate":0,"index":3112},{"krate":0,"index":3113},{"krate":0,"index":3114},{"krate":0,"index":3115}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3119},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":547205,"byte_end":547214,"line_start":1089,"line_end":1089,"column_start":12,"column_end":21},"name":"GePrecomp","qualname":"::curve25519::GePrecomp","value":"GePrecomp {  }","parent":null,"children":[{"krate":0,"index":3120},{"krate":0,"index":3121},{"krate":0,"index":3122}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3126},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":547305,"byte_end":547313,"line_start":1096,"line_end":1096,"column_start":12,"column_end":20},"name":"GeCached","qualname":"::curve25519::GeCached","value":"GeCached {  }","parent":null,"children":[{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3129},{"krate":0,"index":3130}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":547895,"byte_end":547903,"line_start":1133,"line_end":1133,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<GeP2>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":549695,"byte_end":549720,"line_start":1193,"line_end":1193,"column_start":12,"column_end":37},"name":"double_scalarmult_vartime","qualname":"<GeP2>::double_scalarmult_vartime","value":"pub fn double_scalarmult_vartime(&[u8], GeP3, &[u8]) -> GeP2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":551298,"byte_end":551323,"line_start":1247,"line_end":1247,"column_start":12,"column_end":37},"name":"from_bytes_negate_vartime","qualname":"<GeP3>::from_bytes_negate_vartime","value":"pub fn from_bytes_negate_vartime(&[u8]) -> Option<GeP3>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":552754,"byte_end":552762,"line_start":1308,"line_end":1308,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<GeP3>::to_bytes","value":"pub fn to_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":555472,"byte_end":555481,"line_start":1417,"line_end":1417,"column_start":12,"column_end":21},"name":"maybe_set","qualname":"<GePrecomp>::maybe_set","value":"pub fn maybe_set(&mut Self, &GePrecomp, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":555717,"byte_end":555723,"line_start":1423,"line_end":1423,"column_start":12,"column_end":18},"name":"select","qualname":"<GePrecomp>::select","value":"pub fn select(usize, i8) -> GePrecomp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1285},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":556756,"byte_end":556774,"line_start":1453,"line_end":1453,"column_start":8,"column_end":26},"name":"ge_scalarmult_base","qualname":"::curve25519::ge_scalarmult_base","value":"pub fn ge_scalarmult_base(&[u8]) -> GeP3","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1288},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":557946,"byte_end":557955,"line_start":1505,"line_end":1505,"column_start":8,"column_end":17},"name":"sc_reduce","qualname":"::curve25519::sc_reduce","value":"pub fn sc_reduce(&mut [u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1289},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":566186,"byte_end":566195,"line_start":1757,"line_end":1757,"column_start":8,"column_end":17},"name":"sc_muladd","qualname":"::curve25519::sc_muladd","value":"pub fn sc_muladd(&mut [u8], &[u8], &[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1290},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":578375,"byte_end":578385,"line_start":2091,"line_end":2091,"column_start":8,"column_end":18},"name":"curve25519","qualname":"::curve25519::curve25519","value":"pub fn curve25519(&[u8], &[u8]) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1293},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":579726,"byte_end":579741,"line_start":2152,"line_end":2152,"column_start":8,"column_end":23},"name":"curve25519_base","qualname":"::curve25519::curve25519_base","value":"pub fn curve25519_base(&[u8]) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1302},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"digest","qualname":"::digest","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1306}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1306},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":673678,"byte_end":673684,"line_start":17,"line_end":17,"column_start":11,"column_end":17},"name":"Digest","qualname":"::digest::Digest","value":"Digest","parent":null,"children":[{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314}],"decl_id":null,"docs":" The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\n family of digest functions.","sig":null,"attributes":[{"value":"*\n * The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\n * family of digest functions.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":673530,"byte_end":673667,"line_start":13,"line_end":16,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":673814,"byte_end":673819,"line_start":25,"line_end":25,"column_start":8,"column_end":13},"name":"input","qualname":"::digest::Digest::input","value":"pub fn input(&mut Self, &[u8])","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":" Provide message data.","sig":null,"attributes":[{"value":"*\n     * Provide message data.\n     *\n     * # Arguments\n     *\n     * * input - A vector of message data\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":673691,"byte_end":673806,"line_start":18,"line_end":24,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674073,"byte_end":674079,"line_start":34,"line_end":34,"column_start":8,"column_end":14},"name":"result","qualname":"::digest::Digest::result","value":"pub fn result(&mut Self, &mut [u8])","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":" Retrieve the digest result. This method may be called multiple times.","sig":null,"attributes":[{"value":"*\n     * Retrieve the digest result. This method may be called multiple times.\n     *\n     * # Arguments\n     *\n     * * out - the vector to hold the result. Must be large enough to contain output_bits().\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":673851,"byte_end":674065,"line_start":27,"line_end":33,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674238,"byte_end":674243,"line_start":40,"line_end":40,"column_start":8,"column_end":13},"name":"reset","qualname":"::digest::Digest::reset","value":"pub fn reset(&mut Self)","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":" Reset the digest. This method must be called after result() and before supplying more\n data.","sig":null,"attributes":[{"value":"*\n     * Reset the digest. This method must be called after result() and before supplying more\n     * data.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674113,"byte_end":674230,"line_start":36,"line_end":39,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674316,"byte_end":674327,"line_start":45,"line_end":45,"column_start":8,"column_end":19},"name":"output_bits","qualname":"::digest::Digest::output_bits","value":"pub fn output_bits(&Self) -> usize","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":" Get the output size in bits.","sig":null,"attributes":[{"value":"*\n     * Get the output size in bits.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674261,"byte_end":674308,"line_start":42,"line_end":44,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674406,"byte_end":674418,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"output_bytes","qualname":"::digest::Digest::output_bytes","value":"pub fn output_bytes(&Self) -> usize","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":" Get the output size in bytes.","sig":null,"attributes":[{"value":"*\n     * Get the output size in bytes.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674350,"byte_end":674398,"line_start":47,"line_end":49,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674540,"byte_end":674550,"line_start":57,"line_end":57,"column_start":8,"column_end":18},"name":"block_size","qualname":"::digest::Digest::block_size","value":"pub fn block_size(&Self) -> usize","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":" Get the block size in bytes.","sig":null,"attributes":[{"value":"*\n     * Get the block size in bytes.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674485,"byte_end":674532,"line_start":54,"line_end":56,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674740,"byte_end":674749,"line_start":66,"line_end":66,"column_start":8,"column_end":17},"name":"input_str","qualname":"::digest::Digest::input_str","value":"pub fn input_str(&mut Self, &str)","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":" Convenience function that feeds a string into a digest.","sig":null,"attributes":[{"value":"*\n     * Convenience function that feeds a string into a digest.\n     *\n     * # Arguments\n     *\n     * * `input` The string to feed into the digest\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674573,"byte_end":674732,"line_start":59,"line_end":65,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674952,"byte_end":674962,"line_start":74,"line_end":74,"column_start":8,"column_end":18},"name":"result_str","qualname":"::digest::Digest::result_str","value":"pub fn result_str(&mut Self) -> String","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":" Convenience function that retrieves the result of a digest as a\n String in hexadecimal format.","sig":null,"attributes":[{"value":"*\n     * Convenience function that retrieves the result of a digest as a\n     * String in hexadecimal format.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/digest.rs","byte_start":674825,"byte_end":674944,"line_start":70,"line_end":73,"column_start":5,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1318},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ed25519","qualname":"::ed25519","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs","parent":null,"children":[{"krate":0,"index":1319},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1330},{"krate":0,"index":1333},{"krate":0,"index":1336},{"krate":0,"index":1339},{"krate":0,"index":1342},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1356},{"krate":0,"index":1359},{"krate":0,"index":1362},{"krate":0,"index":1364},{"krate":0,"index":1370},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1385},{"krate":0,"index":1390}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1364},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs","byte_start":675612,"byte_end":675619,"line_start":13,"line_end":13,"column_start":8,"column_end":15},"name":"keypair","qualname":"::ed25519::keypair","value":"pub fn keypair(&[u8]) -> ([u8; ], [u8; ])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1370},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs","byte_start":676300,"byte_end":676309,"line_start":36,"line_end":36,"column_start":8,"column_end":17},"name":"signature","qualname":"::ed25519::signature","value":"pub fn signature(&[u8], &[u8]) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1382},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs","byte_start":678092,"byte_end":678098,"line_start":101,"line_end":101,"column_start":8,"column_end":14},"name":"verify","qualname":"::ed25519::verify","value":"pub fn verify(&[u8], &[u8], &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1385},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ed25519.rs","byte_start":678896,"byte_end":678904,"line_start":132,"line_end":132,"column_start":8,"column_end":16},"name":"exchange","qualname":"::ed25519::exchange","value":"pub fn exchange(&[u8], &[u8]) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1391},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fortuna","qualname":"::fortuna","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","parent":null,"children":[{"krate":0,"index":1392},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1399},{"krate":0,"index":1402},{"krate":0,"index":1405},{"krate":0,"index":1408},{"krate":0,"index":1411},{"krate":0,"index":1414},{"krate":0,"index":1417},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1431},{"krate":0,"index":3135},{"krate":0,"index":3138},{"krate":0,"index":3140},{"krate":0,"index":1441},{"krate":0,"index":1445},{"krate":0,"index":1451},{"krate":0,"index":1455},{"krate":0,"index":1460}],"decl_id":null,"docs":" An implementation of the Fortuna CSPRNG","sig":null,"attributes":[{"value":"*\n * An implementation of the Fortuna CSPRNG\n *\n * First create a `FortunaRng` object using either the `new_unseeded`\n * constructor or `SeedableRng::from_seed`. Additional entropy may be\n * added using the method `add_random_event`, or the underlying RNG\n * maybe reseeded directly by `SeedableRng::reseed`. Note that this is\n * not recommended, since the generator automatically reseeds itself\n * using the data provided by `add_random_events` through an\n * accumulator. The accumulator is part of Fortuna's design and using\n * `SeedableRng::reseed` directly bypasses it.\n *\n * Note that the underlying block cipher is `AesSafe256Encryptor` which\n * is designed to be timing-attack resistant. The speed hit from this\n * is in line with a \"safety first\" API, but be aware of it.\n *\n * Fortuna was originally described in\n *   Practical Cryptography, Niels Ferguson and Bruce Schneier.\n *   John Wiley & Sons, 2003.\n *\n * Comments throughout this file contain references of the form\n * (PC 1.2.3); these refer to sections within this text.\n *\n * # A note on forking\n *\n * Proper behaviour for a CSRNG on a process fork is to reseed itself with\n * the timestamp and new process ID, to ensure that after forking the child\n * process does not share the same RNG state (and therefore the same output)\n * as its parent.\n *\n * However, this appears not to be possible in Rust, due to\n *     https://github.com/rust-lang/rust/issues/16799\n * The reason is that Rust's process management all happens through its\n * stdlib runtime, which explicitly does not support forking, so it provides\n * no mechanism with which to detect forks.\n *\n * What this means is that if you are writing forking code (using `#![no_std]`\n * say) then you need to EXPLICITLY RESEED THE RNG AFTER FORKING.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":687594,"byte_end":689372,"line_start":7,"line_end":45,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":1420},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":689798,"byte_end":689811,"line_start":61,"line_end":61,"column_start":11,"column_end":24},"name":"MIN_POOL_SIZE","qualname":"::fortuna::MIN_POOL_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Length in bytes that the first pool must be before a \"catastrophic\n reseed\" is allowed to happen. (A direct reseed through the\n `SeedableRng` API is not affected by this limit.)\n","sig":null,"attributes":[{"value":"/ Length in bytes that the first pool must be before a \"catastrophic","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":689600,"byte_end":689670,"line_start":58,"line_end":58,"column_start":1,"column_end":71}},{"value":"/ reseed\" is allowed to happen. (A direct reseed through the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":689671,"byte_end":689733,"line_start":59,"line_end":59,"column_start":1,"column_end":63}},{"value":"/ `SeedableRng` API is not affected by this limit.)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":689734,"byte_end":689787,"line_start":60,"line_end":60,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1445},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":693265,"byte_end":693272,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"Fortuna","qualname":"::fortuna::Fortuna","value":"Fortuna {  }","parent":null,"children":[{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450}],"decl_id":null,"docs":" The `Fortuna` CSPRNG (PC 9.5)\n","sig":null,"attributes":[{"value":"/ The `Fortuna` CSPRNG (PC 9.5)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":693220,"byte_end":693253,"line_start":178,"line_end":178,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":693467,"byte_end":693479,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"new_unseeded","qualname":"<Fortuna>::new_unseeded","value":"pub fn new_unseeded() -> Fortuna","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unseeded `Fortuna` (PC 9.5.4)\n","sig":null,"attributes":[{"value":"/ Creates a new unseeded `Fortuna` (PC 9.5.4)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":693408,"byte_end":693455,"line_start":187,"line_end":187,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":693775,"byte_end":693791,"line_start":198,"line_end":198,"column_start":12,"column_end":28},"name":"add_random_event","qualname":"<Fortuna>::add_random_event","value":"pub fn add_random_event(&mut Self, u8, usize, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Adds a random event `e` from source `s` to entropy pool `i` (PC 9.5.6)\n","sig":null,"attributes":[{"value":"/ Adds a random event `e` from source `s` to entropy pool `i` (PC 9.5.6)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":693689,"byte_end":693763,"line_start":197,"line_end":197,"column_start":5,"column_end":79}}]},{"kind":"Mod","id":{"krate":0,"index":1464},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ghash","qualname":"::ghash","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1468},{"krate":0,"index":1471},{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1478},{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1485},{"krate":0,"index":1488},{"krate":0,"index":3141},{"krate":0,"index":3143},{"krate":0,"index":3145},{"krate":0,"index":1491},{"krate":0,"index":1505},{"krate":0,"index":3146},{"krate":0,"index":3154},{"krate":0,"index":1508},{"krate":0,"index":3155},{"krate":0,"index":3163},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1516},{"krate":0,"index":1524},{"krate":0,"index":1528}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3146},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":710197,"byte_end":710202,"line_start":103,"line_end":103,"column_start":12,"column_end":17},"name":"Ghash","qualname":"::ghash::Ghash","value":"Ghash {  }","parent":null,"children":[{"krate":0,"index":3147},{"krate":0,"index":3149},{"krate":0,"index":3150},{"krate":0,"index":3151},{"krate":0,"index":3153}],"decl_id":null,"docs":" A structure representing the state of a GHASH computation\n","sig":null,"attributes":[{"value":"/ A structure representing the state of a GHASH computation","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":710108,"byte_end":710169,"line_start":101,"line_end":101,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3155},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":710495,"byte_end":710505,"line_start":115,"line_end":115,"column_start":12,"column_end":22},"name":"GhashWithC","qualname":"::ghash::GhashWithC","value":"GhashWithC {  }","parent":null,"children":[{"krate":0,"index":3156},{"krate":0,"index":3158},{"krate":0,"index":3159},{"krate":0,"index":3160},{"krate":0,"index":3161}],"decl_id":null,"docs":" A structure representing the state of a GHASH computation, after input for C was provided\n","sig":null,"attributes":[{"value":"/ A structure representing the state of a GHASH computation, after input for C was provided","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":710374,"byte_end":710467,"line_start":113,"line_end":113,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":711768,"byte_end":711771,"line_start":164,"line_end":164,"column_start":12,"column_end":15},"name":"new","qualname":"<Ghash>::new","value":"pub fn new(&[u8]) -> Ghash","parent":null,"children":[],"decl_id":null,"docs":" Creates a new GHASH state, with `h` as the key\n","sig":null,"attributes":[{"value":"/ Creates a new GHASH state, with `h` as the key","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":711692,"byte_end":711742,"line_start":162,"line_end":162,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":711747,"byte_end":711756,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":712499,"byte_end":712506,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"input_a","qualname":"<Ghash>::input_a","value":"pub fn input_a(Self, &[u8]) -> Ghash","parent":null,"children":[],"decl_id":null,"docs":" Feeds data for GHASH's A input\n","sig":null,"attributes":[{"value":"/ Feeds data for GHASH's A input","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":712439,"byte_end":712473,"line_start":190,"line_end":190,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":712478,"byte_end":712487,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":712734,"byte_end":712741,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"name":"input_c","qualname":"<Ghash>::input_c","value":"pub fn input_c(Self, &[u8]) -> GhashWithC","parent":null,"children":[],"decl_id":null,"docs":" Feeds data for GHASH's C input\n","sig":null,"attributes":[{"value":"/ Feeds data for GHASH's C input","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":712674,"byte_end":712708,"line_start":198,"line_end":198,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":712713,"byte_end":712722,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":713212,"byte_end":713218,"line_start":219,"line_end":219,"column_start":12,"column_end":18},"name":"result","qualname":"<Ghash>::result","value":"pub fn result(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the digest result\n","sig":null,"attributes":[{"value":"/ Retrieve the digest result","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":713156,"byte_end":713186,"line_start":217,"line_end":217,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":713191,"byte_end":713200,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":713641,"byte_end":713648,"line_start":237,"line_end":237,"column_start":12,"column_end":19},"name":"input_c","qualname":"<GhashWithC>::input_c","value":"pub fn input_c(Self, &[u8]) -> GhashWithC","parent":null,"children":[],"decl_id":null,"docs":" Feeds data for GHASH's C input\n","sig":null,"attributes":[{"value":"/ Feeds data for GHASH's C input","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":713581,"byte_end":713615,"line_start":235,"line_end":235,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":713620,"byte_end":713629,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":713844,"byte_end":713850,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"result","qualname":"<GhashWithC>::result","value":"pub fn result(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the digest result\n","sig":null,"attributes":[{"value":"/ Retrieve the digest result","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":713788,"byte_end":713818,"line_start":242,"line_end":242,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":713823,"byte_end":713832,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1535},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hc128","qualname":"::hc128","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","parent":null,"children":[{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1540},{"krate":0,"index":1543},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1550},{"krate":0,"index":1553},{"krate":0,"index":1556},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1563},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":3164},{"krate":0,"index":3173},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3164},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":729505,"byte_end":729510,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"Hc128","qualname":"::hc128::Hc128","value":"Hc128 {  }","parent":null,"children":[{"krate":0,"index":3165},{"krate":0,"index":3167},{"krate":0,"index":3169},{"krate":0,"index":3170},{"krate":0,"index":3172}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1575},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":729700,"byte_end":729703,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<Hc128>::new","value":"pub fn new(&[u8], &[u8]) -> Hc128","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1592},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hmac","qualname":"::hmac","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs","parent":null,"children":[{"krate":0,"index":1593},{"krate":0,"index":1596},{"krate":0,"index":1599},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1606},{"krate":0,"index":1609},{"krate":0,"index":1615},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1623}],"decl_id":null,"docs":" This module implements the Hmac function - a Message Authentication Code using a Digest.","sig":null,"attributes":[{"value":"*\n * This module implements the Hmac function - a Message Authentication Code using a Digest.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs","byte_start":739579,"byte_end":739678,"line_start":7,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1609},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs","byte_start":739882,"byte_end":739886,"line_start":20,"line_end":20,"column_start":12,"column_end":16},"name":"Hmac","qualname":"::hmac::Hmac","value":"Hmac {  }","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1614}],"decl_id":null,"docs":" The Hmac struct represents an Hmac function - a Message Authentication Code using a Digest.","sig":null,"attributes":[{"value":"*\n * The Hmac struct represents an Hmac function - a Message Authentication Code using a Digest.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs","byte_start":739768,"byte_end":739870,"line_start":17,"line_end":19,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs","byte_start":741295,"byte_end":741298,"line_start":70,"line_end":70,"column_start":12,"column_end":15},"name":"new","qualname":"<Hmac<D>>::new","value":"pub fn new(D, &[u8]) -> Hmac<D>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Hmac instance.","sig":null,"attributes":[{"value":"*\n     * Create a new Hmac instance.\n     *\n     * # Arguments\n     * * digest - The Digest to use.\n     * * key - The key to use.\n     *\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs","byte_start":741136,"byte_end":741283,"line_start":62,"line_end":69,"column_start":5,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1630},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hkdf","qualname":"::hkdf","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","parent":null,"children":[{"krate":0,"index":1631},{"krate":0,"index":1634},{"krate":0,"index":1637},{"krate":0,"index":1640},{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1648}],"decl_id":null,"docs":" This module implements the HMAC-based Extract-and-Expand Key\n Derivation Function as specified by  https://tools.ietf.org/html/rfc5869.\n","sig":null,"attributes":[{"value":"/ This module implements the HMAC-based Extract-and-Expand Key","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745095,"byte_end":745159,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ Derivation Function as specified by  https://tools.ietf.org/html/rfc5869.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745160,"byte_end":745237,"line_start":8,"line_end":8,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":1646},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745734,"byte_end":745746,"line_start":26,"line_end":26,"column_start":8,"column_end":20},"name":"hkdf_extract","qualname":"::hkdf::hkdf_extract","value":"pub fn hkdf_extract<D: Digest>(D, &[u8], &[u8], &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Execute the HKDF-Extract function.  Applications MUST NOT use this for\n password hashing.","sig":null,"attributes":[{"value":"/ Execute the HKDF-Extract function.  Applications MUST NOT use this for","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745343,"byte_end":745417,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ password hashing.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745418,"byte_end":745439,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745440,"byte_end":745443,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745444,"byte_end":745459,"line_start":20,"line_end":20,"column_start":1,"column_end":16}},{"value":"/ * digest - The digest function to use.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745460,"byte_end":745502,"line_start":21,"line_end":21,"column_start":1,"column_end":43}},{"value":"/ * salt - The optional salt value (a non-secret random value) to use.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745503,"byte_end":745575,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ * ikm - The input keying material to use.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745576,"byte_end":745621,"line_start":23,"line_end":23,"column_start":1,"column_end":46}},{"value":"/ * prk - The output buffer to fill with a digest.output_bytes() length","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745622,"byte_end":745695,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/         pseudo random key.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745696,"byte_end":745726,"line_start":25,"line_end":25,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1648},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":746380,"byte_end":746391,"line_start":44,"line_end":44,"column_start":8,"column_end":19},"name":"hkdf_expand","qualname":"::hkdf::hkdf_expand","value":"pub fn hkdf_expand<D: Digest>(D, &[u8], &[u8], &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Execute the HKDF-Expand function.  Applications MUST NOT use this for\n password hashing.","sig":null,"attributes":[{"value":"/ Execute the HKDF-Expand function.  Applications MUST NOT use this for","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":745994,"byte_end":746067,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ password hashing.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":746068,"byte_end":746089,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":746090,"byte_end":746093,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":746094,"byte_end":746109,"line_start":39,"line_end":39,"column_start":1,"column_end":16}},{"value":"/ * digest - The digest function to use.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":746110,"byte_end":746152,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/ * prk - The pseudorandom key of at least digest.output_bytes() octets.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":746153,"byte_end":746227,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ * info - The optional context and application specific information to use.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":746228,"byte_end":746306,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ * okm - The output buffer to fill with the derived key value.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hkdf.rs","byte_start":746307,"byte_end":746372,"line_start":43,"line_end":43,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":1650},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mac","qualname":"::mac","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","parent":null,"children":[{"krate":0,"index":1651},{"krate":0,"index":1654},{"krate":0,"index":1660},{"krate":0,"index":1662},{"krate":0,"index":1667},{"krate":0,"index":1669}],"decl_id":null,"docs":" The mac module defines the Message Authentication Code (Mac) trait.","sig":null,"attributes":[{"value":"*\n * The mac module defines the Message Authentication Code (Mac) trait.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":754957,"byte_end":755035,"line_start":7,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1654},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755153,"byte_end":755156,"line_start":16,"line_end":16,"column_start":11,"column_end":14},"name":"Mac","qualname":"::mac::Mac","value":"Mac","parent":null,"children":[{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1659}],"decl_id":null,"docs":" The Mac trait defines methods for a Message Authentication function.","sig":null,"attributes":[{"value":"*\n * The Mac trait defines methods for a Message Authentication function.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755063,"byte_end":755142,"line_start":13,"line_end":15,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1655},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755285,"byte_end":755290,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"input","qualname":"::mac::Mac::input","value":"pub fn input(&mut Self, &[u8])","parent":{"krate":0,"index":1654},"children":[],"decl_id":null,"docs":" Process input data.","sig":null,"attributes":[{"value":"*\n     * Process input data.\n     *\n     * # Arguments\n     * * data - The input data to process.\n     *\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755163,"byte_end":755277,"line_start":17,"line_end":23,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1656},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755409,"byte_end":755414,"line_start":29,"line_end":29,"column_start":8,"column_end":13},"name":"reset","qualname":"::mac::Mac::reset","value":"pub fn reset(&mut Self)","parent":{"krate":0,"index":1654},"children":[],"decl_id":null,"docs":" Reset the Mac state to begin processing another input stream.","sig":null,"attributes":[{"value":"*\n     * Reset the Mac state to begin processing another input stream.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755321,"byte_end":755401,"line_start":26,"line_end":28,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1657},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755513,"byte_end":755519,"line_start":34,"line_end":34,"column_start":8,"column_end":14},"name":"result","qualname":"::mac::Mac::result","value":"pub fn result(&mut Self) -> MacResult","parent":{"krate":0,"index":1654},"children":[],"decl_id":null,"docs":" Obtain the result of a Mac computation as a MacResult.","sig":null,"attributes":[{"value":"*\n     * Obtain the result of a Mac computation as a MacResult.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755432,"byte_end":755505,"line_start":31,"line_end":33,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1658},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755814,"byte_end":755824,"line_start":41,"line_end":41,"column_start":8,"column_end":18},"name":"raw_result","qualname":"::mac::Mac::raw_result","value":"pub fn raw_result(&mut Self, &mut [u8])","parent":{"krate":0,"index":1654},"children":[],"decl_id":null,"docs":" Obtain the result of a Mac computation as [u8]. This method should be used very carefully\n since incorrect use of the Mac code could result in permitting a timing attack which defeats\n the security provided by a Mac function.","sig":null,"attributes":[{"value":"*\n     * Obtain the result of a Mac computation as [u8]. This method should be used very carefully\n     * since incorrect use of the Mac code could result in permitting a timing attack which defeats\n     * the security provided by a Mac function.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755550,"byte_end":755806,"line_start":36,"line_end":40,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1659},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755927,"byte_end":755939,"line_start":46,"line_end":46,"column_start":8,"column_end":20},"name":"output_bytes","qualname":"::mac::Mac::output_bytes","value":"pub fn output_bytes(&Self) -> usize","parent":{"krate":0,"index":1654},"children":[],"decl_id":null,"docs":" Get the size of the Mac code, in bytes.","sig":null,"attributes":[{"value":"*\n     * Get the size of the Mac code, in bytes.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755861,"byte_end":755919,"line_start":43,"line_end":45,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1660},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756074,"byte_end":756083,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"MacResult","qualname":"::mac::MacResult","value":"MacResult {  }","parent":null,"children":[{"krate":0,"index":1661}],"decl_id":null,"docs":" A MacResult wraps a Mac code and provides a safe Eq implementation that runs in fixed time.","sig":null,"attributes":[{"value":"*\n * A MacResult wraps a Mac code and provides a safe Eq implementation that runs in fixed time.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":755960,"byte_end":756062,"line_start":49,"line_end":51,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1663},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756182,"byte_end":756185,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<MacResult>::new","value":"pub fn new(&[u8]) -> MacResult","parent":null,"children":[],"decl_id":null,"docs":" Create a new MacResult.","sig":null,"attributes":[{"value":"*\n     * Create a new MacResult.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756128,"byte_end":756170,"line_start":57,"line_end":59,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1664},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756386,"byte_end":756400,"line_start":69,"line_end":69,"column_start":12,"column_end":26},"name":"new_from_owned","qualname":"<MacResult>::new_from_owned","value":"pub fn new_from_owned(Vec<u8>) -> MacResult","parent":null,"children":[],"decl_id":null,"docs":" Create a new MacResult taking ownership of the specified code value.","sig":null,"attributes":[{"value":"*\n     * Create a new MacResult taking ownership of the specified code value.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756287,"byte_end":756374,"line_start":66,"line_end":68,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1665},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756707,"byte_end":756711,"line_start":79,"line_end":79,"column_start":12,"column_end":16},"name":"code","qualname":"<MacResult>::code","value":"pub fn code<'s>(&'s Self) -> &'s [u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the code value. Be very careful using this method, since incorrect use of the code value\n may permit timing attacks which defeat the security provided by the Mac function.","sig":null,"attributes":[{"value":"*\n     * Get the code value. Be very careful using this method, since incorrect use of the code value\n     * may permit timing attacks which defeat the security provided by the Mac function.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756495,"byte_end":756695,"line_start":75,"line_end":78,"column_start":5,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1670},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"md5","qualname":"::md5","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","parent":null,"children":[{"krate":0,"index":1671},{"krate":0,"index":1672},{"krate":0,"index":1675},{"krate":0,"index":1678},{"krate":0,"index":1681},{"krate":0,"index":1684},{"krate":0,"index":1687},{"krate":0,"index":1690},{"krate":0,"index":3174},{"krate":0,"index":3179},{"krate":0,"index":3181},{"krate":0,"index":1693},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":3182},{"krate":0,"index":3187},{"krate":0,"index":3189},{"krate":0,"index":1714},{"krate":0,"index":1716}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3182},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","byte_start":762264,"byte_end":762267,"line_start":156,"line_end":156,"column_start":12,"column_end":15},"name":"Md5","qualname":"::md5::Md5","value":"Md5 {  }","parent":null,"children":[{"krate":0,"index":3183},{"krate":0,"index":3184},{"krate":0,"index":3185},{"krate":0,"index":3186}],"decl_id":null,"docs":" The MD5 Digest algorithm\n","sig":null,"attributes":[{"value":"/ The MD5 Digest algorithm","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","byte_start":762201,"byte_end":762229,"line_start":154,"line_end":154,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1715},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","byte_start":762438,"byte_end":762441,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"new","qualname":"<Md5>::new","value":"pub fn new() -> Md5","parent":null,"children":[],"decl_id":null,"docs":" Construct a new instance of the MD5 Digest.\n","sig":null,"attributes":[{"value":"/ Construct a new instance of the MD5 Digest.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","byte_start":762379,"byte_end":762426,"line_start":164,"line_end":164,"column_start":5,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":1724},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pbkdf2","qualname":"::pbkdf2","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs","parent":null,"children":[{"krate":0,"index":1725},{"krate":0,"index":1728},{"krate":0,"index":1731},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1738},{"krate":0,"index":1741},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1748},{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1755},{"krate":0,"index":1758},{"krate":0,"index":1761},{"krate":0,"index":1764},{"krate":0,"index":1767},{"krate":0,"index":1770},{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1778}],"decl_id":null,"docs":" This module implements the PBKDF2 Key Derivation Function as specified by\n http://tools.ietf.org/html/rfc2898.","sig":null,"attributes":[{"value":"*\n * This module implements the PBKDF2 Key Derivation Function as specified by\n * http://tools.ietf.org/html/rfc2898.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs","byte_start":767032,"byte_end":767155,"line_start":7,"line_end":10,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":1773},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs","byte_start":769527,"byte_end":769533,"line_start":84,"line_end":84,"column_start":8,"column_end":14},"name":"pbkdf2","qualname":"::pbkdf2::pbkdf2","value":"pub fn pbkdf2<M: Mac>(&mut M, &[u8], u32, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Execute the PBKDF2 Key Derivation Function. The Scrypt Key Derivation Function generally provides\n better security, so, applications that do not have a requirement to use PBKDF2 specifically\n should consider using that function instead.","sig":null,"attributes":[{"value":"*\n * Execute the PBKDF2 Key Derivation Function. The Scrypt Key Derivation Function generally provides\n * better security, so, applications that do not have a requirement to use PBKDF2 specifically\n * should consider using that function instead.\n *\n * # Arguments\n * * mac - The Pseudo Random Function to use.\n * * salt - The salt value to use.\n * * c - The iteration count. Users should carefully determine this value as it is the primary\n *       factor in determining the security of the derived key.\n * * output - The output buffer to fill with the derived key value.\n *\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs","byte_start":768939,"byte_end":769519,"line_start":71,"line_end":83,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":1775},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs","byte_start":771419,"byte_end":771432,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"pbkdf2_simple","qualname":"::pbkdf2::pbkdf2_simple","value":"pub fn pbkdf2_simple(&str, u32) -> io::Result<String>","parent":null,"children":[],"decl_id":null,"docs":" pbkdf2_simple is a helper function that should be sufficient for the majority of cases where\n an application needs to use PBKDF2 to hash a password for storage. The result is a String that\n contains the parameters used as part of its encoding. The pbkdf2_check function may be used on\n a password to check if it is equal to a hashed value.","sig":null,"attributes":[{"value":"*\n * pbkdf2_simple is a helper function that should be sufficient for the majority of cases where\n * an application needs to use PBKDF2 to hash a password for storage. The result is a String that\n * contains the parameters used as part of its encoding. The pbkdf2_check function may be used on\n * a password to check if it is equal to a hashed value.\n *\n * # Format\n *\n * The format of the output is a modified version of the Modular Crypt Format that encodes algorithm\n * used and iteration count. The format is indicated as \"rpbkdf2\" which is short for \"Rust PBKF2\n * format.\"\n *\n * $rpbkdf2$0$<base64(c)>$<base64(salt)>$<based64(hash)>$\n *\n * # Arguments\n *\n * * password - The password to process as a str\n * * c - The iteration count\n *\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs","byte_start":770664,"byte_end":771411,"line_start":112,"line_end":131,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":1778},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs","byte_start":772482,"byte_end":772494,"line_start":168,"line_end":168,"column_start":8,"column_end":20},"name":"pbkdf2_check","qualname":"::pbkdf2::pbkdf2_check","value":"pub fn pbkdf2_check(&str, &str) -> Result<bool, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" pbkdf2_check compares a password against the result of a previous call to pbkdf2_simple and\n returns true if the passed in password hashes to the same value.","sig":null,"attributes":[{"value":"*\n * pbkdf2_check compares a password against the result of a previous call to pbkdf2_simple and\n * returns true if the passed in password hashes to the same value.\n *\n * # Arguments\n *\n * * password - The password to process as a str\n * * hashed_value - A string representing a hashed password returned by pbkdf2_simple()\n *\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/pbkdf2.rs","byte_start":772143,"byte_end":772474,"line_start":158,"line_end":167,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1780},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"poly1305","qualname":"::poly1305","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs","parent":null,"children":[{"krate":0,"index":1781},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1795},{"krate":0,"index":3190},{"krate":0,"index":3201},{"krate":0,"index":3207},{"krate":0,"index":1798},{"krate":0,"index":1806}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3190},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs","byte_start":779061,"byte_end":779069,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"Poly1305","qualname":"::poly1305::Poly1305","value":"Poly1305 {  }","parent":null,"children":[{"krate":0,"index":3191},{"krate":0,"index":3193},{"krate":0,"index":3195},{"krate":0,"index":3197},{"krate":0,"index":3198},{"krate":0,"index":3200}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1799},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs","byte_start":779251,"byte_end":779254,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Poly1305>::new","value":"pub fn new(&[u8]) -> Poly1305","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1814},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rc4","qualname":"::rc4","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","parent":null,"children":[{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1819},{"krate":0,"index":1822},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1829},{"krate":0,"index":1832},{"krate":0,"index":1835},{"krate":0,"index":1838},{"krate":0,"index":3208},{"krate":0,"index":3213},{"krate":0,"index":1841},{"krate":0,"index":1843},{"krate":0,"index":1847},{"krate":0,"index":1849},{"krate":0,"index":1851}],"decl_id":null,"docs":" An implementation of the RC4 (also sometimes called ARC4) stream cipher. THIS IMPLEMENTATION IS\n NOT A FIXED TIME IMPLEMENTATION.","sig":null,"attributes":[{"value":"*\n * An implementation of the RC4 (also sometimes called ARC4) stream cipher. THIS IMPLEMENTATION IS\n * NOT A FIXED TIME IMPLEMENTATION.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":792145,"byte_end":792287,"line_start":7,"line_end":10,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3208},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":792501,"byte_end":792504,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"Rc4","qualname":"::rc4::Rc4","value":"Rc4 {  }","parent":null,"children":[{"krate":0,"index":3209},{"krate":0,"index":3210},{"krate":0,"index":3211}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":792632,"byte_end":792635,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Rc4>::new","value":"pub fn new(&[u8]) -> Rc4","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1853},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ripemd160","qualname":"::ripemd160","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs","parent":null,"children":[{"krate":0,"index":1854},{"krate":0,"index":1855},{"krate":0,"index":1858},{"krate":0,"index":1861},{"krate":0,"index":1864},{"krate":0,"index":1867},{"krate":0,"index":1870},{"krate":0,"index":1873},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":3214},{"krate":0,"index":3220},{"krate":0,"index":3223},{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":1880},{"krate":0,"index":1881},{"krate":0,"index":1884},{"krate":0,"index":1887}],"decl_id":null,"docs":" An implementation of the RIPEMD-160 cryptographic hash.","sig":null,"attributes":[{"value":"*\n * An implementation of the RIPEMD-160 cryptographic hash.\n *\n * First create a `Ripemd160` object using the `Ripemd160` constructor,\n * then feed it input using the `input` or `input_str` methods, which\n * may be called any number of times.\n *\n * After the entire input has been fed to the hash read the result using\n * the `result` or `result_str` methods.\n *\n * The `Ripemd160` object may be reused to create multiple hashes by\n * calling the `reset` method.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs","byte_start":796841,"byte_end":797310,"line_start":11,"line_end":23,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3214},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs","byte_start":797641,"byte_end":797650,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"Ripemd160","qualname":"::ripemd160::Ripemd160","value":"Ripemd160 {  }","parent":null,"children":[{"krate":0,"index":3215},{"krate":0,"index":3217},{"krate":0,"index":3218},{"krate":0,"index":3219}],"decl_id":null,"docs":" Structure representing the state of a Ripemd160 computation\n","sig":null,"attributes":[{"value":"/ Structure representing the state of a Ripemd160 computation","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs","byte_start":797543,"byte_end":797606,"line_start":34,"line_end":34,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs","byte_start":814819,"byte_end":814822,"line_start":335,"line_end":335,"column_start":12,"column_end":15},"name":"new","qualname":"<Ripemd160>::new","value":"pub fn new() -> Ripemd160","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1895},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"salsa20","qualname":"::salsa20","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","parent":null,"children":[{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1900},{"krate":0,"index":1903},{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1910},{"krate":0,"index":1913},{"krate":0,"index":1916},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1923},{"krate":0,"index":1926},{"krate":0,"index":1929},{"krate":0,"index":1932},{"krate":0,"index":1933},{"krate":0,"index":1935},{"krate":0,"index":3224},{"krate":0,"index":3229},{"krate":0,"index":3231},{"krate":0,"index":3232},{"krate":0,"index":3237},{"krate":0,"index":1938},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":1959},{"krate":0,"index":1961},{"krate":0,"index":1963},{"krate":0,"index":1965}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3232},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":822407,"byte_end":822414,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"Salsa20","qualname":"::salsa20::Salsa20","value":"Salsa20 {  }","parent":null,"children":[{"krate":0,"index":3233},{"krate":0,"index":3234},{"krate":0,"index":3236}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1951},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":824185,"byte_end":824188,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<Salsa20>::new","value":"pub fn new(&[u8], &[u8]) -> Salsa20","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1953},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":824418,"byte_end":824430,"line_start":89,"line_end":89,"column_start":12,"column_end":24},"name":"new_xsalsa20","qualname":"<Salsa20>::new_xsalsa20","value":"pub fn new_xsalsa20(&[u8], &[u8]) -> Salsa20","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1965},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":829751,"byte_end":829759,"line_start":248,"line_end":248,"column_start":8,"column_end":16},"name":"hsalsa20","qualname":"::salsa20::hsalsa20","value":"pub fn hsalsa20(&[u8], &[u8], &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1967},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scrypt","qualname":"::scrypt","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","parent":null,"children":[{"krate":0,"index":1968},{"krate":0,"index":1971},{"krate":0,"index":1974},{"krate":0,"index":1977},{"krate":0,"index":1980},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1987},{"krate":0,"index":1990},{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1997},{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2004},{"krate":0,"index":2007},{"krate":0,"index":2010},{"krate":0,"index":2013},{"krate":0,"index":2016},{"krate":0,"index":2019},{"krate":0,"index":2022},{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":2029},{"krate":0,"index":3238},{"krate":0,"index":3242},{"krate":0,"index":3244},{"krate":0,"index":2031},{"krate":0,"index":2033},{"krate":0,"index":2034},{"krate":0,"index":2038}],"decl_id":null,"docs":" This module implements the Scrypt key derivation function as specified in [1].","sig":null,"attributes":[{"value":"*\n * This module implements the Scrypt key derivation function as specified in [1].\n *\n * # References\n * [1] - C. Percival. Stronger Key Derivation Via Sequential Memory-Hard Functions.\n *       http://www.tarsnap.com/scrypt/scrypt.pdf\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":836157,"byte_end":836399,"line_start":7,"line_end":13,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3238},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":840206,"byte_end":840218,"line_start":146,"line_end":146,"column_start":12,"column_end":24},"name":"ScryptParams","qualname":"::scrypt::ScryptParams","value":"ScryptParams {  }","parent":null,"children":[{"krate":0,"index":3239},{"krate":0,"index":3240},{"krate":0,"index":3241}],"decl_id":null,"docs":" The Scrypt parameter values.","sig":null,"attributes":[{"value":"*\n * The Scrypt parameter values.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":840132,"byte_end":840171,"line_start":142,"line_end":144,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2032},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":840519,"byte_end":840522,"line_start":163,"line_end":163,"column_start":12,"column_end":15},"name":"new","qualname":"<ScryptParams>::new","value":"pub fn new(u8, u32, u32) -> ScryptParams","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of ScryptParams.","sig":null,"attributes":[{"value":"*\n     * Create a new instance of ScryptParams.\n     *\n     * # Arguments\n     *\n     * * log_n - The log2 of the Scrypt parameter N\n     * * r - The Scrypt parameter r\n     * * p - The Scrypt parameter p\n     *\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":840286,"byte_end":840507,"line_start":153,"line_end":162,"column_start":5,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2033},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":842315,"byte_end":842321,"line_start":223,"line_end":223,"column_start":8,"column_end":14},"name":"scrypt","qualname":"::scrypt::scrypt","value":"pub fn scrypt(&[u8], &[u8], &ScryptParams, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" The scrypt key derivation function.","sig":null,"attributes":[{"value":"*\n * The scrypt key derivation function.\n *\n * # Arguments\n *\n * * password - The password to process as a byte vector\n * * salt - The salt value to use as a byte vector\n * * params - The ScryptParams to use\n * * output - The resulting derived key is returned in this byte vector.\n *\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":842018,"byte_end":842307,"line_start":212,"line_end":222,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":2034},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":844281,"byte_end":844294,"line_start":272,"line_end":272,"column_start":8,"column_end":21},"name":"scrypt_simple","qualname":"::scrypt::scrypt_simple","value":"pub fn scrypt_simple(&str, &ScryptParams) -> io::Result<String>","parent":null,"children":[],"decl_id":null,"docs":" scrypt_simple is a helper function that should be sufficient for the majority of cases where\n an application needs to use Scrypt to hash a password for storage. The result is a String that\n contains the parameters used as part of its encoding. The scrypt_check function may be used on\n a password to check if it is equal to a hashed value.","sig":null,"attributes":[{"value":"*\n * scrypt_simple is a helper function that should be sufficient for the majority of cases where\n * an application needs to use Scrypt to hash a password for storage. The result is a String that\n * contains the parameters used as part of its encoding. The scrypt_check function may be used on\n * a password to check if it is equal to a hashed value.\n *\n * # Format\n *\n * The format of the output is a modified version of the Modular Crypt Format that encodes algorithm\n * used and the parameter values. If all parameter values can each fit within a single byte, a\n * compact format is used (format 0). However, if any value cannot, an expanded format where the r\n * and p parameters are encoded using 4 bytes (format 1) is used. Both formats use a 128-bit salt\n * and a 256-bit hash. The format is indicated as \"rscrypt\" which is short for \"Rust Scrypt format.\"\n *\n * $rscrypt$<format>$<base64(log_n,r,p)>$<base64(salt)>$<based64(hash)>$\n *\n * # Arguments\n *\n * * password - The password to process as a str\n * * params - The ScryptParams to use\n *\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":843218,"byte_end":844273,"line_start":250,"line_end":271,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":2038},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":845711,"byte_end":845723,"line_start":318,"line_end":318,"column_start":8,"column_end":20},"name":"scrypt_check","qualname":"::scrypt::scrypt_check","value":"pub fn scrypt_check(&str, &str) -> Result<bool, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" scrypt_check compares a password against the result of a previous call to scrypt_simple and\n returns true if the passed in password hashes to the same value.","sig":null,"attributes":[{"value":"*\n * scrypt_check compares a password against the result of a previous call to scrypt_simple and\n * returns true if the passed in password hashes to the same value.\n *\n * # Arguments\n *\n * * password - The password to process as a str\n * * hashed_value - A string representing a hashed password returned by scrypt_simple()\n *\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":845372,"byte_end":845703,"line_start":308,"line_end":317,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":2041},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sha1","qualname":"::sha1","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","parent":null,"children":[{"krate":0,"index":2042},{"krate":0,"index":2045},{"krate":0,"index":2046},{"krate":0,"index":2049},{"krate":0,"index":2052},{"krate":0,"index":2055},{"krate":0,"index":2058},{"krate":0,"index":2061},{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2088},{"krate":0,"index":2090},{"krate":0,"index":2095},{"krate":0,"index":2098},{"krate":0,"index":2100},{"krate":0,"index":3245},{"krate":0,"index":3251},{"krate":0,"index":3254},{"krate":0,"index":2102},{"krate":0,"index":2105}],"decl_id":null,"docs":"An implementation of the SHA-1 cryptographic hash algorithm.","sig":null,"attributes":[{"value":"*\nAn implementation of the SHA-1 cryptographic hash algorithm.\n\nTo use this module, first create a `Sha1` object using the `Sha1` constructor,\nthen feed it an input message using the `input` or `input_str` methods,\nwhich may be called any number of times; they will buffer the input until\nthere is enough to call the block algorithm.\n\nAfter the entire input has been fed to the hash read the result using\nthe `result` or `result_str` methods. The first will return bytes, and\nthe second will return a `String` object of the same bytes represented\nin hexadecimal form.\n\nThe `Sha1` object may be reused to create multiple hashes by calling\nthe `reset()` method. These traits are implemented by all hash digest\nalgorithms that implement the `Digest` trait. An example of use is:\n\n```rust\nuse self::crypto::digest::Digest;\nuse self::crypto::sha1::Sha1;\n\n// create a Sha1 object\nlet mut hasher = Sha1::new();\n\n// write input message\nhasher.input_str(\"hello world\");\n\n// read hash digest\nlet hex = hasher.result_str();\n\nassert_eq!(hex, \"2aae6c35c94fcfb415dbe95f408b9ce91ee846ed\");\n```\n\n# Mathematics\n\nThe mathematics of the SHA-1 algorithm are quite interesting. In its\ndefinition, The SHA-1 algorithm uses:\n\n* 1 binary operation on bit-arrays:\n  * \"exclusive or\" (XOR)\n* 2 binary operations on integers:\n  * \"addition\" (ADD)\n  * \"rotate left\" (ROL)\n* 3 ternary operations on bit-arrays:\n  * \"choose\" (CH)\n  * \"parity\" (PAR)\n  * \"majority\" (MAJ)\n\nSome of these functions are commonly found in all hash digest\nalgorithms, but some, like \"parity\" is only found in SHA-1.\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":853717,"byte_end":855285,"line_start":11,"line_end":61,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":2073},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":855697,"byte_end":855707,"line_start":77,"line_end":77,"column_start":8,"column_end":18},"name":"sha1_first","qualname":"::sha1::sha1_first","value":"pub fn sha1_first(u32x4) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Not an intrinsic, but gets the first element of a vector.\n","sig":null,"attributes":[{"value":"/ Not an intrinsic, but gets the first element of a vector.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":855618,"byte_end":855679,"line_start":75,"line_end":75,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":855680,"byte_end":855689,"line_start":76,"line_end":76,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2074},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":855829,"byte_end":855843,"line_start":83,"line_end":83,"column_start":8,"column_end":22},"name":"sha1_first_add","qualname":"::sha1::sha1_first_add","value":"pub fn sha1_first_add(u32, u32x4) -> u32x4","parent":null,"children":[],"decl_id":null,"docs":" Not an intrinsic, but adds a word to the first element of a vector.\n","sig":null,"attributes":[{"value":"/ Not an intrinsic, but adds a word to the first element of a vector.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":855740,"byte_end":855811,"line_start":81,"line_end":81,"column_start":1,"column_end":72}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":855812,"byte_end":855821,"line_start":82,"line_end":82,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2077},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":856552,"byte_end":856568,"line_start":109,"line_end":109,"column_start":8,"column_end":24},"name":"sha1_schedule_x4","qualname":"::sha1::sha1_schedule_x4","value":"pub fn sha1_schedule_x4(u32x4, u32x4, u32x4, u32x4) -> u32x4","parent":null,"children":[],"decl_id":null,"docs":" Performs 4 rounds of the message schedule update.\n","sig":null,"attributes":[{"value":"/ Performs 4 rounds of the message schedule update.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":856491,"byte_end":856544,"line_start":108,"line_end":108,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":2078},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":856729,"byte_end":856744,"line_start":115,"line_end":115,"column_start":8,"column_end":23},"name":"sha1_first_half","qualname":"::sha1::sha1_first_half","value":"pub fn sha1_first_half(u32x4, u32x4) -> u32x4","parent":null,"children":[],"decl_id":null,"docs":" Emulates `llvm.x86.sha1nexte` intrinsic.\n","sig":null,"attributes":[{"value":"/ Emulates `llvm.x86.sha1nexte` intrinsic.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":856667,"byte_end":856711,"line_start":113,"line_end":113,"column_start":1,"column_end":45}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":856712,"byte_end":856721,"line_start":114,"line_end":114,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2079},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":856945,"byte_end":856965,"line_start":121,"line_end":121,"column_start":8,"column_end":28},"name":"sha1_digest_round_x4","qualname":"::sha1::sha1_digest_round_x4","value":"pub fn sha1_digest_round_x4(u32x4, u32x4, i8) -> u32x4","parent":null,"children":[],"decl_id":null,"docs":" Emulates `llvm.x86.sha1rnds4` intrinsic.\n Performs 4 rounds of the message block digest.\n","sig":null,"attributes":[{"value":"/ Emulates `llvm.x86.sha1rnds4` intrinsic.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":856842,"byte_end":856886,"line_start":119,"line_end":119,"column_start":1,"column_end":45}},{"value":"/ Performs 4 rounds of the message block digest.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":856887,"byte_end":856937,"line_start":120,"line_end":120,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":2090},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":860109,"byte_end":860130,"line_start":212,"line_end":212,"column_start":8,"column_end":29},"name":"sha1_digest_block_u32","qualname":"::sha1::sha1_digest_block_u32","value":"pub fn sha1_digest_block_u32(&mut [u32; ], &[u32; ])","parent":null,"children":[],"decl_id":null,"docs":" Process a block with the SHA-1 algorithm.\n","sig":null,"attributes":[{"value":"/ Process a block with the SHA-1 algorithm.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":860056,"byte_end":860101,"line_start":211,"line_end":211,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2095},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864879,"byte_end":864896,"line_start":348,"line_end":348,"column_start":8,"column_end":25},"name":"sha1_digest_block","qualname":"::sha1::sha1_digest_block","value":"pub fn sha1_digest_block(&mut [u32; ], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Process a block with the SHA-1 algorithm. (See more...)","sig":null,"attributes":[{"value":"/ Process a block with the SHA-1 algorithm. (See more...)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":862843,"byte_end":862902,"line_start":300,"line_end":300,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":862903,"byte_end":862906,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ SHA-1 is a cryptographic hash function, and as such, it operates","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":862907,"byte_end":862975,"line_start":302,"line_end":302,"column_start":1,"column_end":69}},{"value":"/ on an arbitrary number of bytes. This function operates on a fixed","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":862976,"byte_end":863046,"line_start":303,"line_end":303,"column_start":1,"column_end":71}},{"value":"/ number of bytes. If you call this function with anything other than","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863047,"byte_end":863118,"line_start":304,"line_end":304,"column_start":1,"column_end":72}},{"value":"/ 64 bytes, then it will panic! This function takes two arguments:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863119,"byte_end":863187,"line_start":305,"line_end":305,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863188,"byte_end":863191,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ * `state` is reference to an **array** of 5 words.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863192,"byte_end":863246,"line_start":307,"line_end":307,"column_start":1,"column_end":55}},{"value":"/ * `block` is reference to a **slice** of 64 bytes.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863247,"byte_end":863301,"line_start":308,"line_end":308,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863302,"byte_end":863305,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ If you want the function that performs a message digest on an arbitrary","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863306,"byte_end":863381,"line_start":310,"line_end":310,"column_start":1,"column_end":76}},{"value":"/ number of bytes, then see also the `Sha1` struct above.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863382,"byte_end":863441,"line_start":311,"line_end":311,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863442,"byte_end":863445,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ # Implementation","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863446,"byte_end":863466,"line_start":313,"line_end":313,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863467,"byte_end":863470,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ First, some background. Both ARM and Intel are releasing documentation","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863471,"byte_end":863545,"line_start":315,"line_end":315,"column_start":1,"column_end":75}},{"value":"/ that they plan to include instruction set extensions for SHA1 and SHA256","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863546,"byte_end":863622,"line_start":316,"line_end":316,"column_start":1,"column_end":77}},{"value":"/ sometime in the near future. Second, LLVM won't lower these intrinsics yet,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863623,"byte_end":863702,"line_start":317,"line_end":317,"column_start":1,"column_end":80}},{"value":"/ so these functions were written emulate these instructions. Finally,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863703,"byte_end":863775,"line_start":318,"line_end":318,"column_start":1,"column_end":73}},{"value":"/ the block function implemented with these emulated intrinsics turned out","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863776,"byte_end":863852,"line_start":319,"line_end":319,"column_start":1,"column_end":77}},{"value":"/ to be quite fast! What follows is a discussion of this CPU-level view","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863853,"byte_end":863926,"line_start":320,"line_end":320,"column_start":1,"column_end":74}},{"value":"/ of the SHA-1 algorithm and how it relates to the mathematical definition.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":863927,"byte_end":864004,"line_start":321,"line_end":321,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864005,"byte_end":864008,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ The SHA instruction set extensions can be divided up into two categories:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864009,"byte_end":864086,"line_start":323,"line_end":323,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864087,"byte_end":864090,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ * message work schedule update calculation (\"schedule\" v., \"work\" n.)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864091,"byte_end":864164,"line_start":325,"line_end":325,"column_start":1,"column_end":74}},{"value":"/ * message block 80-round digest calculation (\"digest\" v., \"block\" n.)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864165,"byte_end":864238,"line_start":326,"line_end":326,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864239,"byte_end":864242,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ The schedule-related functions can be used to easily perform 4 rounds","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864243,"byte_end":864316,"line_start":328,"line_end":328,"column_start":1,"column_end":74}},{"value":"/ of the message work schedule update calculation, as shown below:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864317,"byte_end":864385,"line_start":329,"line_end":329,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864386,"byte_end":864389,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864390,"byte_end":864403,"line_start":331,"line_end":331,"column_start":1,"column_end":14}},{"value":"/ macro_rules! schedule_x4 {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864404,"byte_end":864434,"line_start":332,"line_end":332,"column_start":1,"column_end":31}},{"value":"/     ($v0:expr, $v1:expr, $v2:expr, $v3:expr) => (","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864435,"byte_end":864488,"line_start":333,"line_end":333,"column_start":1,"column_end":54}},{"value":"/         sha1msg2(sha1msg1($v0, $v1) ^ $v2, $v3)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864489,"byte_end":864540,"line_start":334,"line_end":334,"column_start":1,"column_end":52}},{"value":"/     )","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864541,"byte_end":864550,"line_start":335,"line_end":335,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864551,"byte_end":864556,"line_start":336,"line_end":336,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864557,"byte_end":864560,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ macro_rules! round_x4 {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864561,"byte_end":864588,"line_start":338,"line_end":338,"column_start":1,"column_end":28}},{"value":"/     ($h0:ident, $h1:ident, $wk:expr, $i:expr) => (","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864589,"byte_end":864643,"line_start":339,"line_end":339,"column_start":1,"column_end":55}},{"value":"/         sha1rnds4($h0, sha1_first_half($h1, $wk), $i)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864644,"byte_end":864701,"line_start":340,"line_end":340,"column_start":1,"column_end":58}},{"value":"/     )","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864702,"byte_end":864711,"line_start":341,"line_end":341,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864712,"byte_end":864717,"line_start":342,"line_end":342,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864718,"byte_end":864725,"line_start":343,"line_end":343,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864726,"byte_end":864729,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ and also shown above is how the digest-related functions can be used to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864730,"byte_end":864805,"line_start":345,"line_end":345,"column_start":1,"column_end":76}},{"value":"/ perform 4 rounds of the message block digest calculation.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864806,"byte_end":864867,"line_start":346,"line_end":346,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":864868,"byte_end":864871,"line_start":347,"line_end":347,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3245},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":866155,"byte_end":866159,"line_start":383,"line_end":383,"column_start":12,"column_end":16},"name":"Sha1","qualname":"::sha1::Sha1","value":"Sha1 {  }","parent":null,"children":[{"krate":0,"index":3246},{"krate":0,"index":3248},{"krate":0,"index":3249},{"krate":0,"index":3250}],"decl_id":null,"docs":" Structure representing the state of a Sha1 computation\n","sig":null,"attributes":[{"value":"/ Structure representing the state of a Sha1 computation","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":866062,"byte_end":866120,"line_start":381,"line_end":381,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2103},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":866315,"byte_end":866318,"line_start":392,"line_end":392,"column_start":12,"column_end":15},"name":"new","qualname":"<Sha1>::new","value":"pub fn new() -> Sha1","parent":null,"children":[],"decl_id":null,"docs":" Construct a `sha` object\n","sig":null,"attributes":[{"value":"/ Construct a `sha` object","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":866275,"byte_end":866303,"line_start":391,"line_end":391,"column_start":5,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":2111},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sha2","qualname":"::sha2","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","parent":null,"children":[{"krate":0,"index":2112},{"krate":0,"index":2115},{"krate":0,"index":2116},{"krate":0,"index":2119},{"krate":0,"index":2122},{"krate":0,"index":2125},{"krate":0,"index":2128},{"krate":0,"index":2131},{"krate":0,"index":2134},{"krate":0,"index":2137},{"krate":0,"index":2140},{"krate":0,"index":2143},{"krate":0,"index":2146},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2157},{"krate":0,"index":2159},{"krate":0,"index":2161},{"krate":0,"index":2162},{"krate":0,"index":2167},{"krate":0,"index":2172},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2179},{"krate":0,"index":2184},{"krate":0,"index":2189},{"krate":0,"index":3255},{"krate":0,"index":3258},{"krate":0,"index":3259},{"krate":0,"index":2192},{"krate":0,"index":2198},{"krate":0,"index":2200},{"krate":0,"index":3262},{"krate":0,"index":3267},{"krate":0,"index":3268},{"krate":0,"index":2202},{"krate":0,"index":3270},{"krate":0,"index":3272},{"krate":0,"index":3273},{"krate":0,"index":2211},{"krate":0,"index":2213},{"krate":0,"index":2219},{"krate":0,"index":3275},{"krate":0,"index":3277},{"krate":0,"index":3278},{"krate":0,"index":2221},{"krate":0,"index":2223},{"krate":0,"index":2229},{"krate":0,"index":3280},{"krate":0,"index":3282},{"krate":0,"index":3284},{"krate":0,"index":2231},{"krate":0,"index":2233},{"krate":0,"index":2239},{"krate":0,"index":3285},{"krate":0,"index":3287},{"krate":0,"index":3289},{"krate":0,"index":2241},{"krate":0,"index":2243},{"krate":0,"index":2249},{"krate":0,"index":3290},{"krate":0,"index":3293},{"krate":0,"index":3296},{"krate":0,"index":2251},{"krate":0,"index":2257},{"krate":0,"index":2259},{"krate":0,"index":3297},{"krate":0,"index":3302},{"krate":0,"index":3304},{"krate":0,"index":2261},{"krate":0,"index":3305},{"krate":0,"index":3307},{"krate":0,"index":3309},{"krate":0,"index":2270},{"krate":0,"index":2272},{"krate":0,"index":2278},{"krate":0,"index":3310},{"krate":0,"index":3312},{"krate":0,"index":3314},{"krate":0,"index":2280},{"krate":0,"index":2282},{"krate":0,"index":2288}],"decl_id":null,"docs":"An implementation of the SHA-2 cryptographic hash algorithms.","sig":null,"attributes":[{"value":"*\nAn implementation of the SHA-2 cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard:\n\n * `Sha224`, which is the 32-bit `Sha256` algorithm with the result truncated to 224 bits.\n * `Sha256`, which is the 32-bit `Sha256` algorithm.\n * `Sha384`, which is the 64-bit `Sha512` algorithm with the result truncated to 384 bits.\n * `Sha512`, which is the 64-bit `Sha512` algorithm.\n * `Sha512Trunc224`, which is the 64-bit `Sha512` algorithm with the result truncated to 224 bits.\n * `Sha512Trunc256`, which is the 64-bit `Sha512` algorithm with the result truncated to 256 bits.\n\nAlgorithmically, there are only 2 core algorithms: `Sha256` and `Sha512`.\nAll other algorithms are just applications of these with different initial hash\nvalues, and truncated to different digest bit lengths.\n\n# Usage\n\nAn example of using `Sha256` is:\n\n```rust\nuse self::crypto::digest::Digest;\nuse self::crypto::sha2::Sha256;\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.input_str(\"hello world\");\n\n// read hash digest\nlet hex = hasher.result_str();\n\nassert_eq!(hex,\n           concat!(\"b94d27b9934d3e08a52e52d7da7dabfa\",\n                   \"c484efe37a5380ee9088f7ace2efcde9\"));\n```\n\nAn example of using `Sha512` is:\n\n```rust\nuse self::crypto::digest::Digest;\nuse self::crypto::sha2::Sha512;\n\n// create a Sha512 object\nlet mut hasher = Sha512::new();\n\n// write input message\nhasher.input_str(\"hello world\");\n\n// read hash digest\nlet hex = hasher.result_str();\n\nassert_eq!(hex,\n           concat!(\"309ecc489c12d6eb4cc40f50c902f2b4\",\n                   \"d0ed77ee511a7c7a9bcd3ca86d4cd86f\",\n                   \"989dd35bc5ff499670da34255b45b0cf\",\n                   \"d830e81f605dcf7dc5542e93ae9cd76f\"));\n```\n\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":872356,"byte_end":874128,"line_start":11,"line_end":71,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":2161},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":875742,"byte_end":875760,"line_start":131,"line_end":131,"column_start":8,"column_end":26},"name":"sha256_schedule_x4","qualname":"::sha2::sha256_schedule_x4","value":"pub fn sha256_schedule_x4(u32x4, u32x4, u32x4, u32x4) -> u32x4","parent":null,"children":[],"decl_id":null,"docs":" Performs 4 rounds of the SHA-256 message schedule update.\n","sig":null,"attributes":[{"value":"/ Performs 4 rounds of the SHA-256 message schedule update.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":875673,"byte_end":875734,"line_start":130,"line_end":130,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":2162},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":875945,"byte_end":875967,"line_start":137,"line_end":137,"column_start":8,"column_end":30},"name":"sha256_digest_round_x2","qualname":"::sha2::sha256_digest_round_x2","value":"pub fn sha256_digest_round_x2(u32x4, u32x4, u32x4) -> u32x4","parent":null,"children":[],"decl_id":null,"docs":" Emulates `llvm.x86.sha256rnds2` intrinsic.\n","sig":null,"attributes":[{"value":"/ Emulates `llvm.x86.sha256rnds2` intrinsic.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":875879,"byte_end":875925,"line_start":135,"line_end":135,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":2167},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":877355,"byte_end":877378,"line_start":174,"line_end":174,"column_start":8,"column_end":31},"name":"sha256_digest_block_u32","qualname":"::sha2::sha256_digest_block_u32","value":"pub fn sha256_digest_block_u32(&mut [u32; ], &[u32; ])","parent":null,"children":[],"decl_id":null,"docs":" Process a block with the SHA-256 algorithm.\n","sig":null,"attributes":[{"value":"/ Process a block with the SHA-256 algorithm.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":877300,"byte_end":877347,"line_start":173,"line_end":173,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":2172},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":883247,"byte_end":883266,"line_start":351,"line_end":351,"column_start":8,"column_end":27},"name":"sha256_digest_block","qualname":"::sha2::sha256_digest_block","value":"pub fn sha256_digest_block(&mut [u32; ], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Process a block with the SHA-256 algorithm. (See more...)","sig":null,"attributes":[{"value":"/ Process a block with the SHA-256 algorithm. (See more...)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880169,"byte_end":880230,"line_start":260,"line_end":260,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880231,"byte_end":880234,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ Internally, this uses functions which resemble the new Intel SHA instruction sets,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880235,"byte_end":880321,"line_start":262,"line_end":262,"column_start":1,"column_end":87}},{"value":"/ and so it's data locality properties may improve performance. However, to benefit","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880322,"byte_end":880407,"line_start":263,"line_end":263,"column_start":1,"column_end":86}},{"value":"/ the most from this implementation, replace these functions with x86 intrinsics to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880408,"byte_end":880493,"line_start":264,"line_end":264,"column_start":1,"column_end":86}},{"value":"/ get a possible speed boost.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880494,"byte_end":880525,"line_start":265,"line_end":265,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880526,"byte_end":880529,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ # Implementation","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880530,"byte_end":880550,"line_start":267,"line_end":267,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880551,"byte_end":880554,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ The `Sha256` algorithm is implemented with functions that resemble the new","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880555,"byte_end":880633,"line_start":269,"line_end":269,"column_start":1,"column_end":79}},{"value":"/ Intel SHA instruction set extensions. These intructions fall into two categories:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880634,"byte_end":880719,"line_start":270,"line_end":270,"column_start":1,"column_end":86}},{"value":"/ message schedule calculation, and the message block 64-round digest calculation.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880720,"byte_end":880804,"line_start":271,"line_end":271,"column_start":1,"column_end":85}},{"value":"/ The schedule-related instructions allow 4 rounds to be calculated as:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880805,"byte_end":880878,"line_start":272,"line_end":272,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880879,"byte_end":880882,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880883,"byte_end":880896,"line_start":274,"line_end":274,"column_start":1,"column_end":14}},{"value":"/ use std::simd::u32x4;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880897,"byte_end":880922,"line_start":275,"line_end":275,"column_start":1,"column_end":26}},{"value":"/ use self::crypto::sha2::{","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880923,"byte_end":880952,"line_start":276,"line_end":276,"column_start":1,"column_end":30}},{"value":"/     sha256msg1,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880953,"byte_end":880972,"line_start":277,"line_end":277,"column_start":1,"column_end":20}},{"value":"/     sha256msg2,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880973,"byte_end":880992,"line_start":278,"line_end":278,"column_start":1,"column_end":20}},{"value":"/     sha256load","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":880993,"byte_end":881011,"line_start":279,"line_end":279,"column_start":1,"column_end":19}},{"value":"/ };","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881012,"byte_end":881018,"line_start":280,"line_end":280,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881019,"byte_end":881022,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ fn schedule4_data(work: &mut [u32x4], w: &[u32]) {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881023,"byte_end":881077,"line_start":282,"line_end":282,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881078,"byte_end":881081,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/     // this is to illustrate the data order","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881082,"byte_end":881129,"line_start":284,"line_end":284,"column_start":1,"column_end":48}},{"value":"/     work[0] = u32x4(w[3], w[2], w[1], w[0]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881130,"byte_end":881178,"line_start":285,"line_end":285,"column_start":1,"column_end":49}},{"value":"/     work[1] = u32x4(w[7], w[6], w[5], w[4]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881179,"byte_end":881227,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"/     work[2] = u32x4(w[11], w[10], w[9], w[8]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881228,"byte_end":881278,"line_start":287,"line_end":287,"column_start":1,"column_end":51}},{"value":"/     work[3] = u32x4(w[15], w[14], w[13], w[12]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881279,"byte_end":881331,"line_start":288,"line_end":288,"column_start":1,"column_end":53}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881332,"byte_end":881337,"line_start":289,"line_end":289,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881338,"byte_end":881341,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ fn schedule4_work(work: &mut [u32x4], t: usize) {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881342,"byte_end":881395,"line_start":291,"line_end":291,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881396,"byte_end":881399,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/     // this is the core expression","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881400,"byte_end":881438,"line_start":293,"line_end":293,"column_start":1,"column_end":39}},{"value":"/     work[t] = sha256msg2(sha256msg1(work[t - 4], work[t - 3]) +","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881439,"byte_end":881506,"line_start":294,"line_end":294,"column_start":1,"column_end":68}},{"value":"/                          sha256load(work[t - 2], work[t - 1]),","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881507,"byte_end":881573,"line_start":295,"line_end":295,"column_start":1,"column_end":67}},{"value":"/                          work[t - 1])","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881574,"byte_end":881615,"line_start":296,"line_end":296,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881616,"byte_end":881621,"line_start":297,"line_end":297,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881622,"byte_end":881629,"line_start":298,"line_end":298,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881630,"byte_end":881633,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ instead of 4 rounds of:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881634,"byte_end":881661,"line_start":300,"line_end":300,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881662,"byte_end":881665,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881666,"byte_end":881679,"line_start":302,"line_end":302,"column_start":1,"column_end":14}},{"value":"/ fn schedule_work(w: &mut [u32], t: usize) {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881680,"byte_end":881727,"line_start":303,"line_end":303,"column_start":1,"column_end":48}},{"value":"/     w[t] = sigma1!(w[t - 2]) + w[t - 7] + sigma0!(w[t - 15]) + w[t - 16];","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881728,"byte_end":881805,"line_start":304,"line_end":304,"column_start":1,"column_end":78}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881806,"byte_end":881811,"line_start":305,"line_end":305,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881812,"byte_end":881819,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881820,"byte_end":881823,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ and the digest-related instructions allow 4 rounds to be calculated as:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881824,"byte_end":881899,"line_start":308,"line_end":308,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881900,"byte_end":881903,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881904,"byte_end":881917,"line_start":310,"line_end":310,"column_start":1,"column_end":14}},{"value":"/ use std::simd::u32x4;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881918,"byte_end":881943,"line_start":311,"line_end":311,"column_start":1,"column_end":26}},{"value":"/ use self::crypto::sha2::{K32X4,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881944,"byte_end":881979,"line_start":312,"line_end":312,"column_start":1,"column_end":36}},{"value":"/     sha256rnds2,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":881980,"byte_end":882000,"line_start":313,"line_end":313,"column_start":1,"column_end":21}},{"value":"/     sha256swap","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882001,"byte_end":882019,"line_start":314,"line_end":314,"column_start":1,"column_end":19}},{"value":"/ };","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882020,"byte_end":882026,"line_start":315,"line_end":315,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882027,"byte_end":882030,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ fn rounds4(state: &mut [u32; 8], work: &mut [u32x4], t: usize) {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882031,"byte_end":882099,"line_start":317,"line_end":317,"column_start":1,"column_end":69}},{"value":"/     let [a, b, c, d, e, f, g, h]: [u32; 8] = *state;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882100,"byte_end":882156,"line_start":318,"line_end":318,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882157,"byte_end":882160,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/     // this is to illustrate the data order","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882161,"byte_end":882208,"line_start":320,"line_end":320,"column_start":1,"column_end":48}},{"value":"/     let mut abef = u32x4(a, b, e, f);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882209,"byte_end":882250,"line_start":321,"line_end":321,"column_start":1,"column_end":42}},{"value":"/     let mut cdgh = u32x4(c, d, g, h);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882251,"byte_end":882292,"line_start":322,"line_end":322,"column_start":1,"column_end":42}},{"value":"/     let temp = K32X4[t] + work[t];","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882293,"byte_end":882331,"line_start":323,"line_end":323,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882332,"byte_end":882335,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/     // this is the core expression","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882336,"byte_end":882374,"line_start":325,"line_end":325,"column_start":1,"column_end":39}},{"value":"/     cdgh = sha256rnds2(cdgh, abef, temp);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882375,"byte_end":882420,"line_start":326,"line_end":326,"column_start":1,"column_end":46}},{"value":"/     abef = sha256rnds2(abef, cdgh, sha256swap(temp));","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882421,"byte_end":882478,"line_start":327,"line_end":327,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882479,"byte_end":882482,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/     *state = [abef.0, abef.1, cdgh.0, cdgh.1,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882483,"byte_end":882532,"line_start":329,"line_end":329,"column_start":1,"column_end":50}},{"value":"/               abef.2, abef.3, cdgh.2, cdgh.3];","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882533,"byte_end":882583,"line_start":330,"line_end":330,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882584,"byte_end":882589,"line_start":331,"line_end":331,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882590,"byte_end":882597,"line_start":332,"line_end":332,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882598,"byte_end":882601,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ instead of 4 rounds of:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882602,"byte_end":882629,"line_start":334,"line_end":334,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882630,"byte_end":882633,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882634,"byte_end":882647,"line_start":336,"line_end":336,"column_start":1,"column_end":14}},{"value":"/ fn round(state: &mut [u32; 8], w: &mut [u32], t: usize) {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882648,"byte_end":882709,"line_start":337,"line_end":337,"column_start":1,"column_end":62}},{"value":"/     let [a, b, c, mut d, e, f, g, mut h]: [u32; 8] = *state;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882710,"byte_end":882774,"line_start":338,"line_end":338,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882775,"byte_end":882778,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/     h += big_sigma1!(e) +   choose!(e, f, g) + K32[t] + w[t]; d += h;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882779,"byte_end":882852,"line_start":340,"line_end":340,"column_start":1,"column_end":74}},{"value":"/     h += big_sigma0!(a) + majority!(a, b, c);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882853,"byte_end":882902,"line_start":341,"line_end":341,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882903,"byte_end":882906,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/     *state = [h, a, b, c, d, e, f, g];","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882907,"byte_end":882949,"line_start":343,"line_end":343,"column_start":1,"column_end":43}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882950,"byte_end":882955,"line_start":344,"line_end":344,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882956,"byte_end":882963,"line_start":345,"line_end":345,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882964,"byte_end":882967,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ **NOTE**: It is important to note, however, that these instructions are not implemented","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":882968,"byte_end":883059,"line_start":347,"line_end":347,"column_start":1,"column_end":92}},{"value":"/ by any CPU (at the time of this writing), and so they are emulated in this library","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":883060,"byte_end":883146,"line_start":348,"line_end":348,"column_start":1,"column_end":87}},{"value":"/ until the instructions become more common, and gain support in LLVM (and GCC, etc.).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":883147,"byte_end":883235,"line_start":349,"line_end":349,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":883236,"byte_end":883239,"line_start":350,"line_end":350,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":2176},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":883692,"byte_end":883710,"line_start":365,"line_end":365,"column_start":8,"column_end":26},"name":"sha512_schedule_x2","qualname":"::sha2::sha512_schedule_x2","value":"pub fn sha512_schedule_x2(u64x2, u64x2, u64x2, u64x2) -> u64x2","parent":null,"children":[],"decl_id":null,"docs":" Performs 2 rounds of the SHA-512 message schedule update.\n","sig":null,"attributes":[{"value":"/ Performs 2 rounds of the SHA-512 message schedule update.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":883623,"byte_end":883684,"line_start":364,"line_end":364,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":2179},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":884396,"byte_end":884415,"line_start":389,"line_end":389,"column_start":8,"column_end":27},"name":"sha512_digest_round","qualname":"::sha2::sha512_digest_round","value":"pub fn sha512_digest_round(u64x2, u64x2, u64x2, u64x2, u64) -> u64x2","parent":null,"children":[],"decl_id":null,"docs":" Performs one round of the SHA-512 message block digest.\n","sig":null,"attributes":[{"value":"/ Performs one round of the SHA-512 message block digest.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":884329,"byte_end":884388,"line_start":388,"line_end":388,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":2184},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":885493,"byte_end":885516,"line_start":420,"line_end":420,"column_start":8,"column_end":31},"name":"sha512_digest_block_u64","qualname":"::sha2::sha512_digest_block_u64","value":"pub fn sha512_digest_block_u64(&mut [u64; ], &[u64; ])","parent":null,"children":[],"decl_id":null,"docs":" Process a block with the SHA-512 algorithm.\n","sig":null,"attributes":[{"value":"/ Process a block with the SHA-512 algorithm.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":885438,"byte_end":885485,"line_start":419,"line_end":419,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":2189},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893224,"byte_end":893243,"line_start":638,"line_end":638,"column_start":8,"column_end":27},"name":"sha512_digest_block","qualname":"::sha2::sha512_digest_block","value":"pub fn sha512_digest_block(&mut [u64; ], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Process a block with the SHA-512 algorithm. (See more...)","sig":null,"attributes":[{"value":"/ Process a block with the SHA-512 algorithm. (See more...)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890136,"byte_end":890197,"line_start":543,"line_end":543,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890198,"byte_end":890201,"line_start":544,"line_end":544,"column_start":1,"column_end":4}},{"value":"/ Internally, this uses functions that resemble the new Intel SHA","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890202,"byte_end":890269,"line_start":545,"line_end":545,"column_start":1,"column_end":68}},{"value":"/ instruction set extensions, but since no architecture seems to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890270,"byte_end":890336,"line_start":546,"line_end":546,"column_start":1,"column_end":67}},{"value":"/ have any designs, these may not be the final designs if and/or when","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890337,"byte_end":890408,"line_start":547,"line_end":547,"column_start":1,"column_end":72}},{"value":"/ there are instruction set extensions with SHA-512. So to summarize:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890409,"byte_end":890480,"line_start":548,"line_end":548,"column_start":1,"column_end":72}},{"value":"/ SHA-1 and SHA-256 are being implemented in hardware soon (at the time","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890481,"byte_end":890554,"line_start":549,"line_end":549,"column_start":1,"column_end":74}},{"value":"/ of this writing), but it doesn't look like SHA-512 will be hardware","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890555,"byte_end":890626,"line_start":550,"line_end":550,"column_start":1,"column_end":72}},{"value":"/ accelerated any time soon.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890627,"byte_end":890657,"line_start":551,"line_end":551,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890658,"byte_end":890661,"line_start":552,"line_end":552,"column_start":1,"column_end":4}},{"value":"/ # Implementation","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890662,"byte_end":890682,"line_start":553,"line_end":553,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890683,"byte_end":890686,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ These functions fall into two categories:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890687,"byte_end":890732,"line_start":555,"line_end":555,"column_start":1,"column_end":46}},{"value":"/ message schedule calculation, and the message block 64-round digest calculation.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890733,"byte_end":890817,"line_start":556,"line_end":556,"column_start":1,"column_end":85}},{"value":"/ The schedule-related functions allow 4 rounds to be calculated as:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890818,"byte_end":890888,"line_start":557,"line_end":557,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890889,"byte_end":890892,"line_start":558,"line_end":558,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890893,"byte_end":890906,"line_start":559,"line_end":559,"column_start":1,"column_end":14}},{"value":"/ use std::simd::u64x2;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890907,"byte_end":890932,"line_start":560,"line_end":560,"column_start":1,"column_end":26}},{"value":"/ use self::crypto::sha2::{","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890933,"byte_end":890962,"line_start":561,"line_end":561,"column_start":1,"column_end":30}},{"value":"/     sha512msg,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890963,"byte_end":890981,"line_start":562,"line_end":562,"column_start":1,"column_end":19}},{"value":"/     sha512load","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":890982,"byte_end":891000,"line_start":563,"line_end":563,"column_start":1,"column_end":19}},{"value":"/ };","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891001,"byte_end":891007,"line_start":564,"line_end":564,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891008,"byte_end":891011,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ fn schedule4_data(work: &mut [u64x2], w: &[u64]) {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891012,"byte_end":891066,"line_start":566,"line_end":566,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891067,"byte_end":891070,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/     // this is to illustrate the data order","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891071,"byte_end":891118,"line_start":568,"line_end":568,"column_start":1,"column_end":48}},{"value":"/     work[0] = u64x2(w[1], w[0]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891119,"byte_end":891155,"line_start":569,"line_end":569,"column_start":1,"column_end":37}},{"value":"/     work[1] = u64x2(w[3], w[2]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891156,"byte_end":891192,"line_start":570,"line_end":570,"column_start":1,"column_end":37}},{"value":"/     work[2] = u64x2(w[5], w[4]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891193,"byte_end":891229,"line_start":571,"line_end":571,"column_start":1,"column_end":37}},{"value":"/     work[3] = u64x2(w[7], w[6]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891230,"byte_end":891266,"line_start":572,"line_end":572,"column_start":1,"column_end":37}},{"value":"/     work[4] = u64x2(w[9], w[8]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891267,"byte_end":891303,"line_start":573,"line_end":573,"column_start":1,"column_end":37}},{"value":"/     work[5] = u64x2(w[11], w[10]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891304,"byte_end":891342,"line_start":574,"line_end":574,"column_start":1,"column_end":39}},{"value":"/     work[6] = u64x2(w[13], w[12]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891343,"byte_end":891381,"line_start":575,"line_end":575,"column_start":1,"column_end":39}},{"value":"/     work[7] = u64x2(w[15], w[14]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891382,"byte_end":891420,"line_start":576,"line_end":576,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891421,"byte_end":891426,"line_start":577,"line_end":577,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891427,"byte_end":891430,"line_start":578,"line_end":578,"column_start":1,"column_end":4}},{"value":"/ fn schedule4_work(work: &mut [u64x2], t: usize) {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891431,"byte_end":891484,"line_start":579,"line_end":579,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891485,"byte_end":891488,"line_start":580,"line_end":580,"column_start":1,"column_end":4}},{"value":"/     // this is the core expression","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891489,"byte_end":891527,"line_start":581,"line_end":581,"column_start":1,"column_end":39}},{"value":"/     work[t] = sha512msg(work[t - 8],","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891528,"byte_end":891568,"line_start":582,"line_end":582,"column_start":1,"column_end":41}},{"value":"/                         work[t - 7],","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891569,"byte_end":891609,"line_start":583,"line_end":583,"column_start":1,"column_end":41}},{"value":"/                         sha512load(work[t - 4], work[t - 3]),","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891610,"byte_end":891675,"line_start":584,"line_end":584,"column_start":1,"column_end":66}},{"value":"/                         work[t - 1]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891676,"byte_end":891717,"line_start":585,"line_end":585,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891718,"byte_end":891723,"line_start":586,"line_end":586,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891724,"byte_end":891731,"line_start":587,"line_end":587,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891732,"byte_end":891735,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ instead of 4 rounds of:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891736,"byte_end":891763,"line_start":589,"line_end":589,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891764,"byte_end":891767,"line_start":590,"line_end":590,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891768,"byte_end":891781,"line_start":591,"line_end":591,"column_start":1,"column_end":14}},{"value":"/ fn schedule_work(w: &mut [u64], t: usize) {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891782,"byte_end":891829,"line_start":592,"line_end":592,"column_start":1,"column_end":48}},{"value":"/     w[t] = sigma1!(w[t - 2]) + w[t - 7] + sigma0!(w[t - 15]) + w[t - 16];","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891830,"byte_end":891907,"line_start":593,"line_end":593,"column_start":1,"column_end":78}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891908,"byte_end":891913,"line_start":594,"line_end":594,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891914,"byte_end":891921,"line_start":595,"line_end":595,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891922,"byte_end":891925,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ and the digest-related functions allow 4 rounds to be calculated as:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891926,"byte_end":891998,"line_start":597,"line_end":597,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":891999,"byte_end":892002,"line_start":598,"line_end":598,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892003,"byte_end":892016,"line_start":599,"line_end":599,"column_start":1,"column_end":14}},{"value":"/ use std::simd::u64x2;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892017,"byte_end":892042,"line_start":600,"line_end":600,"column_start":1,"column_end":26}},{"value":"/ use self::crypto::sha2::{K64X2, sha512rnd};","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892043,"byte_end":892090,"line_start":601,"line_end":601,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892091,"byte_end":892094,"line_start":602,"line_end":602,"column_start":1,"column_end":4}},{"value":"/ fn rounds4(state: &mut [u64; 8], work: &mut [u64x2], t: usize) {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892095,"byte_end":892163,"line_start":603,"line_end":603,"column_start":1,"column_end":69}},{"value":"/     let [a, b, c, d, e, f, g, h]: [u64; 8] = *state;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892164,"byte_end":892220,"line_start":604,"line_end":604,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892221,"byte_end":892224,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/     // this is to illustrate the data order","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892225,"byte_end":892272,"line_start":606,"line_end":606,"column_start":1,"column_end":48}},{"value":"/     let mut ae = u64x2(a, e);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892273,"byte_end":892306,"line_start":607,"line_end":607,"column_start":1,"column_end":34}},{"value":"/     let mut bf = u64x2(b, f);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892307,"byte_end":892340,"line_start":608,"line_end":608,"column_start":1,"column_end":34}},{"value":"/     let mut cg = u64x2(c, g);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892341,"byte_end":892374,"line_start":609,"line_end":609,"column_start":1,"column_end":34}},{"value":"/     let mut dh = u64x2(d, h);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892375,"byte_end":892408,"line_start":610,"line_end":610,"column_start":1,"column_end":34}},{"value":"/     let u64x2(w1, w0) = K64X2[2*t]     + work[2*t];","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892409,"byte_end":892464,"line_start":611,"line_end":611,"column_start":1,"column_end":56}},{"value":"/     let u64x2(w3, w2) = K64X2[2*t + 1] + work[2*t + 1];","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892465,"byte_end":892524,"line_start":612,"line_end":612,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892525,"byte_end":892528,"line_start":613,"line_end":613,"column_start":1,"column_end":4}},{"value":"/     // this is the core expression","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892529,"byte_end":892567,"line_start":614,"line_end":614,"column_start":1,"column_end":39}},{"value":"/     dh = sha512rnd(ae, bf, cg, dh, w0);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892568,"byte_end":892611,"line_start":615,"line_end":615,"column_start":1,"column_end":44}},{"value":"/     cg = sha512rnd(dh, ae, bf, cg, w1);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892612,"byte_end":892655,"line_start":616,"line_end":616,"column_start":1,"column_end":44}},{"value":"/     bf = sha512rnd(cg, dh, ae, bf, w2);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892656,"byte_end":892699,"line_start":617,"line_end":617,"column_start":1,"column_end":44}},{"value":"/     ae = sha512rnd(bf, cg, dh, ae, w3);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892700,"byte_end":892743,"line_start":618,"line_end":618,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892744,"byte_end":892747,"line_start":619,"line_end":619,"column_start":1,"column_end":4}},{"value":"/     *state = [ae.0, bf.0, cg.0, dh.0,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892748,"byte_end":892789,"line_start":620,"line_end":620,"column_start":1,"column_end":42}},{"value":"/               ae.1, bf.1, cg.1, dh.1];","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892790,"byte_end":892832,"line_start":621,"line_end":621,"column_start":1,"column_end":43}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892833,"byte_end":892838,"line_start":622,"line_end":622,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892839,"byte_end":892846,"line_start":623,"line_end":623,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892847,"byte_end":892850,"line_start":624,"line_end":624,"column_start":1,"column_end":4}},{"value":"/ instead of 4 rounds of:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892851,"byte_end":892878,"line_start":625,"line_end":625,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892879,"byte_end":892882,"line_start":626,"line_end":626,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892883,"byte_end":892896,"line_start":627,"line_end":627,"column_start":1,"column_end":14}},{"value":"/ fn round(state: &mut [u64; 8], w: &mut [u64], t: usize) {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892897,"byte_end":892958,"line_start":628,"line_end":628,"column_start":1,"column_end":62}},{"value":"/     let [a, b, c, mut d, e, f, g, mut h]: [u64; 8] = *state;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":892959,"byte_end":893023,"line_start":629,"line_end":629,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893024,"byte_end":893027,"line_start":630,"line_end":630,"column_start":1,"column_end":4}},{"value":"/     h += big_sigma1!(e) +   choose!(e, f, g) + K64[t] + w[t]; d += h;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893028,"byte_end":893101,"line_start":631,"line_end":631,"column_start":1,"column_end":74}},{"value":"/     h += big_sigma0!(a) + majority!(a, b, c);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893102,"byte_end":893151,"line_start":632,"line_end":632,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893152,"byte_end":893155,"line_start":633,"line_end":633,"column_start":1,"column_end":4}},{"value":"/     *state = [h, a, b, c, d, e, f, g];","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893156,"byte_end":893198,"line_start":634,"line_end":634,"column_start":1,"column_end":43}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893199,"byte_end":893204,"line_start":635,"line_end":635,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893205,"byte_end":893212,"line_start":636,"line_end":636,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893213,"byte_end":893216,"line_start":637,"line_end":637,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":2198},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":894019,"byte_end":894022,"line_start":669,"line_end":669,"column_start":11,"column_end":14},"name":"K64","qualname":"::sha2::K64","value":"[u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Constants necessary for SHA-512 family of digests.\n","sig":null,"attributes":[{"value":"/ Constants necessary for SHA-512 family of digests.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893954,"byte_end":894008,"line_start":668,"line_end":668,"column_start":1,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":2200},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":895786,"byte_end":895791,"line_start":693,"line_end":693,"column_start":11,"column_end":16},"name":"K64X2","qualname":"::sha2::K64X2","value":"[u64x2; ]","parent":null,"children":[],"decl_id":null,"docs":" Constants necessary for SHA-512 family of digests.\n","sig":null,"attributes":[{"value":"/ Constants necessary for SHA-512 family of digests.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":895721,"byte_end":895775,"line_start":692,"line_end":692,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":3270},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":898555,"byte_end":898561,"line_start":763,"line_end":763,"column_start":12,"column_end":18},"name":"Sha512","qualname":"::sha2::Sha512","value":"Sha512 {  }","parent":null,"children":[{"krate":0,"index":3271}],"decl_id":null,"docs":" The SHA-512 hash algorithm with the SHA-512 initial hash value.\n","sig":null,"attributes":[{"value":"/ The SHA-512 hash algorithm with the SHA-512 initial hash value.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":898453,"byte_end":898520,"line_start":761,"line_end":761,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2212},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":898684,"byte_end":898687,"line_start":771,"line_end":771,"column_start":12,"column_end":15},"name":"new","qualname":"<Sha512>::new","value":"pub fn new() -> Sha512","parent":null,"children":[],"decl_id":null,"docs":" Construct an new instance of a SHA-512 digest.","sig":null,"attributes":[{"value":"*\n     * Construct an new instance of a SHA-512 digest.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":898607,"byte_end":898672,"line_start":768,"line_end":770,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3275},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":899993,"byte_end":899999,"line_start":819,"line_end":819,"column_start":12,"column_end":18},"name":"Sha384","qualname":"::sha2::Sha384","value":"Sha384 {  }","parent":null,"children":[{"krate":0,"index":3276}],"decl_id":null,"docs":" The SHA-512 hash algorithm with the SHA-384 initial hash value. The result is truncated to 384 bits.\n","sig":null,"attributes":[{"value":"/ The SHA-512 hash algorithm with the SHA-384 initial hash value. The result is truncated to 384 bits.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":899854,"byte_end":899958,"line_start":817,"line_end":817,"column_start":1,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":2222},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":900122,"byte_end":900125,"line_start":827,"line_end":827,"column_start":12,"column_end":15},"name":"new","qualname":"<Sha384>::new","value":"pub fn new() -> Sha384","parent":null,"children":[],"decl_id":null,"docs":" Construct an new instance of a SHA-384 digest.","sig":null,"attributes":[{"value":"*\n     * Construct an new instance of a SHA-384 digest.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":900045,"byte_end":900110,"line_start":824,"line_end":826,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3280},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":901307,"byte_end":901321,"line_start":873,"line_end":873,"column_start":12,"column_end":26},"name":"Sha512Trunc256","qualname":"::sha2::Sha512Trunc256","value":"Sha512Trunc256 {  }","parent":null,"children":[{"krate":0,"index":3281}],"decl_id":null,"docs":" The SHA-512 hash algorithm with the SHA-512/256 initial hash value. The result is truncated to 256 bits.\n","sig":null,"attributes":[{"value":"/ The SHA-512 hash algorithm with the SHA-512/256 initial hash value. The result is truncated to 256 bits.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":901164,"byte_end":901272,"line_start":871,"line_end":871,"column_start":1,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":2232},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":901456,"byte_end":901459,"line_start":881,"line_end":881,"column_start":12,"column_end":15},"name":"new","qualname":"<Sha512Trunc256>::new","value":"pub fn new() -> Sha512Trunc256","parent":null,"children":[],"decl_id":null,"docs":" Construct an new instance of a SHA-512/256 digest.","sig":null,"attributes":[{"value":"*\n     * Construct an new instance of a SHA-512/256 digest.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":901375,"byte_end":901444,"line_start":878,"line_end":880,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3285},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":902567,"byte_end":902581,"line_start":925,"line_end":925,"column_start":12,"column_end":26},"name":"Sha512Trunc224","qualname":"::sha2::Sha512Trunc224","value":"Sha512Trunc224 {  }","parent":null,"children":[{"krate":0,"index":3286}],"decl_id":null,"docs":" The SHA-512 hash algorithm with the SHA-512/224 initial hash value. The result is truncated to 224 bits.\n","sig":null,"attributes":[{"value":"/ The SHA-512 hash algorithm with the SHA-512/224 initial hash value. The result is truncated to 224 bits.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":902424,"byte_end":902532,"line_start":923,"line_end":923,"column_start":1,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":2242},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":902716,"byte_end":902719,"line_start":933,"line_end":933,"column_start":12,"column_end":15},"name":"new","qualname":"<Sha512Trunc224>::new","value":"pub fn new() -> Sha512Trunc224","parent":null,"children":[],"decl_id":null,"docs":" Construct an new instance of a SHA-512/224 digest.","sig":null,"attributes":[{"value":"*\n     * Construct an new instance of a SHA-512/224 digest.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":902635,"byte_end":902704,"line_start":930,"line_end":932,"column_start":5,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":2257},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":904265,"byte_end":904268,"line_start":999,"line_end":999,"column_start":11,"column_end":14},"name":"K32","qualname":"::sha2::K32","value":"[u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Constants necessary for SHA-256 family of digests.\n","sig":null,"attributes":[{"value":"/ Constants necessary for SHA-256 family of digests.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":904200,"byte_end":904254,"line_start":998,"line_end":998,"column_start":1,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":2259},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":905184,"byte_end":905189,"line_start":1019,"line_end":1019,"column_start":11,"column_end":16},"name":"K32X4","qualname":"::sha2::K32X4","value":"[u32x4; ]","parent":null,"children":[],"decl_id":null,"docs":" Constants necessary for SHA-256 family of digests.\n","sig":null,"attributes":[{"value":"/ Constants necessary for SHA-256 family of digests.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":905119,"byte_end":905173,"line_start":1018,"line_end":1018,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":3305},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":907590,"byte_end":907596,"line_start":1091,"line_end":1091,"column_start":12,"column_end":18},"name":"Sha256","qualname":"::sha2::Sha256","value":"Sha256 {  }","parent":null,"children":[{"krate":0,"index":3306}],"decl_id":null,"docs":" The SHA-256 hash algorithm with the SHA-256 initial hash value.\n","sig":null,"attributes":[{"value":"/ The SHA-256 hash algorithm with the SHA-256 initial hash value.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":907488,"byte_end":907555,"line_start":1089,"line_end":1089,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2271},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":907719,"byte_end":907722,"line_start":1099,"line_end":1099,"column_start":12,"column_end":15},"name":"new","qualname":"<Sha256>::new","value":"pub fn new() -> Sha256","parent":null,"children":[],"decl_id":null,"docs":" Construct an new instance of a SHA-256 digest.","sig":null,"attributes":[{"value":"*\n     * Construct an new instance of a SHA-256 digest.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":907642,"byte_end":907707,"line_start":1096,"line_end":1098,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3310},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":908961,"byte_end":908967,"line_start":1147,"line_end":1147,"column_start":12,"column_end":18},"name":"Sha224","qualname":"::sha2::Sha224","value":"Sha224 {  }","parent":null,"children":[{"krate":0,"index":3311}],"decl_id":null,"docs":" The SHA-256 hash algorithm with the SHA-224 initial hash value. The result is truncated to 224 bits.\n","sig":null,"attributes":[{"value":"/ The SHA-256 hash algorithm with the SHA-224 initial hash value. The result is truncated to 224 bits.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":908822,"byte_end":908926,"line_start":1145,"line_end":1145,"column_start":1,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":2281},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":909090,"byte_end":909093,"line_start":1155,"line_end":1155,"column_start":12,"column_end":15},"name":"new","qualname":"<Sha224>::new","value":"pub fn new() -> Sha224","parent":null,"children":[],"decl_id":null,"docs":" Construct an new instance of a SHA-224 digest.","sig":null,"attributes":[{"value":"*\n     * Construct an new instance of a SHA-224 digest.\n     */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":909013,"byte_end":909078,"line_start":1152,"line_end":1154,"column_start":5,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":2290},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sha3","qualname":"::sha3","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","parent":null,"children":[{"krate":0,"index":2291},{"krate":0,"index":2294},{"krate":0,"index":2297},{"krate":0,"index":2298},{"krate":0,"index":2301},{"krate":0,"index":2304},{"krate":0,"index":2307},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2311},{"krate":0,"index":2313},{"krate":0,"index":2315},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":3315},{"krate":0,"index":3336},{"krate":0,"index":3338},{"krate":0,"index":3339},{"krate":0,"index":2325},{"krate":0,"index":2330},{"krate":0,"index":2337},{"krate":0,"index":2355},{"krate":0,"index":2361},{"krate":0,"index":2362}],"decl_id":null,"docs":"An implementation of the SHA-3 cryptographic hash algorithms.","sig":null,"attributes":[{"value":"*\nAn implementation of the SHA-3 cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-3 standard:\n\n * `SHA3-224`\n * `SHA3-256`\n * `SHA3-384`\n * `SHA3-512`\n * `SHAKE128`, an extendable output function (XOF)\n * `SHAKE256`, an extendable output function (XOF)\n * `Keccak224`, `Keccak256`, `Keccak384`, `Keccak512` (NIST submission without padding changes)\n\nBased on an [implementation by Sébastien Martini](https://github.com/seb-m/crypto.rs/blob/master/src/sha3.rs)\n\n# Usage\n\nAn example of using `SHA3-256` is:\n\n```rust\nuse self::crypto::digest::Digest;\nuse self::crypto::sha3::Sha3;\n\n// create a SHA3-256 object\nlet mut hasher = Sha3::sha3_256();\n\n// write input message\nhasher.input_str(\"abc\");\n\n// read hash digest\nlet hex = hasher.result_str();\n\nassert_eq!(hex, \"3a985da74fe225b2045c172d6bd390bd855f086e3e9d525b46bfe24511431532\");\n```\n\n */","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":919525,"byte_end":920401,"line_start":11,"line_end":46,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3316},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922800,"byte_end":922808,"line_start":152,"line_end":152,"column_start":5,"column_end":13},"name":"Sha3_224","qualname":"::sha3::Sha3Mode::Sha3_224","value":"Sha3Mode::Sha3_224","parent":{"krate":0,"index":3315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3318},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922814,"byte_end":922822,"line_start":153,"line_end":153,"column_start":5,"column_end":13},"name":"Sha3_256","qualname":"::sha3::Sha3Mode::Sha3_256","value":"Sha3Mode::Sha3_256","parent":{"krate":0,"index":3315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3320},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922828,"byte_end":922836,"line_start":154,"line_end":154,"column_start":5,"column_end":13},"name":"Sha3_384","qualname":"::sha3::Sha3Mode::Sha3_384","value":"Sha3Mode::Sha3_384","parent":{"krate":0,"index":3315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3322},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922842,"byte_end":922850,"line_start":155,"line_end":155,"column_start":5,"column_end":13},"name":"Sha3_512","qualname":"::sha3::Sha3Mode::Sha3_512","value":"Sha3Mode::Sha3_512","parent":{"krate":0,"index":3315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3324},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922856,"byte_end":922864,"line_start":156,"line_end":156,"column_start":5,"column_end":13},"name":"Shake128","qualname":"::sha3::Sha3Mode::Shake128","value":"Sha3Mode::Shake128","parent":{"krate":0,"index":3315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3326},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922870,"byte_end":922878,"line_start":157,"line_end":157,"column_start":5,"column_end":13},"name":"Shake256","qualname":"::sha3::Sha3Mode::Shake256","value":"Sha3Mode::Shake256","parent":{"krate":0,"index":3315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3328},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922884,"byte_end":922893,"line_start":158,"line_end":158,"column_start":5,"column_end":14},"name":"Keccak224","qualname":"::sha3::Sha3Mode::Keccak224","value":"Sha3Mode::Keccak224","parent":{"krate":0,"index":3315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3330},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922899,"byte_end":922908,"line_start":159,"line_end":159,"column_start":5,"column_end":14},"name":"Keccak256","qualname":"::sha3::Sha3Mode::Keccak256","value":"Sha3Mode::Keccak256","parent":{"krate":0,"index":3315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3332},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922914,"byte_end":922923,"line_start":160,"line_end":160,"column_start":5,"column_end":14},"name":"Keccak384","qualname":"::sha3::Sha3Mode::Keccak384","value":"Sha3Mode::Keccak384","parent":{"krate":0,"index":3315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3334},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922929,"byte_end":922938,"line_start":161,"line_end":161,"column_start":5,"column_end":14},"name":"Keccak512","qualname":"::sha3::Sha3Mode::Keccak512","value":"Sha3Mode::Keccak512","parent":{"krate":0,"index":3315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3315},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922785,"byte_end":922793,"line_start":151,"line_end":151,"column_start":10,"column_end":18},"name":"Sha3Mode","qualname":"::sha3::Sha3Mode","value":"pub enum Sha3Mode {\n    Sha3_224,\n    Sha3_256,\n    Sha3_384,\n    Sha3_512,\n    Shake128,\n    Shake256,\n    Keccak224,\n    Keccak256,\n    Keccak384,\n    Keccak512,\n}","parent":null,"children":[{"krate":0,"index":3316},{"krate":0,"index":3318},{"krate":0,"index":3320},{"krate":0,"index":3322},{"krate":0,"index":3324},{"krate":0,"index":3326},{"krate":0,"index":3328},{"krate":0,"index":3330},{"krate":0,"index":3332},{"krate":0,"index":3334}],"decl_id":null,"docs":" SHA-3 Modes.\n","sig":null,"attributes":[{"value":"/ SHA-3 Modes.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922698,"byte_end":922714,"line_start":148,"line_end":148,"column_start":1,"column_end":17}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922715,"byte_end":922745,"line_start":149,"line_end":149,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2326},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":923107,"byte_end":923120,"line_start":167,"line_end":167,"column_start":12,"column_end":25},"name":"digest_length","qualname":"<Sha3Mode>::digest_length","value":"pub fn digest_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the expected hash size in bytes specified for `mode`, or 0\n for modes with variable output as for shake functions.\n","sig":null,"attributes":[{"value":"/ Return the expected hash size in bytes specified for `mode`, or 0","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922963,"byte_end":923032,"line_start":165,"line_end":165,"column_start":5,"column_end":74}},{"value":"/ for modes with variable output as for shake functions.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":923037,"byte_end":923095,"line_start":166,"line_end":166,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2327},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":923535,"byte_end":923543,"line_start":178,"line_end":178,"column_start":12,"column_end":20},"name":"is_shake","qualname":"<Sha3Mode>::is_shake","value":"pub fn is_shake(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if `mode` is a SHAKE mode.\n","sig":null,"attributes":[{"value":"/ Return `true` if `mode` is a SHAKE mode.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":923479,"byte_end":923523,"line_start":177,"line_end":177,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2328},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":923745,"byte_end":923754,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"is_keccak","qualname":"<Sha3Mode>::is_keccak","value":"pub fn is_keccak(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if `mode` is a Keccak mode.\n","sig":null,"attributes":[{"value":"/ Return `true` if `mode` is a Keccak mode.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":923688,"byte_end":923733,"line_start":185,"line_end":185,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":2330},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":924382,"byte_end":924386,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"Sha3","qualname":"::sha3::Sha3","value":"Sha3 {  }","parent":null,"children":[{"krate":0,"index":2331},{"krate":0,"index":2333},{"krate":0,"index":2334},{"krate":0,"index":2335},{"krate":0,"index":2336}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2338},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":924721,"byte_end":924724,"line_start":218,"line_end":218,"column_start":12,"column_end":15},"name":"new","qualname":"<Sha3>::new","value":"pub fn new(Sha3Mode) -> Sha3","parent":null,"children":[],"decl_id":null,"docs":" New SHA-3 instanciated from specified SHA-3 `mode`.\n","sig":null,"attributes":[{"value":"/ New SHA-3 instanciated from specified SHA-3 `mode`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":924654,"byte_end":924709,"line_start":217,"line_end":217,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2340},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":924959,"byte_end":924967,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"sha3_224","qualname":"<Sha3>::sha3_224","value":"pub fn sha3_224() -> Sha3","parent":null,"children":[],"decl_id":null,"docs":" New SHA3-224 instance.\n","sig":null,"attributes":[{"value":"/ New SHA3-224 instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":924921,"byte_end":924947,"line_start":228,"line_end":228,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2341},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925067,"byte_end":925075,"line_start":234,"line_end":234,"column_start":12,"column_end":20},"name":"sha3_256","qualname":"<Sha3>::sha3_256","value":"pub fn sha3_256() -> Sha3","parent":null,"children":[],"decl_id":null,"docs":" New SHA3-256 instance.\n","sig":null,"attributes":[{"value":"/ New SHA3-256 instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925029,"byte_end":925055,"line_start":233,"line_end":233,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2342},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925175,"byte_end":925183,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"sha3_384","qualname":"<Sha3>::sha3_384","value":"pub fn sha3_384() -> Sha3","parent":null,"children":[],"decl_id":null,"docs":" New SHA3-384 instance.\n","sig":null,"attributes":[{"value":"/ New SHA3-384 instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925137,"byte_end":925163,"line_start":238,"line_end":238,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2343},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925283,"byte_end":925291,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"sha3_512","qualname":"<Sha3>::sha3_512","value":"pub fn sha3_512() -> Sha3","parent":null,"children":[],"decl_id":null,"docs":" New SHA3-512 instance.\n","sig":null,"attributes":[{"value":"/ New SHA3-512 instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925245,"byte_end":925271,"line_start":243,"line_end":243,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2344},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925392,"byte_end":925401,"line_start":249,"line_end":249,"column_start":12,"column_end":21},"name":"shake_128","qualname":"<Sha3>::shake_128","value":"pub fn shake_128() -> Sha3","parent":null,"children":[],"decl_id":null,"docs":" New SHAKE-128 instance.\n","sig":null,"attributes":[{"value":"/ New SHAKE-128 instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925353,"byte_end":925380,"line_start":248,"line_end":248,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2345},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925502,"byte_end":925511,"line_start":254,"line_end":254,"column_start":12,"column_end":21},"name":"shake_256","qualname":"<Sha3>::shake_256","value":"pub fn shake_256() -> Sha3","parent":null,"children":[],"decl_id":null,"docs":" New SHAKE-256 instance.\n","sig":null,"attributes":[{"value":"/ New SHAKE-256 instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925463,"byte_end":925490,"line_start":253,"line_end":253,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2346},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925612,"byte_end":925621,"line_start":259,"line_end":259,"column_start":12,"column_end":21},"name":"keccak224","qualname":"<Sha3>::keccak224","value":"pub fn keccak224() -> Sha3","parent":null,"children":[],"decl_id":null,"docs":" New Keccak224 instance.\n","sig":null,"attributes":[{"value":"/ New Keccak224 instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925573,"byte_end":925600,"line_start":258,"line_end":258,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2347},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925723,"byte_end":925732,"line_start":264,"line_end":264,"column_start":12,"column_end":21},"name":"keccak256","qualname":"<Sha3>::keccak256","value":"pub fn keccak256() -> Sha3","parent":null,"children":[],"decl_id":null,"docs":" New Keccak256 instance.\n","sig":null,"attributes":[{"value":"/ New Keccak256 instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925684,"byte_end":925711,"line_start":263,"line_end":263,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2348},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925834,"byte_end":925843,"line_start":269,"line_end":269,"column_start":12,"column_end":21},"name":"keccak384","qualname":"<Sha3>::keccak384","value":"pub fn keccak384() -> Sha3","parent":null,"children":[],"decl_id":null,"docs":" New Keccak384 instance.\n","sig":null,"attributes":[{"value":"/ New Keccak384 instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925795,"byte_end":925822,"line_start":268,"line_end":268,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2349},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925945,"byte_end":925954,"line_start":274,"line_end":274,"column_start":12,"column_end":21},"name":"keccak512","qualname":"<Sha3>::keccak512","value":"pub fn keccak512() -> Sha3","parent":null,"children":[],"decl_id":null,"docs":" New Keccak512 instance.\n","sig":null,"attributes":[{"value":"/ New Keccak512 instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":925906,"byte_end":925933,"line_start":273,"line_end":273,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3341},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2080934,"byte_end":2080939,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"name":"u32x4","qualname":"::simd::fake::u32x4","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2080888,"byte_end":2080918,"line_start":27,"line_end":27,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":3343},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2080940,"byte_end":2080947,"line_start":28,"line_end":28,"column_start":22,"column_end":29},"name":"0","qualname":"::simd::fake::u32x4::0","value":"u32","parent":{"krate":0,"index":3341},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3344},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2080949,"byte_end":2080956,"line_start":28,"line_end":28,"column_start":31,"column_end":38},"name":"1","qualname":"::simd::fake::u32x4::1","value":"u32","parent":{"krate":0,"index":3341},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3345},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2080958,"byte_end":2080965,"line_start":28,"line_end":28,"column_start":40,"column_end":47},"name":"2","qualname":"::simd::fake::u32x4::2","value":"u32","parent":{"krate":0,"index":3341},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3346},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2080967,"byte_end":2080974,"line_start":28,"line_end":28,"column_start":49,"column_end":56},"name":"3","qualname":"::simd::fake::u32x4::3","value":"u32","parent":{"krate":0,"index":3341},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3357},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2083107,"byte_end":2083112,"line_start":112,"line_end":112,"column_start":16,"column_end":21},"name":"u64x2","qualname":"::simd::fake::u64x2","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2083061,"byte_end":2083091,"line_start":111,"line_end":111,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":3359},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2083113,"byte_end":2083120,"line_start":112,"line_end":112,"column_start":22,"column_end":29},"name":"0","qualname":"::simd::fake::u64x2::0","value":"u64","parent":{"krate":0,"index":3357},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3360},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2083122,"byte_end":2083129,"line_start":112,"line_end":112,"column_start":31,"column_end":38},"name":"1","qualname":"::simd::fake::u64x2::1","value":"u64","parent":{"krate":0,"index":3357},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2423},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sosemanuk","qualname":"::sosemanuk","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","parent":null,"children":[{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2428},{"krate":0,"index":2431},{"krate":0,"index":2434},{"krate":0,"index":2435},{"krate":0,"index":2438},{"krate":0,"index":2441},{"krate":0,"index":2444},{"krate":0,"index":2447},{"krate":0,"index":2448},{"krate":0,"index":2451},{"krate":0,"index":2454},{"krate":0,"index":2457},{"krate":0,"index":2460},{"krate":0,"index":2462},{"krate":0,"index":3364},{"krate":0,"index":3374},{"krate":0,"index":2464},{"krate":0,"index":2466},{"krate":0,"index":2474},{"krate":0,"index":2478},{"krate":0,"index":2484},{"krate":0,"index":2486},{"krate":0,"index":2488}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3364},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2090641,"byte_end":2090650,"line_start":153,"line_end":153,"column_start":12,"column_end":21},"name":"Sosemanuk","qualname":"::sosemanuk::Sosemanuk","value":"Sosemanuk {  }","parent":null,"children":[{"krate":0,"index":3365},{"krate":0,"index":3367},{"krate":0,"index":3369},{"krate":0,"index":3371},{"krate":0,"index":3373}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2467},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2090858,"byte_end":2090861,"line_start":164,"line_end":164,"column_start":12,"column_end":15},"name":"new","qualname":"<Sosemanuk>::new","value":"pub fn new(&[u8], &[u8]) -> Sosemanuk","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2508},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"symmetriccipher","qualname":"::symmetriccipher","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","parent":null,"children":[{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2513},{"krate":0,"index":2516},{"krate":0,"index":2519},{"krate":0,"index":2522},{"krate":0,"index":2525},{"krate":0,"index":2528},{"krate":0,"index":2531},{"krate":0,"index":3383},{"krate":0,"index":3388},{"krate":0,"index":3390},{"krate":0,"index":3392},{"krate":0,"index":2534},{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":2540},{"krate":0,"index":2542},{"krate":0,"index":2544}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2522},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2149789,"byte_end":2149803,"line_start":10,"line_end":10,"column_start":11,"column_end":25},"name":"BlockEncryptor","qualname":"::symmetriccipher::BlockEncryptor","value":"BlockEncryptor","parent":null,"children":[{"krate":0,"index":2523},{"krate":0,"index":2524}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2149813,"byte_end":2149823,"line_start":11,"line_end":11,"column_start":8,"column_end":18},"name":"block_size","qualname":"::symmetriccipher::BlockEncryptor::block_size","value":"pub fn block_size(&Self) -> usize","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2149848,"byte_end":2149861,"line_start":12,"line_end":12,"column_start":8,"column_end":21},"name":"encrypt_block","qualname":"::symmetriccipher::BlockEncryptor::encrypt_block","value":"pub fn encrypt_block(&Self, &[u8], &mut [u8])","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2525},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2149916,"byte_end":2149932,"line_start":15,"line_end":15,"column_start":11,"column_end":27},"name":"BlockEncryptorX8","qualname":"::symmetriccipher::BlockEncryptorX8","value":"BlockEncryptorX8","parent":null,"children":[{"krate":0,"index":2526},{"krate":0,"index":2527}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2526},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2149942,"byte_end":2149952,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"block_size","qualname":"::symmetriccipher::BlockEncryptorX8::block_size","value":"pub fn block_size(&Self) -> usize","parent":{"krate":0,"index":2525},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2527},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2149977,"byte_end":2149993,"line_start":17,"line_end":17,"column_start":8,"column_end":24},"name":"encrypt_block_x8","qualname":"::symmetriccipher::BlockEncryptorX8::encrypt_block_x8","value":"pub fn encrypt_block_x8(&Self, &[u8], &mut [u8])","parent":{"krate":0,"index":2525},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2528},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150048,"byte_end":2150062,"line_start":20,"line_end":20,"column_start":11,"column_end":25},"name":"BlockDecryptor","qualname":"::symmetriccipher::BlockDecryptor","value":"BlockDecryptor","parent":null,"children":[{"krate":0,"index":2529},{"krate":0,"index":2530}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2529},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150072,"byte_end":2150082,"line_start":21,"line_end":21,"column_start":8,"column_end":18},"name":"block_size","qualname":"::symmetriccipher::BlockDecryptor::block_size","value":"pub fn block_size(&Self) -> usize","parent":{"krate":0,"index":2528},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2530},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150107,"byte_end":2150120,"line_start":22,"line_end":22,"column_start":8,"column_end":21},"name":"decrypt_block","qualname":"::symmetriccipher::BlockDecryptor::decrypt_block","value":"pub fn decrypt_block(&Self, &[u8], &mut [u8])","parent":{"krate":0,"index":2528},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2531},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150175,"byte_end":2150191,"line_start":25,"line_end":25,"column_start":11,"column_end":27},"name":"BlockDecryptorX8","qualname":"::symmetriccipher::BlockDecryptorX8","value":"BlockDecryptorX8","parent":null,"children":[{"krate":0,"index":2532},{"krate":0,"index":2533}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150201,"byte_end":2150211,"line_start":26,"line_end":26,"column_start":8,"column_end":18},"name":"block_size","qualname":"::symmetriccipher::BlockDecryptorX8::block_size","value":"pub fn block_size(&Self) -> usize","parent":{"krate":0,"index":2531},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2533},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150236,"byte_end":2150252,"line_start":27,"line_end":27,"column_start":8,"column_end":24},"name":"decrypt_block_x8","qualname":"::symmetriccipher::BlockDecryptorX8::decrypt_block_x8","value":"pub fn decrypt_block_x8(&Self, &[u8], &mut [u8])","parent":{"krate":0,"index":2531},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3384},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150363,"byte_end":2150376,"line_start":32,"line_end":32,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::symmetriccipher::SymmetricCipherError::InvalidLength","value":"SymmetricCipherError::InvalidLength","parent":{"krate":0,"index":3383},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3386},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150382,"byte_end":2150396,"line_start":33,"line_end":33,"column_start":5,"column_end":19},"name":"InvalidPadding","qualname":"::symmetriccipher::SymmetricCipherError::InvalidPadding","value":"SymmetricCipherError::InvalidPadding","parent":{"krate":0,"index":3383},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3383},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150336,"byte_end":2150356,"line_start":31,"line_end":31,"column_start":10,"column_end":30},"name":"SymmetricCipherError","qualname":"::symmetriccipher::SymmetricCipherError","value":"pub enum SymmetricCipherError { InvalidLength, InvalidPadding, }","parent":null,"children":[{"krate":0,"index":3384},{"krate":0,"index":3386}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2534},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150410,"byte_end":2150419,"line_start":36,"line_end":36,"column_start":11,"column_end":20},"name":"Encryptor","qualname":"::symmetriccipher::Encryptor","value":"Encryptor","parent":null,"children":[{"krate":0,"index":2535}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2535},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150429,"byte_end":2150436,"line_start":37,"line_end":37,"column_start":8,"column_end":15},"name":"encrypt","qualname":"::symmetriccipher::Encryptor::encrypt","value":"pub fn encrypt(&mut Self, &mut RefReadBuffer, &mut RefWriteBuffer, bool)\n-> Result<BufferResult, SymmetricCipherError>","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2536},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150583,"byte_end":2150592,"line_start":41,"line_end":41,"column_start":11,"column_end":20},"name":"Decryptor","qualname":"::symmetriccipher::Decryptor","value":"Decryptor","parent":null,"children":[{"krate":0,"index":2537}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2537},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150602,"byte_end":2150609,"line_start":42,"line_end":42,"column_start":8,"column_end":15},"name":"decrypt","qualname":"::symmetriccipher::Decryptor::decrypt","value":"pub fn decrypt(&mut Self, &mut RefReadBuffer, &mut RefWriteBuffer, bool)\n-> Result<BufferResult, SymmetricCipherError>","parent":{"krate":0,"index":2536},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2538},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150756,"byte_end":2150779,"line_start":46,"line_end":46,"column_start":11,"column_end":34},"name":"SynchronousStreamCipher","qualname":"::symmetriccipher::SynchronousStreamCipher","value":"SynchronousStreamCipher","parent":null,"children":[{"krate":0,"index":2539}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150789,"byte_end":2150796,"line_start":47,"line_end":47,"column_start":8,"column_end":15},"name":"process","qualname":"::symmetriccipher::SynchronousStreamCipher::process","value":"pub fn process(&mut Self, &[u8], &mut [u8])","parent":{"krate":0,"index":2538},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2546},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs","parent":null,"children":[{"krate":0,"index":2547},{"krate":0,"index":2550},{"krate":0,"index":2552},{"krate":0,"index":2553},{"krate":0,"index":2556},{"krate":0,"index":2557}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":2551},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs","byte_start":2152029,"byte_end":2152060,"line_start":11,"line_end":11,"column_start":12,"column_end":43},"name":"rust_crypto_util_supports_aesni","qualname":"::util::rust_crypto_util_supports_aesni","value":"pub unsafe extern \"C\" fn rust_crypto_util_supports_aesni() -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2552},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs","byte_start":2152138,"byte_end":2152152,"line_start":15,"line_end":15,"column_start":8,"column_end":22},"name":"supports_aesni","qualname":"::util::supports_aesni","value":"pub fn supports_aesni() -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs","byte_start":2152074,"byte_end":2152130,"line_start":14,"line_end":14,"column_start":1,"column_end":57}}]},{"kind":"ForeignFunction","id":{"krate":0,"index":2554},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs","byte_start":2152254,"byte_end":2152288,"line_start":22,"line_end":22,"column_start":12,"column_end":46},"name":"rust_crypto_util_fixed_time_eq_asm","qualname":"::util::rust_crypto_util_fixed_time_eq_asm","value":"pub unsafe extern \"C\" fn rust_crypto_util_fixed_time_eq_asm(lhsp: *const u8,\nrhsp: *const u8, count: libc::size_t) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":2555},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs","byte_start":2152400,"byte_end":2152430,"line_start":26,"line_end":26,"column_start":12,"column_end":42},"name":"rust_crypto_util_secure_memset","qualname":"::util::rust_crypto_util_secure_memset","value":"pub unsafe extern \"C\" fn rust_crypto_util_secure_memset(dst: *mut u8,\nval: libc::uint8_t, count: libc::size_t)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2556},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs","byte_start":2152534,"byte_end":2152547,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"secure_memset","qualname":"::util::secure_memset","value":"pub fn secure_memset(&mut [u8], u8)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2557},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs","byte_start":2152879,"byte_end":2152892,"line_start":43,"line_end":43,"column_start":8,"column_end":21},"name":"fixed_time_eq","qualname":"::util::fixed_time_eq","value":"pub fn fixed_time_eq(&[u8], &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compare two vectors using a fixed number of operations. If the two vectors are not of equal\n length, the function returns false immediately.\n","sig":null,"attributes":[{"value":"/ Compare two vectors using a fixed number of operations. If the two vectors are not of equal","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs","byte_start":2152724,"byte_end":2152819,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/ length, the function returns false immediately.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/util.rs","byte_start":2152820,"byte_end":2152871,"line_start":42,"line_end":42,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":2558},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"whirlpool","qualname":"::whirlpool","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs","parent":null,"children":[{"krate":0,"index":2559},{"krate":0,"index":2562},{"krate":0,"index":2563},{"krate":0,"index":2566},{"krate":0,"index":2569},{"krate":0,"index":2572},{"krate":0,"index":3393},{"krate":0,"index":3400},{"krate":0,"index":3404},{"krate":0,"index":2575},{"krate":0,"index":2579},{"krate":0,"index":2590},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2599},{"krate":0,"index":2601},{"krate":0,"index":2603},{"krate":0,"index":2605},{"krate":0,"index":2607},{"krate":0,"index":2609},{"krate":0,"index":2611},{"krate":0,"index":2613}],"decl_id":null,"docs":"An implementation of the Whirlpool cryptographic hash algorithm.","sig":null,"attributes":[{"value":"*\nAn implementation of the Whirlpool cryptographic hash algorithm.\n\nThis is the algorithm recommended by NESSIE (New European Schemes for Signatures,\nIntegrity and Encryption; an European research project).\n\nThe constants used by Whirlpool were changed twice (2001 and 2003) - this module\nonly implements the most recent standard. The two older Whirlpool implementations\n(sometimes called Whirlpool-0 (pre 2001) and Whirlpool-T (pre 2003)) were not used\nmuch anyway (both have never been recommended by NESSIE).\n\nFor details see <http://www.larc.usp.br/~pbarreto/WhirlpoolPage.html>.\n\n# Usage\n\n```rust\nuse self::crypto::whirlpool::Whirlpool;\nuse self::crypto::digest::Digest;\n\nlet mut hasher = Whirlpool::new();\nhasher.input_str(\"Hello Whirlpool\");\nlet result = hasher.result_str();\n\nassert_eq!(result,\n    concat!(\"8eaccdc136903c458ea0b1376be2a5fc\",\n            \"9dc5b8ce8892a3b4f43366e2610c206c\",\n            \"a373816495e63db0fff2ff25f75aa716\",\n            \"2f332c9f518c3036456502a8414d300a\"));\n```\n*/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs","byte_start":2154117,"byte_end":2155122,"line_start":7,"line_end":36,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":3393},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs","byte_start":2155268,"byte_end":2155277,"line_start":43,"line_end":43,"column_start":12,"column_end":21},"name":"Whirlpool","qualname":"::whirlpool::Whirlpool","value":"Whirlpool {  }","parent":null,"children":[{"krate":0,"index":3394},{"krate":0,"index":3396},{"krate":0,"index":3397},{"krate":0,"index":3399}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2576},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs","byte_start":2155405,"byte_end":2155408,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<Whirlpool>::new","value":"pub fn new() -> Whirlpool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2615},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"aesni","qualname":"::aesni","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","parent":null,"children":[{"krate":0,"index":2616},{"krate":0,"index":2619},{"krate":0,"index":2620},{"krate":0,"index":2621},{"krate":0,"index":2623},{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2627},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2633},{"krate":0,"index":2636},{"krate":0,"index":3405},{"krate":0,"index":3409},{"krate":0,"index":2639},{"krate":0,"index":3410},{"krate":0,"index":3414},{"krate":0,"index":2641},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2647},{"krate":0,"index":2650},{"krate":0,"index":2653},{"krate":0,"index":2656},{"krate":0,"index":2661},{"krate":0,"index":2662},{"krate":0,"index":2669},{"krate":0,"index":2670},{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2673}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":1160,"byte_end":1216,"line_start":57,"line_end":57,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":3405},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2208708,"byte_end":2208722,"line_start":13,"line_end":13,"column_start":12,"column_end":26},"name":"AesNiEncryptor","qualname":"::aesni::AesNiEncryptor","value":"AesNiEncryptor {  }","parent":null,"children":[{"krate":0,"index":3406},{"krate":0,"index":3407}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3410},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2208876,"byte_end":2208890,"line_start":21,"line_end":21,"column_start":12,"column_end":26},"name":"AesNiDecryptor","qualname":"::aesni::AesNiDecryptor","value":"AesNiDecryptor {  }","parent":null,"children":[{"krate":0,"index":3411},{"krate":0,"index":3412}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2209194,"byte_end":2209197,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<AesNiEncryptor>::new","value":"pub fn new(KeySize, &[u8]) -> AesNiEncryptor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2210007,"byte_end":2210010,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<AesNiDecryptor>::new","value":"pub fn new(KeySize, &[u8]) -> AesNiDecryptor","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs","byte_start":33516,"byte_end":33522,"line_start":21,"line_end":21,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs","byte_start":34953,"byte_end":34959,"line_start":55,"line_end":55,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs","byte_start":35378,"byte_end":35384,"line_start":68,"line_end":68,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":62228,"byte_end":62236,"line_start":459,"line_end":459,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":62460,"byte_end":62468,"line_start":466,"line_end":466,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":67703,"byte_end":67711,"line_start":617,"line_end":617,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":68452,"byte_end":68460,"line_start":640,"line_end":640,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":68850,"byte_end":68858,"line_start":653,"line_end":653,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":69126,"byte_end":69134,"line_start":664,"line_end":664,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":69436,"byte_end":69444,"line_start":677,"line_end":677,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":80852,"byte_end":80860,"line_start":933,"line_end":933,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":81874,"byte_end":81882,"line_start":979,"line_end":979,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":82760,"byte_end":82768,"line_start":1014,"line_end":1014,"column_start":79,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":83069,"byte_end":83077,"line_start":1026,"line_end":1026,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":88086,"byte_end":88091,"line_start":1172,"line_end":1172,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":88603,"byte_end":88608,"line_start":1192,"line_end":1192,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":88714,"byte_end":88719,"line_start":1200,"line_end":1200,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":88809,"byte_end":88814,"line_start":1206,"line_end":1206,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":117212,"byte_end":117219,"line_start":56,"line_end":56,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":118442,"byte_end":118449,"line_start":96,"line_end":96,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":407},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":126149,"byte_end":126156,"line_start":339,"line_end":339,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":126482,"byte_end":126489,"line_start":347,"line_end":347,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":136713,"byte_end":136720,"line_start":52,"line_end":52,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":137920,"byte_end":137927,"line_start":91,"line_end":91,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":476},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":496},{"krate":0,"index":500},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":145436,"byte_end":145443,"line_start":329,"line_end":329,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":145769,"byte_end":145776,"line_start":337,"line_end":337,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":157138,"byte_end":157149,"line_start":107,"line_end":107,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":626},{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":172387,"byte_end":172396,"line_start":423,"line_end":423,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":173249,"byte_end":173260,"line_start":439,"line_end":439,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":174142,"byte_end":174152,"line_start":468,"line_end":468,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":174274,"byte_end":174284,"line_start":472,"line_end":472,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":174607,"byte_end":174617,"line_start":482,"line_end":482,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":174739,"byte_end":174749,"line_start":486,"line_end":486,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":175008,"byte_end":175029,"line_start":495,"line_end":495,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":175343,"byte_end":175355,"line_start":506,"line_end":506,"column_start":47,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":175876,"byte_end":175888,"line_start":522,"line_end":522,"column_start":61,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":176206,"byte_end":176227,"line_start":533,"line_end":533,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":176541,"byte_end":176553,"line_start":544,"line_end":544,"column_start":47,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":177074,"byte_end":177086,"line_start":560,"line_end":560,"column_start":61,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":177423,"byte_end":177444,"line_start":572,"line_end":572,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":177899,"byte_end":177911,"line_start":586,"line_end":586,"column_start":47,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":720},{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":178642,"byte_end":178654,"line_start":608,"line_end":608,"column_start":61,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":178991,"byte_end":179012,"line_start":620,"line_end":620,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":179465,"byte_end":179477,"line_start":634,"line_end":634,"column_start":47,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":180208,"byte_end":180220,"line_start":656,"line_end":656,"column_start":61,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":180794,"byte_end":180801,"line_start":681,"line_end":681,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":182084,"byte_end":182091,"line_start":717,"line_end":717,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":182243,"byte_end":182250,"line_start":723,"line_end":723,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":182500,"byte_end":182507,"line_start":730,"line_end":730,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":183106,"byte_end":183115,"line_start":751,"line_end":751,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":184741,"byte_end":184750,"line_start":792,"line_end":792,"column_start":56,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":184904,"byte_end":184913,"line_start":798,"line_end":798,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":185165,"byte_end":185174,"line_start":805,"line_end":805,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":208489,"byte_end":208497,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":227200,"byte_end":227208,"line_start":309,"line_end":309,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":227653,"byte_end":227661,"line_start":325,"line_end":325,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242781,"byte_end":242794,"line_start":71,"line_end":71,"column_start":11,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242959,"byte_end":242972,"line_start":80,"line_end":80,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":243750,"byte_end":243765,"line_start":107,"line_end":107,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":244422,"byte_end":244437,"line_start":133,"line_end":133,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":245159,"byte_end":245173,"line_start":158,"line_end":158,"column_start":11,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":245397,"byte_end":245411,"line_start":169,"line_end":169,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":246289,"byte_end":246308,"line_start":200,"line_end":200,"column_start":11,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":246572,"byte_end":246591,"line_start":211,"line_end":211,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":247607,"byte_end":247623,"line_start":250,"line_end":250,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":247983,"byte_end":247999,"line_start":265,"line_end":265,"column_start":22,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":249558,"byte_end":249566,"line_start":28,"line_end":28,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":251181,"byte_end":251189,"line_start":87,"line_end":87,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":256755,"byte_end":256763,"line_start":242,"line_end":242,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":257479,"byte_end":257487,"line_start":263,"line_end":263,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":257714,"byte_end":257722,"line_start":270,"line_end":270,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs","byte_start":276731,"byte_end":276747,"line_start":23,"line_end":23,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs","byte_start":277453,"byte_end":277469,"line_start":48,"line_end":48,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1051}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs","byte_start":277997,"byte_end":278013,"line_start":63,"line_end":63,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":494640,"byte_end":494641,"line_start":220,"line_end":220,"column_start":23,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1121},{"krate":0,"index":1123},{"krate":0,"index":1125}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":503421,"byte_end":503434,"line_start":449,"line_end":449,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":503488,"byte_end":503501,"line_start":451,"line_end":451,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":503890,"byte_end":503904,"line_start":470,"line_end":470,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1155}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":503959,"byte_end":503973,"line_start":472,"line_end":472,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1157}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":504803,"byte_end":504804,"line_start":495,"line_end":495,"column_start":43,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":508222,"byte_end":508224,"line_start":17,"line_end":17,"column_start":20,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":508412,"byte_end":508414,"line_start":24,"line_end":24,"column_start":13,"column_end":15},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":509241,"byte_end":509243,"line_start":51,"line_end":51,"column_start":14,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1207},{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":510441,"byte_end":510443,"line_start":103,"line_end":103,"column_start":14,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":511641,"byte_end":511643,"line_start":155,"line_end":155,"column_start":14,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":522454,"byte_end":522456,"line_start":403,"line_end":403,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1233},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":547385,"byte_end":547391,"line_start":1103,"line_end":1103,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1248},{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":547751,"byte_end":547755,"line_start":1124,"line_end":1124,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":551280,"byte_end":551284,"line_start":1246,"line_end":1246,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":553027,"byte_end":553031,"line_start":1320,"line_end":1320,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":553551,"byte_end":553555,"line_start":1340,"line_end":1340,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1273}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":554050,"byte_end":554054,"line_start":1359,"line_end":1359,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":554574,"byte_end":554578,"line_start":1379,"line_end":1379,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1278},{"krate":0,"index":1279}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":555295,"byte_end":555304,"line_start":1408,"line_end":1408,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":690311,"byte_end":690327,"line_start":79,"line_end":79,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1432},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":692708,"byte_end":692712,"line_start":156,"line_end":156,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":693394,"byte_end":693401,"line_start":186,"line_end":186,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1452},{"krate":0,"index":1454}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":694163,"byte_end":694170,"line_start":209,"line_end":209,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1458}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":695738,"byte_end":695745,"line_start":253,"line_end":253,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1462},{"krate":0,"index":1463}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":707856,"byte_end":707861,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1501}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":709986,"byte_end":709991,"line_start":93,"line_end":93,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1506},{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":710328,"byte_end":710333,"line_start":111,"line_end":111,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1509}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":710629,"byte_end":710639,"line_start":123,"line_end":123,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1511}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":711680,"byte_end":711685,"line_start":161,"line_end":161,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1517},{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":713564,"byte_end":713574,"line_start":234,"line_end":234,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":714323,"byte_end":714328,"line_start":259,"line_end":259,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1534}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":729630,"byte_end":729635,"line_start":24,"line_end":24,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1573}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":729681,"byte_end":729686,"line_start":26,"line_end":26,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1575},{"krate":0,"index":1579},{"krate":0,"index":1582},{"krate":0,"index":1583}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":732769,"byte_end":732774,"line_start":120,"line_end":120,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1587}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":734499,"byte_end":734504,"line_start":166,"line_end":166,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1589}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":734731,"byte_end":734736,"line_start":173,"line_end":173,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs","byte_start":741122,"byte_end":741126,"line_start":61,"line_end":61,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1622}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs","byte_start":741600,"byte_end":741604,"line_start":82,"line_end":82,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756112,"byte_end":756121,"line_start":56,"line_end":56,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756791,"byte_end":756800,"line_start":84,"line_end":84,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1668}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756957,"byte_end":756966,"line_start":92,"line_end":92,"column_start":13,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","byte_start":757769,"byte_end":757777,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1696}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","byte_start":762369,"byte_end":762372,"line_start":163,"line_end":163,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1715}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","byte_start":762637,"byte_end":762640,"line_start":175,"line_end":175,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1717},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1723}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs","byte_start":779229,"byte_end":779237,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1799},{"krate":0,"index":1804},{"krate":0,"index":1805}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs","byte_start":784536,"byte_end":784544,"line_start":163,"line_end":163,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1813}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":792568,"byte_end":792571,"line_start":23,"line_end":23,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1842}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":792615,"byte_end":792618,"line_start":25,"line_end":25,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1844},{"krate":0,"index":1846}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":793425,"byte_end":793428,"line_start":48,"line_end":48,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":793671,"byte_end":793674,"line_start":57,"line_end":57,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1850}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":793901,"byte_end":793904,"line_start":64,"line_end":64,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1852}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs","byte_start":814761,"byte_end":814770,"line_start":333,"line_end":333,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1885}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs","byte_start":815081,"byte_end":815090,"line_start":347,"line_end":347,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1888},{"krate":0,"index":1889},{"krate":0,"index":1891},{"krate":0,"index":1893},{"krate":0,"index":1894}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":822499,"byte_end":822506,"line_start":29,"line_end":29,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1939}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":824164,"byte_end":824171,"line_start":82,"line_end":82,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1951},{"krate":0,"index":1953},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":828574,"byte_end":828581,"line_start":213,"line_end":213,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1960}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":829295,"byte_end":829302,"line_start":234,"line_end":234,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":829529,"byte_end":829536,"line_start":241,"line_end":241,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1964}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":840267,"byte_end":840279,"line_start":152,"line_end":152,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2032}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":866264,"byte_end":866268,"line_start":390,"line_end":390,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2103}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":866562,"byte_end":866566,"line_start":404,"line_end":404,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2106},{"krate":0,"index":2107},{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2110}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893648,"byte_end":893662,"line_start":652,"line_end":652,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2193},{"krate":0,"index":2195},{"krate":0,"index":2197}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":897137,"byte_end":897146,"line_start":716,"line_end":716,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2203},{"krate":0,"index":2205},{"krate":0,"index":2207},{"krate":0,"index":2209}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":898594,"byte_end":898600,"line_start":767,"line_end":767,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2212}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":898796,"byte_end":898802,"line_start":778,"line_end":778,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2218}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":900032,"byte_end":900038,"line_start":823,"line_end":823,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2222}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":900234,"byte_end":900240,"line_start":834,"line_end":834,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2224},{"krate":0,"index":2225},{"krate":0,"index":2226},{"krate":0,"index":2227},{"krate":0,"index":2228}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":901354,"byte_end":901368,"line_start":877,"line_end":877,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2232}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":901594,"byte_end":901608,"line_start":888,"line_end":888,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2238}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":902614,"byte_end":902628,"line_start":929,"line_end":929,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2242}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":902854,"byte_end":902868,"line_start":940,"line_end":940,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2244},{"krate":0,"index":2245},{"krate":0,"index":2246},{"krate":0,"index":2247},{"krate":0,"index":2248}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":903886,"byte_end":903900,"line_start":982,"line_end":982,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2252},{"krate":0,"index":2254},{"krate":0,"index":2256}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":906240,"byte_end":906249,"line_start":1048,"line_end":1048,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2262},{"krate":0,"index":2264},{"krate":0,"index":2266},{"krate":0,"index":2268}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":907629,"byte_end":907635,"line_start":1095,"line_end":1095,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2271}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":907831,"byte_end":907837,"line_start":1106,"line_end":1106,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":909000,"byte_end":909006,"line_start":1151,"line_end":1151,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2281}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":909202,"byte_end":909208,"line_start":1162,"line_end":1162,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2287}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922948,"byte_end":922956,"line_start":164,"line_end":164,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2326},{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2329}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":924643,"byte_end":924647,"line_start":216,"line_end":216,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2338},{"krate":0,"index":2340},{"krate":0,"index":2341},{"krate":0,"index":2342},{"krate":0,"index":2343},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":2347},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350},{"krate":0,"index":2354}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":927899,"byte_end":927903,"line_start":346,"line_end":346,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":930321,"byte_end":930325,"line_start":446,"line_end":446,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":930347,"byte_end":930351,"line_start":450,"line_end":450,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2363}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2080548,"byte_end":2080553,"line_start":13,"line_end":13,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2080995,"byte_end":2081000,"line_start":30,"line_end":30,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2394},{"krate":0,"index":2395}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2081306,"byte_end":2081311,"line_start":42,"line_end":42,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2397},{"krate":0,"index":2398}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2081620,"byte_end":2081625,"line_start":54,"line_end":54,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2400},{"krate":0,"index":2401}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2081823,"byte_end":2081828,"line_start":62,"line_end":62,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2403},{"krate":0,"index":2404}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2082026,"byte_end":2082031,"line_start":70,"line_end":70,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2406},{"krate":0,"index":2407}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2082234,"byte_end":2082239,"line_start":78,"line_end":78,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2409},{"krate":0,"index":2410}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2082435,"byte_end":2082440,"line_start":86,"line_end":86,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2412},{"krate":0,"index":2413}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2082644,"byte_end":2082649,"line_start":94,"line_end":94,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2415},{"krate":0,"index":2416}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2082845,"byte_end":2082850,"line_start":102,"line_end":102,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2418},{"krate":0,"index":2419}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2083150,"byte_end":2083155,"line_start":114,"line_end":114,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2421},{"krate":0,"index":2422}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2090776,"byte_end":2090785,"line_start":161,"line_end":161,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2465}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2090835,"byte_end":2090844,"line_start":163,"line_end":163,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2467},{"krate":0,"index":2472},{"krate":0,"index":2473}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2139393,"byte_end":2139402,"line_start":2306,"line_end":2306,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2485}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2139645,"byte_end":2139654,"line_start":2315,"line_end":2315,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2487}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2139881,"byte_end":2139890,"line_start":2322,"line_end":2322,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2489}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs","byte_start":2148720,"byte_end":2148726,"line_start":20,"line_end":20,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2500},{"krate":0,"index":2501}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs","byte_start":2149147,"byte_end":2149152,"line_start":40,"line_end":40,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2507}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150934,"byte_end":2150937,"line_start":51,"line_end":51,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2541}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2151129,"byte_end":2151132,"line_start":58,"line_end":58,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2543}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2151394,"byte_end":2151397,"line_start":65,"line_end":65,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2545}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs","byte_start":2155382,"byte_end":2155391,"line_start":50,"line_end":50,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2576}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs","byte_start":2155611,"byte_end":2155620,"line_start":61,"line_end":61,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2580},{"krate":0,"index":2582},{"krate":0,"index":2585},{"krate":0,"index":2588},{"krate":0,"index":2589}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2208785,"byte_end":2208799,"line_start":18,"line_end":18,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2640}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2208953,"byte_end":2208967,"line_start":26,"line_end":26,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2642}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2209166,"byte_end":2209180,"line_start":31,"line_end":31,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2645}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2209979,"byte_end":2209993,"line_start":52,"line_end":52,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2648}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2210812,"byte_end":2210826,"line_start":74,"line_end":74,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2651},{"krate":0,"index":2652}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2211063,"byte_end":2211077,"line_start":81,"line_end":81,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2654},{"krate":0,"index":2655}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":525,"byte_end":529,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":539,"byte_end":542,"line_start":18,"line_end":18,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":12}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":552,"byte_end":559,"line_start":19,"line_end":19,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":63}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":569,"byte_end":576,"line_start":20,"line_end":20,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":111}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":586,"byte_end":592,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":291}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":602,"byte_end":614,"line_start":22,"line_end":22,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":304}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":624,"byte_end":631,"line_start":23,"line_end":23,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":335}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":641,"byte_end":648,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":428}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":658,"byte_end":668,"line_start":25,"line_end":25,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":521}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":678,"byte_end":686,"line_start":26,"line_end":26,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":786}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":696,"byte_end":702,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":819}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":712,"byte_end":720,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":949}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":730,"byte_end":746,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":1018}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":772,"byte_end":782,"line_start":31,"line_end":31,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1166}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":792,"byte_end":798,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1302}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":808,"byte_end":815,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1318}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":825,"byte_end":832,"line_start":34,"line_end":34,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1391}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":842,"byte_end":847,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1464}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":857,"byte_end":862,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1535}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":872,"byte_end":876,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1592}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":886,"byte_end":890,"line_start":38,"line_end":38,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1630}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":900,"byte_end":903,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1650}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":913,"byte_end":916,"line_start":40,"line_end":40,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1670}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":926,"byte_end":932,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1724}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":942,"byte_end":950,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1780}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":960,"byte_end":963,"line_start":43,"line_end":43,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1814}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":973,"byte_end":982,"line_start":44,"line_end":44,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1853}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":992,"byte_end":999,"line_start":45,"line_end":45,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1895}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":1009,"byte_end":1015,"line_start":46,"line_end":46,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1967}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":1025,"byte_end":1029,"line_start":47,"line_end":47,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2041}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":1039,"byte_end":1043,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2111}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":1053,"byte_end":1057,"line_start":49,"line_end":49,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2290}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":1077,"byte_end":1086,"line_start":51,"line_end":51,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2423}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":1109,"byte_end":1124,"line_start":53,"line_end":53,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":2508}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":1134,"byte_end":1138,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2546}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":1148,"byte_end":1157,"line_start":55,"line_end":55,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2558}},{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/lib.rs","byte_start":1225,"byte_end":1230,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2615}}],"macro_refs":[],"relations":[{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs","byte_start":33516,"byte_end":33522,"line_start":21,"line_end":21,"column_start":10,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":91},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs","byte_start":34953,"byte_end":34959,"line_start":55,"line_end":55,"column_start":28,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":91},"to":{"krate":0,"index":8}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aes_gcm.rs","byte_start":35378,"byte_end":35384,"line_start":68,"line_end":68,"column_start":28,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":91},"to":{"krate":0,"index":10}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":62228,"byte_end":62236,"line_start":459,"line_end":459,"column_start":16,"column_end":24},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":62460,"byte_end":62468,"line_start":466,"line_end":466,"column_start":37,"column_end":45},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":67703,"byte_end":67711,"line_start":617,"line_end":617,"column_start":34,"column_end":42},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":68452,"byte_end":68460,"line_start":640,"line_end":640,"column_start":16,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":68850,"byte_end":68858,"line_start":653,"line_end":653,"column_start":37,"column_end":45},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":69126,"byte_end":69134,"line_start":664,"line_end":664,"column_start":10,"column_end":18},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2892},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":69436,"byte_end":69444,"line_start":677,"line_end":677,"column_start":37,"column_end":45},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2892},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":80852,"byte_end":80860,"line_start":933,"line_end":933,"column_start":69,"column_end":77},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2892},"to":{"krate":0,"index":229}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":81874,"byte_end":81882,"line_start":979,"line_end":979,"column_start":69,"column_end":77},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2880},"to":{"krate":0,"index":242}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":82760,"byte_end":82768,"line_start":1014,"line_end":1014,"column_start":79,"column_end":87},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2864},"to":{"krate":0,"index":251}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":83069,"byte_end":83077,"line_start":1026,"line_end":1026,"column_start":54,"column_end":62},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2864},"to":{"krate":0,"index":173}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":86649,"byte_end":86655,"line_start":1128,"line_end":1128,"column_start":23,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3160},"to":{"krate":0,"index":265}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":86673,"byte_end":86679,"line_start":1128,"line_end":1128,"column_start":47,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":3150},"to":{"krate":0,"index":265}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":86697,"byte_end":86700,"line_start":1128,"line_end":1128,"column_start":71,"column_end":74},"kind":"SuperTrait","from":{"krate":2,"index":3143},"to":{"krate":0,"index":265}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":86718,"byte_end":86725,"line_start":1128,"line_end":1128,"column_start":92,"column_end":99},"kind":"SuperTrait","from":{"krate":2,"index":3002},"to":{"krate":0,"index":265}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":86728,"byte_end":86733,"line_start":1128,"line_end":1128,"column_start":102,"column_end":107},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":265}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":88086,"byte_end":88091,"line_start":1172,"line_end":1172,"column_start":6,"column_end":11},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3341},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":88603,"byte_end":88608,"line_start":1192,"line_end":1192,"column_start":14,"column_end":19},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3341},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":88714,"byte_end":88719,"line_start":1200,"line_end":1200,"column_start":18,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3341},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aessafe.rs","byte_start":88809,"byte_end":88814,"line_start":1206,"line_end":1206,"column_start":25,"column_end":30},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3341},"to":{"krate":0,"index":265}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":117212,"byte_end":117219,"line_start":56,"line_end":56,"column_start":16,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2902},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":118442,"byte_end":118449,"line_start":96,"line_end":96,"column_start":6,"column_end":13},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":126149,"byte_end":126156,"line_start":339,"line_end":339,"column_start":17,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2902},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2b.rs","byte_start":126482,"byte_end":126489,"line_start":347,"line_end":347,"column_start":14,"column_end":21},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2902},"to":{"krate":0,"index":1654}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":136713,"byte_end":136720,"line_start":52,"line_end":52,"column_start":16,"column_end":23},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2941},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":137920,"byte_end":137927,"line_start":91,"line_end":91,"column_start":6,"column_end":13},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":145436,"byte_end":145443,"line_start":329,"line_end":329,"column_start":17,"column_end":24},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2941},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blake2s.rs","byte_start":145769,"byte_end":145776,"line_start":337,"line_end":337,"column_start":14,"column_end":21},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2941},"to":{"krate":0,"index":1654}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":157138,"byte_end":157149,"line_start":107,"line_end":107,"column_start":47,"column_end":58},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":172387,"byte_end":172396,"line_start":423,"line_end":423,"column_start":27,"column_end":36},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2998},"to":{"krate":0,"index":595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":173249,"byte_end":173260,"line_start":439,"line_end":439,"column_start":27,"column_end":38},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3003},"to":{"krate":0,"index":595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":174142,"byte_end":174152,"line_start":468,"line_end":468,"column_start":28,"column_end":38},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":174274,"byte_end":174284,"line_start":472,"line_end":472,"column_start":49,"column_end":59},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":174607,"byte_end":174617,"line_start":482,"line_end":482,"column_start":28,"column_end":38},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":174739,"byte_end":174749,"line_start":486,"line_end":486,"column_start":49,"column_end":59},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":656},"to":{"krate":0,"index":595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":175008,"byte_end":175029,"line_start":495,"line_end":495,"column_start":45,"column_end":66},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":668},"to":{"krate":0,"index":593}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":175343,"byte_end":175355,"line_start":506,"line_end":506,"column_start":47,"column_end":59},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":175876,"byte_end":175888,"line_start":522,"line_end":522,"column_start":61,"column_end":73},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":674},"to":{"krate":0,"index":2534}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":176206,"byte_end":176227,"line_start":533,"line_end":533,"column_start":45,"column_end":66},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":687},"to":{"krate":0,"index":593}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":176541,"byte_end":176553,"line_start":544,"line_end":544,"column_start":47,"column_end":59},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":693},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":177074,"byte_end":177086,"line_start":560,"line_end":560,"column_start":61,"column_end":73},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":693},"to":{"krate":0,"index":2536}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":177423,"byte_end":177444,"line_start":572,"line_end":572,"column_start":45,"column_end":66},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":706},"to":{"krate":0,"index":593}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":177899,"byte_end":177911,"line_start":586,"line_end":586,"column_start":47,"column_end":59},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":713},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":178642,"byte_end":178654,"line_start":608,"line_end":608,"column_start":61,"column_end":73},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":713},"to":{"krate":0,"index":2534}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":178991,"byte_end":179012,"line_start":620,"line_end":620,"column_start":45,"column_end":66},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":726},"to":{"krate":0,"index":593}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":179465,"byte_end":179477,"line_start":634,"line_end":634,"column_start":47,"column_end":59},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":733},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":180208,"byte_end":180220,"line_start":656,"line_end":656,"column_start":61,"column_end":73},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":733},"to":{"krate":0,"index":2536}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":180794,"byte_end":180801,"line_start":681,"line_end":681,"column_start":26,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":182084,"byte_end":182091,"line_start":717,"line_end":717,"column_start":54,"column_end":61},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":747},"to":{"krate":0,"index":2538}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":182243,"byte_end":182250,"line_start":723,"line_end":723,"column_start":40,"column_end":47},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":747},"to":{"krate":0,"index":2534}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":182500,"byte_end":182507,"line_start":730,"line_end":730,"column_start":40,"column_end":47},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":747},"to":{"krate":0,"index":2536}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":183106,"byte_end":183115,"line_start":751,"line_end":751,"column_start":28,"column_end":37},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":184741,"byte_end":184750,"line_start":792,"line_end":792,"column_start":56,"column_end":65},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":766},"to":{"krate":0,"index":2538}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":184904,"byte_end":184913,"line_start":798,"line_end":798,"column_start":42,"column_end":51},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":766},"to":{"krate":0,"index":2534}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blockmodes.rs","byte_start":185165,"byte_end":185174,"line_start":805,"line_end":805,"column_start":42,"column_end":51},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":766},"to":{"krate":0,"index":2536}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":208489,"byte_end":208497,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3008},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":227200,"byte_end":227208,"line_start":309,"line_end":309,"column_start":25,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3008},"to":{"krate":0,"index":2522}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/blowfish.rs","byte_start":227653,"byte_end":227661,"line_start":325,"line_end":325,"column_start":25,"column_end":33},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3008},"to":{"krate":0,"index":2528}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242781,"byte_end":242794,"line_start":71,"line_end":71,"column_start":11,"column_end":24},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":853},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":242959,"byte_end":242972,"line_start":80,"line_end":80,"column_start":26,"column_end":39},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":853},"to":{"krate":0,"index":826}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":243750,"byte_end":243765,"line_start":107,"line_end":107,"column_start":6,"column_end":21},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":244422,"byte_end":244437,"line_start":133,"line_end":133,"column_start":21,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":871},"to":{"krate":0,"index":826}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":245159,"byte_end":245173,"line_start":158,"line_end":158,"column_start":11,"column_end":25},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":891},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":245397,"byte_end":245411,"line_start":169,"line_end":169,"column_start":27,"column_end":41},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":891},"to":{"krate":0,"index":841}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":246289,"byte_end":246308,"line_start":200,"line_end":200,"column_start":11,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":246572,"byte_end":246591,"line_start":211,"line_end":211,"column_start":27,"column_end":46},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":910},"to":{"krate":0,"index":841}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":247607,"byte_end":247623,"line_start":250,"line_end":250,"column_start":6,"column_end":22},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/buffer.rs","byte_start":247983,"byte_end":247999,"line_start":265,"line_end":265,"column_start":22,"column_end":38},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":929},"to":{"krate":0,"index":841}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":249558,"byte_end":249566,"line_start":28,"line_end":28,"column_start":16,"column_end":24},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":3036},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":251181,"byte_end":251189,"line_start":87,"line_end":87,"column_start":6,"column_end":14},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":3036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":256755,"byte_end":256763,"line_start":242,"line_end":242,"column_start":34,"column_end":42},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":2538}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":257479,"byte_end":257487,"line_start":263,"line_end":263,"column_start":20,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":2534}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20.rs","byte_start":257714,"byte_end":257722,"line_start":270,"line_end":270,"column_start":20,"column_end":28},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":2536}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs","byte_start":276731,"byte_end":276747,"line_start":23,"line_end":23,"column_start":6,"column_end":22},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3042},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs","byte_start":277453,"byte_end":277469,"line_start":48,"line_end":48,"column_start":24,"column_end":40},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3042},"to":{"krate":0,"index":8}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/chacha20poly1305.rs","byte_start":277997,"byte_end":278013,"line_start":63,"line_end":63,"column_start":24,"column_end":40},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3042},"to":{"krate":0,"index":10}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":494640,"byte_end":494641,"line_start":220,"line_end":220,"column_start":23,"column_end":24},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1117},"to":{"krate":0,"index":1110}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":503421,"byte_end":503434,"line_start":449,"line_end":449,"column_start":16,"column_end":29},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3050},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":503488,"byte_end":503501,"line_start":451,"line_end":451,"column_start":6,"column_end":19},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":503890,"byte_end":503904,"line_start":470,"line_end":470,"column_start":16,"column_end":30},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3069},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":503959,"byte_end":503973,"line_start":472,"line_end":472,"column_start":6,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3069},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/cryptoutil.rs","byte_start":504803,"byte_end":504804,"line_start":495,"line_end":495,"column_start":43,"column_end":44},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1163},"to":{"krate":0,"index":1159}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":508222,"byte_end":508224,"line_start":17,"line_end":17,"column_start":20,"column_end":22},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3088},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":508412,"byte_end":508414,"line_start":24,"line_end":24,"column_start":13,"column_end":15},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":3088},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":509241,"byte_end":509243,"line_start":51,"line_end":51,"column_start":14,"column_end":16},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":3088},"to":{"krate":2,"index":3091}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":510441,"byte_end":510443,"line_start":103,"line_end":103,"column_start":14,"column_end":16},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3088},"to":{"krate":2,"index":3096}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":511641,"byte_end":511643,"line_start":155,"line_end":155,"column_start":14,"column_end":16},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3088},"to":{"krate":2,"index":3101}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":522454,"byte_end":522456,"line_start":403,"line_end":403,"column_start":6,"column_end":8},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":547385,"byte_end":547391,"line_start":1103,"line_end":1103,"column_start":6,"column_end":12},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":547751,"byte_end":547755,"line_start":1124,"line_end":1124,"column_start":6,"column_end":10},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":3096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":551280,"byte_end":551284,"line_start":1246,"line_end":1246,"column_start":6,"column_end":10},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":3103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":553027,"byte_end":553031,"line_start":1320,"line_end":1320,"column_start":24,"column_end":28},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3103},"to":{"krate":2,"index":3091}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":553551,"byte_end":553555,"line_start":1340,"line_end":1340,"column_start":25,"column_end":29},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3103},"to":{"krate":2,"index":3091}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":554050,"byte_end":554054,"line_start":1359,"line_end":1359,"column_start":24,"column_end":28},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3103},"to":{"krate":2,"index":3096}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":554574,"byte_end":554578,"line_start":1379,"line_end":1379,"column_start":25,"column_end":29},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":3103},"to":{"krate":2,"index":3096}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/curve25519.rs","byte_start":555295,"byte_end":555304,"line_start":1408,"line_end":1408,"column_start":6,"column_end":15},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":690311,"byte_end":690327,"line_start":79,"line_end":79,"column_start":6,"column_end":22},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":692708,"byte_end":692712,"line_start":156,"line_end":156,"column_start":6,"column_end":10},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":3135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":693394,"byte_end":693401,"line_start":186,"line_end":186,"column_start":6,"column_end":13},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":694163,"byte_end":694170,"line_start":209,"line_end":209,"column_start":14,"column_end":21},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1445},"to":{"krate":21,"index":872}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/fortuna.rs","byte_start":695738,"byte_end":695745,"line_start":253,"line_end":253,"column_start":36,"column_end":43},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1445},"to":{"krate":21,"index":927}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":707856,"byte_end":707861,"line_start":31,"line_end":31,"column_start":6,"column_end":11},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":3141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":709986,"byte_end":709991,"line_start":93,"line_end":93,"column_start":17,"column_end":22},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":3141},"to":{"krate":2,"index":3160}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":710328,"byte_end":710333,"line_start":111,"line_end":111,"column_start":16,"column_end":21},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":3146},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":710629,"byte_end":710639,"line_start":123,"line_end":123,"column_start":16,"column_end":26},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":3155},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":711680,"byte_end":711685,"line_start":161,"line_end":161,"column_start":6,"column_end":11},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":3146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":713564,"byte_end":713574,"line_start":234,"line_end":234,"column_start":6,"column_end":16},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":3155},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ghash.rs","byte_start":714323,"byte_end":714328,"line_start":259,"line_end":259,"column_start":14,"column_end":19},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":3146},"to":{"krate":0,"index":1654}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":729630,"byte_end":729635,"line_start":24,"line_end":24,"column_start":16,"column_end":21},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3164},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":729681,"byte_end":729686,"line_start":26,"line_end":26,"column_start":6,"column_end":11},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":732769,"byte_end":732774,"line_start":120,"line_end":120,"column_start":34,"column_end":39},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":2538}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":734499,"byte_end":734504,"line_start":166,"line_end":166,"column_start":20,"column_end":25},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":2534}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hc128.rs","byte_start":734731,"byte_end":734736,"line_start":173,"line_end":173,"column_start":20,"column_end":25},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":2536}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs","byte_start":741122,"byte_end":741126,"line_start":61,"line_end":61,"column_start":18,"column_end":22},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/hmac.rs","byte_start":741600,"byte_end":741604,"line_start":82,"line_end":82,"column_start":26,"column_end":30},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1609},"to":{"krate":0,"index":1654}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756112,"byte_end":756121,"line_start":56,"line_end":56,"column_start":6,"column_end":15},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756791,"byte_end":756800,"line_start":84,"line_end":84,"column_start":20,"column_end":29},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1660},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/mac.rs","byte_start":756957,"byte_end":756966,"line_start":92,"line_end":92,"column_start":13,"column_end":22},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1660},"to":{"krate":2,"index":2680}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","byte_start":757769,"byte_end":757777,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","byte_start":762369,"byte_end":762372,"line_start":163,"line_end":163,"column_start":6,"column_end":9},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":3182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/md5.rs","byte_start":762637,"byte_end":762640,"line_start":175,"line_end":175,"column_start":17,"column_end":20},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":3182},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs","byte_start":779229,"byte_end":779237,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":3190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/poly1305.rs","byte_start":784536,"byte_end":784544,"line_start":163,"line_end":163,"column_start":14,"column_end":22},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":3190},"to":{"krate":0,"index":1654}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":792568,"byte_end":792571,"line_start":23,"line_end":23,"column_start":16,"column_end":19},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":3208},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":792615,"byte_end":792618,"line_start":25,"line_end":25,"column_start":6,"column_end":9},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":3208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":793425,"byte_end":793428,"line_start":48,"line_end":48,"column_start":34,"column_end":37},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":3208},"to":{"krate":0,"index":2538}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":793671,"byte_end":793674,"line_start":57,"line_end":57,"column_start":20,"column_end":23},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":3208},"to":{"krate":0,"index":2534}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/rc4.rs","byte_start":793901,"byte_end":793904,"line_start":64,"line_end":64,"column_start":20,"column_end":23},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":3208},"to":{"krate":0,"index":2536}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs","byte_start":814761,"byte_end":814770,"line_start":333,"line_end":333,"column_start":6,"column_end":15},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":3214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/ripemd160.rs","byte_start":815081,"byte_end":815090,"line_start":347,"line_end":347,"column_start":17,"column_end":26},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3214},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":822499,"byte_end":822506,"line_start":29,"line_end":29,"column_start":16,"column_end":23},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3232},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":824164,"byte_end":824171,"line_start":82,"line_end":82,"column_start":6,"column_end":13},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":828574,"byte_end":828581,"line_start":213,"line_end":213,"column_start":34,"column_end":41},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3232},"to":{"krate":0,"index":2538}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":829295,"byte_end":829302,"line_start":234,"line_end":234,"column_start":20,"column_end":27},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3232},"to":{"krate":0,"index":2534}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/salsa20.rs","byte_start":829529,"byte_end":829536,"line_start":241,"line_end":241,"column_start":20,"column_end":27},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3232},"to":{"krate":0,"index":2536}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/scrypt.rs","byte_start":840267,"byte_end":840279,"line_start":152,"line_end":152,"column_start":6,"column_end":18},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":866264,"byte_end":866268,"line_start":390,"line_end":390,"column_start":6,"column_end":10},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha1.rs","byte_start":866562,"byte_end":866566,"line_start":404,"line_end":404,"column_start":17,"column_end":21},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":3245},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":893648,"byte_end":893662,"line_start":652,"line_end":652,"column_start":6,"column_end":20},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":3255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":897137,"byte_end":897146,"line_start":716,"line_end":716,"column_start":6,"column_end":15},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":3262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":898594,"byte_end":898600,"line_start":767,"line_end":767,"column_start":6,"column_end":12},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":898796,"byte_end":898802,"line_start":778,"line_end":778,"column_start":17,"column_end":23},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":3270},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":900032,"byte_end":900038,"line_start":823,"line_end":823,"column_start":6,"column_end":12},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":3275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":900234,"byte_end":900240,"line_start":834,"line_end":834,"column_start":17,"column_end":23},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":3275},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":901354,"byte_end":901368,"line_start":877,"line_end":877,"column_start":6,"column_end":20},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":901594,"byte_end":901608,"line_start":888,"line_end":888,"column_start":17,"column_end":31},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3280},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":902614,"byte_end":902628,"line_start":929,"line_end":929,"column_start":6,"column_end":20},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3285},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":902854,"byte_end":902868,"line_start":940,"line_end":940,"column_start":17,"column_end":31},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3285},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":903886,"byte_end":903900,"line_start":982,"line_end":982,"column_start":6,"column_end":20},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":906240,"byte_end":906249,"line_start":1048,"line_end":1048,"column_start":6,"column_end":15},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":907629,"byte_end":907635,"line_start":1095,"line_end":1095,"column_start":6,"column_end":12},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":907831,"byte_end":907837,"line_start":1106,"line_end":1106,"column_start":17,"column_end":23},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3305},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":909000,"byte_end":909006,"line_start":1151,"line_end":1151,"column_start":6,"column_end":12},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha2.rs","byte_start":909202,"byte_end":909208,"line_start":1162,"line_end":1162,"column_start":17,"column_end":23},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3310},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":922948,"byte_end":922956,"line_start":164,"line_end":164,"column_start":6,"column_end":14},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":924643,"byte_end":924647,"line_start":216,"line_end":216,"column_start":6,"column_end":10},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":2330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":927899,"byte_end":927903,"line_start":346,"line_end":346,"column_start":17,"column_end":21},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":2330},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":930321,"byte_end":930325,"line_start":446,"line_end":446,"column_start":15,"column_end":19},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":2330},"to":{"krate":2,"index":3034}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sha3.rs","byte_start":930347,"byte_end":930351,"line_start":450,"line_end":450,"column_start":16,"column_end":20},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":2330},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2080548,"byte_end":2080553,"line_start":13,"line_end":13,"column_start":24,"column_end":29},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3341},"to":{"krate":0,"index":2366}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2080995,"byte_end":2081000,"line_start":30,"line_end":30,"column_start":18,"column_end":23},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3341},"to":{"krate":2,"index":3091}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2081306,"byte_end":2081311,"line_start":42,"line_end":42,"column_start":18,"column_end":23},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3341},"to":{"krate":2,"index":3096}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2081620,"byte_end":2081625,"line_start":54,"line_end":54,"column_start":21,"column_end":26},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3341},"to":{"krate":2,"index":3150}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2081823,"byte_end":2081828,"line_start":62,"line_end":62,"column_start":20,"column_end":25},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3341},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2082026,"byte_end":2082031,"line_start":70,"line_end":70,"column_start":21,"column_end":26},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3341},"to":{"krate":2,"index":3160}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2082234,"byte_end":2082239,"line_start":78,"line_end":78,"column_start":25,"column_end":30},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3341},"to":{"krate":2,"index":3165}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2082435,"byte_end":2082440,"line_start":86,"line_end":86,"column_start":25,"column_end":30},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3341},"to":{"krate":2,"index":3165}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2082644,"byte_end":2082649,"line_start":94,"line_end":94,"column_start":25,"column_end":30},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3341},"to":{"krate":2,"index":3171}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2082845,"byte_end":2082850,"line_start":102,"line_end":102,"column_start":25,"column_end":30},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3341},"to":{"krate":2,"index":3171}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/simd.rs","byte_start":2083150,"byte_end":2083155,"line_start":114,"line_end":114,"column_start":18,"column_end":23},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3357},"to":{"krate":2,"index":3091}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2090776,"byte_end":2090785,"line_start":161,"line_end":161,"column_start":16,"column_end":25},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3364},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2090835,"byte_end":2090844,"line_start":163,"line_end":163,"column_start":6,"column_end":15},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2139393,"byte_end":2139402,"line_start":2306,"line_end":2306,"column_start":34,"column_end":43},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3364},"to":{"krate":0,"index":2538}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2139645,"byte_end":2139654,"line_start":2315,"line_end":2315,"column_start":20,"column_end":29},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3364},"to":{"krate":0,"index":2534}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/sosemanuk.rs","byte_start":2139881,"byte_end":2139890,"line_start":2322,"line_end":2322,"column_start":20,"column_end":29},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3364},"to":{"krate":0,"index":2536}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs","byte_start":2148720,"byte_end":2148726,"line_start":20,"line_end":20,"column_start":23,"column_end":29},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3375},"to":{"krate":2,"index":7907}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/step_by.rs","byte_start":2149147,"byte_end":2149152,"line_start":40,"line_end":40,"column_start":26,"column_end":31},"kind":{"Impl":{"id":175}},"from":{"krate":2,"index":44475},"to":{"krate":0,"index":2502}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2150934,"byte_end":2150937,"line_start":51,"line_end":51,"column_start":34,"column_end":37},"kind":{"Impl":{"id":176}},"from":{"krate":5,"index":315},"to":{"krate":0,"index":2538}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2151129,"byte_end":2151132,"line_start":58,"line_end":58,"column_start":20,"column_end":23},"kind":{"Impl":{"id":177}},"from":{"krate":5,"index":315},"to":{"krate":0,"index":2534}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/symmetriccipher.rs","byte_start":2151394,"byte_end":2151397,"line_start":65,"line_end":65,"column_start":20,"column_end":23},"kind":{"Impl":{"id":178}},"from":{"krate":5,"index":315},"to":{"krate":0,"index":2536}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs","byte_start":2155382,"byte_end":2155391,"line_start":50,"line_end":50,"column_start":6,"column_end":15},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/whirlpool.rs","byte_start":2155611,"byte_end":2155620,"line_start":61,"line_end":61,"column_start":17,"column_end":26},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3393},"to":{"krate":0,"index":1306}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2208785,"byte_end":2208799,"line_start":18,"line_end":18,"column_start":16,"column_end":30},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3405},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2208953,"byte_end":2208967,"line_start":26,"line_end":26,"column_start":16,"column_end":30},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3410},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2209166,"byte_end":2209180,"line_start":31,"line_end":31,"column_start":6,"column_end":20},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2209979,"byte_end":2209993,"line_start":52,"line_end":52,"column_start":6,"column_end":20},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2210812,"byte_end":2210826,"line_start":74,"line_end":74,"column_start":25,"column_end":39},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3405},"to":{"krate":0,"index":2522}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/rust-crypto-0.2.36/src/aesni.rs","byte_start":2211063,"byte_end":2211077,"line_start":81,"line_end":81,"column_start":25,"column_end":39},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3410},"to":{"krate":0,"index":2528}}]}