{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42","program":"/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","num_iter","/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=79162321fde7f414","-C","extra-filename=-79162321fde7f414","--out-dir","/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps","-L","dependency=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps","--extern","num_integer=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/libnum_integer-f44788739337dc43.rmeta","--extern","num_traits=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/libnum_traits-64a358cf6817ed91.rmeta","--cap-lints","allow","--cfg","has_i128","--error-format=json","--sysroot","/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu"],"output":"/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/libnum_iter-79162321fde7f414.rmeta"},"prelude":{"crate_id":{"name":"num_iter","disambiguator":[3294122182667509606,0]},"crate_root":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src","external_crates":[{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":4,"id":{"name":"num_integer","disambiguator":[5572951265018790646,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":5,"id":{"name":"num_traits","disambiguator":[9133757288214617090,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":6,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":7,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":8,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":9,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":10,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":19,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":20,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","num":21,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}}],"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":472,"byte_end":20404,"line_start":11,"line_end":698,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":472,"byte_end":20404,"line_start":11,"line_end":698,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":80},{"krate":0,"index":85},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":41},{"krate":0,"index":88},{"krate":0,"index":92},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":51},{"krate":0,"index":95},{"krate":0,"index":101},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":104},{"krate":0,"index":111},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":114},{"krate":0,"index":118},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":121},{"krate":0,"index":125},{"krate":0,"index":73},{"krate":0,"index":75}],"decl_id":null,"docs":" External iterators for generic mathematics","sig":null,"attributes":[{"value":"/ External iterators for generic mathematics","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":472,"byte_end":518,"line_start":11,"line_end":11,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":519,"byte_end":522,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Compatibility","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":523,"byte_end":543,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":544,"byte_end":547,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The `num-iter` crate is tested for rustc 1.8 and greater.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":548,"byte_end":609,"line_start":15,"line_end":15,"column_start":1,"column_end":62}},{"value":"no_std","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":667,"byte_end":677,"line_start":18,"line_end":18,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":80},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":984,"byte_end":989,"line_start":32,"line_end":32,"column_start":12,"column_end":17},"name":"Range","qualname":"::Range","value":"Range {  }","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":" An iterator over the range [start, stop)\n","sig":null,"attributes":[{"value":"/ An iterator over the range [start, stop)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":911,"byte_end":955,"line_start":30,"line_end":30,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1374,"byte_end":1379,"line_start":52,"line_end":52,"column_start":8,"column_end":13},"name":"range","qualname":"::range","value":"pub fn range<A>(A, A) -> Range<A> where A: Add<A, Output = A> + PartialOrd +\nClone + One","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the given range [start, stop) (that is, starting\n at start (inclusive), and ending at stop (exclusive)).","sig":null,"attributes":[{"value":"/ Returns an iterator over the given range [start, stop) (that is, starting","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1037,"byte_end":1114,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"/ at start (inclusive), and ending at stop (exclusive)).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1115,"byte_end":1173,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1174,"byte_end":1177,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1178,"byte_end":1191,"line_start":41,"line_end":41,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1192,"byte_end":1195,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1196,"byte_end":1207,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/ let array = [0, 1, 2, 3, 4];","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1208,"byte_end":1240,"line_start":44,"line_end":44,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1241,"byte_end":1244,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ for i in num_iter::range(0, 5) {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1245,"byte_end":1281,"line_start":46,"line_end":46,"column_start":1,"column_end":37}},{"value":"/     println!(\"{}\", i);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1282,"byte_end":1308,"line_start":47,"line_end":47,"column_start":1,"column_end":27}},{"value":"/     assert_eq!(i,  array[i]);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1309,"byte_end":1342,"line_start":48,"line_end":48,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1343,"byte_end":1348,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1349,"byte_end":1356,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":1357,"byte_end":1366,"line_start":51,"line_end":51,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":3905,"byte_end":3919,"line_start":149,"line_end":149,"column_start":12,"column_end":26},"name":"RangeInclusive","qualname":"::RangeInclusive","value":"RangeInclusive {  }","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91}],"decl_id":null,"docs":" An iterator over the range [start, stop]\n","sig":null,"attributes":[{"value":"/ An iterator over the range [start, stop]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":3832,"byte_end":3876,"line_start":147,"line_end":147,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":44},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":4034,"byte_end":4049,"line_start":156,"line_end":156,"column_start":8,"column_end":23},"name":"range_inclusive","qualname":"::range_inclusive","value":"pub fn range_inclusive<A>(A, A) -> RangeInclusive<A> where A: Add<A, Output =\nA> + PartialOrd + Clone + One","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the range [start, stop]\n","sig":null,"attributes":[{"value":"/ Return an iterator over the range [start, stop]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":3965,"byte_end":4016,"line_start":154,"line_end":154,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":4017,"byte_end":4026,"line_start":155,"line_end":155,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":95},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":5836,"byte_end":5845,"line_start":224,"line_end":224,"column_start":12,"column_end":21},"name":"RangeStep","qualname":"::RangeStep","value":"RangeStep {  }","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"decl_id":null,"docs":" An iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n","sig":null,"attributes":[{"value":"/ An iterator over the range [start, stop) by `step`. It handles overflow by stopping.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":5719,"byte_end":5807,"line_start":222,"line_end":222,"column_start":1,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":6022,"byte_end":6032,"line_start":233,"line_end":233,"column_start":8,"column_end":18},"name":"range_step","qualname":"::range_step","value":"pub fn range_step<A>(A, A, A) -> RangeStep<A> where A: CheckedAdd +\nPartialOrd + Clone + Zero","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n","sig":null,"attributes":[{"value":"/ Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":5909,"byte_end":6004,"line_start":231,"line_end":231,"column_start":1,"column_end":96}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":6005,"byte_end":6014,"line_start":232,"line_end":232,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":104},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":6928,"byte_end":6946,"line_start":269,"line_end":269,"column_start":12,"column_end":30},"name":"RangeStepInclusive","qualname":"::RangeStepInclusive","value":"RangeStepInclusive {  }","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"decl_id":null,"docs":" An iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n","sig":null,"attributes":[{"value":"/ An iterator over the range [start, stop] by `step`. It handles overflow by stopping.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":6811,"byte_end":6899,"line_start":267,"line_end":267,"column_start":1,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":7139,"byte_end":7159,"line_start":279,"line_end":279,"column_start":8,"column_end":28},"name":"range_step_inclusive","qualname":"::range_step_inclusive","value":"pub fn range_step_inclusive<A>(A, A, A) -> RangeStepInclusive<A> where\nA: CheckedAdd + PartialOrd + Clone + Zero","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n","sig":null,"attributes":[{"value":"/ Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":7026,"byte_end":7121,"line_start":277,"line_end":277,"column_start":1,"column_end":96}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":7122,"byte_end":7131,"line_start":278,"line_end":278,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":114},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8110,"byte_end":8119,"line_start":318,"line_end":318,"column_start":12,"column_end":21},"name":"RangeFrom","qualname":"::RangeFrom","value":"RangeFrom {  }","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117}],"decl_id":null,"docs":" An iterator over the infinite range starting at `start`\n","sig":null,"attributes":[{"value":"/ An iterator over the infinite range starting at `start`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8022,"byte_end":8081,"line_start":316,"line_end":316,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8551,"byte_end":8561,"line_start":330,"line_end":330,"column_start":8,"column_end":18},"name":"range_from","qualname":"::range_from","value":"pub fn range_from<A>(A) -> RangeFrom<A> where A: Add<A, Output = A> + Clone +\nOne","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the infinite range starting at `start` and continuing forever.","sig":null,"attributes":[{"value":"/ Return an iterator over the infinite range starting at `start` and continuing forever.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8154,"byte_end":8244,"line_start":323,"line_end":323,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8245,"byte_end":8248,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ *Note*: Currently, the `Iterator` implementation is not checked for overflow.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8249,"byte_end":8330,"line_start":325,"line_end":325,"column_start":1,"column_end":82}},{"value":"/ If you use a finite-sized integer type and the integer overflows,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8331,"byte_end":8400,"line_start":326,"line_end":326,"column_start":1,"column_end":70}},{"value":"/ it might panic in debug mode or wrap around in release mode.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8401,"byte_end":8465,"line_start":327,"line_end":327,"column_start":1,"column_end":65}},{"value":"/ **This behavior is not guaranteed and may change at any time.**","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8466,"byte_end":8533,"line_start":328,"line_end":328,"column_start":1,"column_end":68}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8534,"byte_end":8543,"line_start":329,"line_end":329,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":121},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9190,"byte_end":9203,"line_start":361,"line_end":361,"column_start":12,"column_end":25},"name":"RangeStepFrom","qualname":"::RangeStepFrom","value":"RangeStepFrom {  }","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124}],"decl_id":null,"docs":" An iterator over the infinite range starting at `start` by `step`\n","sig":null,"attributes":[{"value":"/ An iterator over the infinite range starting at `start` by `step`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9092,"byte_end":9161,"line_start":359,"line_end":359,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9646,"byte_end":9661,"line_start":373,"line_end":373,"column_start":8,"column_end":23},"name":"range_step_from","qualname":"::range_step_from","value":"pub fn range_step_from<A>(A, A) -> RangeStepFrom<A> where A: Add<A, Output =\nA> + Clone","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the infinite range starting at `start` and continuing forever by `step`.","sig":null,"attributes":[{"value":"/ Return an iterator over the infinite range starting at `start` and continuing forever by `step`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9239,"byte_end":9339,"line_start":366,"line_end":366,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9340,"byte_end":9343,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ *Note*: Currently, the `Iterator` implementation is not checked for overflow.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9344,"byte_end":9425,"line_start":368,"line_end":368,"column_start":1,"column_end":82}},{"value":"/ If you use a finite-sized integer type and the integer overflows,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9426,"byte_end":9495,"line_start":369,"line_end":369,"column_start":1,"column_end":70}},{"value":"/ it might panic in debug mode or wrap around in release mode.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9496,"byte_end":9560,"line_start":370,"line_end":370,"column_start":1,"column_end":65}},{"value":"/ **This behavior is not guaranteed and may change at any time.**","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9561,"byte_end":9628,"line_start":371,"line_end":371,"column_start":1,"column_end":68}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9629,"byte_end":9638,"line_start":372,"line_end":372,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":2149,"byte_end":2154,"line_start":88,"line_end":88,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":3533,"byte_end":3538,"line_start":132,"line_end":132,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":4262,"byte_end":4276,"line_start":166,"line_end":166,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":5179,"byte_end":5193,"line_start":203,"line_end":203,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":6296,"byte_end":6305,"line_start":246,"line_end":246,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":7462,"byte_end":7480,"line_start":293,"line_end":293,"column_start":22,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8733,"byte_end":8742,"line_start":340,"line_end":340,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9839,"byte_end":9852,"line_start":383,"line_end":383,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":2149,"byte_end":2154,"line_start":88,"line_end":88,"column_start":22,"column_end":27},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":80},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":3533,"byte_end":3538,"line_start":132,"line_end":132,"column_start":33,"column_end":38},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":80},"to":{"krate":1,"index":7759}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":4262,"byte_end":4276,"line_start":166,"line_end":166,"column_start":22,"column_end":36},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":5179,"byte_end":5193,"line_start":203,"line_end":203,"column_start":33,"column_end":47},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":7759}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":6296,"byte_end":6305,"line_start":246,"line_end":246,"column_start":22,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":7462,"byte_end":7480,"line_start":293,"line_end":293,"column_start":22,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":104},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":8733,"byte_end":8742,"line_start":340,"line_end":340,"column_start":22,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":114},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/num-iter-0.1.42/src/lib.rs","byte_start":9839,"byte_end":9852,"line_start":383,"line_end":383,"column_start":22,"column_end":35},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":121},"to":{"krate":1,"index":7907}}]}