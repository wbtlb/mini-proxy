{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0","program":"/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","parking_lot","--edition=2018","/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=645df77f870c1430","-C","extra-filename=-645df77f870c1430","--out-dir","/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps","-L","dependency=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps","--extern","lock_api=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/liblock_api-4f07ced3c9c3f2bd.rmeta","--extern","parking_lot_core=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/libparking_lot_core-2afaa690a8fa5d55.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu"],"output":"/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/codegen/target/rls/debug/deps/libparking_lot-645df77f870c1430.rmeta"},"prelude":{"crate_id":{"name":"parking_lot","disambiguator":[3871717905106152681,0]},"crate_root":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src","external_crates":[{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","num":2,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","num":20,"id":{"name":"lock_api","disambiguator":[8272086953703914760,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","num":21,"id":{"name":"scopeguard","disambiguator":[3320008020467133727,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","num":22,"id":{"name":"parking_lot_core","disambiguator":[13805589246425405989,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","num":23,"id":{"name":"smallvec","disambiguator":[10927382968747842108,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","num":24,"id":{"name":"cfg_if","disambiguator":[3771446270907224645,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","num":25,"id":{"name":"libc","disambiguator":[17359017214528108778,0]}}],"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":333,"byte_end":1976,"line_start":8,"line_end":56,"column_start":1,"column_end":20}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":66},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1303,"byte_end":1310,"line_start":41,"line_end":41,"column_start":25,"column_end":32},"alias_span":null,"name":"Condvar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":647},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1312,"byte_end":1329,"line_start":41,"line_end":41,"column_start":34,"column_end":51},"alias_span":null,"name":"WaitTimeoutResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":114},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1359,"byte_end":1375,"line_start":42,"line_end":42,"column_start":28,"column_end":44},"alias_span":null,"name":"const_fair_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":112},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1377,"byte_end":1386,"line_start":42,"line_end":42,"column_start":46,"column_end":55},"alias_span":null,"name":"FairMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":116},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1388,"byte_end":1402,"line_start":42,"line_end":42,"column_start":57,"column_end":71},"alias_span":null,"name":"FairMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":119},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1404,"byte_end":1424,"line_start":42,"line_end":42,"column_start":73,"column_end":93},"alias_span":null,"name":"MappedFairMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":131},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1449,"byte_end":1460,"line_start":43,"line_end":43,"column_start":23,"column_end":34},"alias_span":null,"name":"const_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":136},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1462,"byte_end":1478,"line_start":43,"line_end":43,"column_start":36,"column_end":52},"alias_span":null,"name":"MappedMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":129},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1480,"byte_end":1485,"line_start":43,"line_end":43,"column_start":54,"column_end":59},"alias_span":null,"name":"Mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":133},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1487,"byte_end":1497,"line_start":43,"line_end":43,"column_start":61,"column_end":71},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":180},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1521,"byte_end":1525,"line_start":44,"line_end":44,"column_start":22,"column_end":26},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":662},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1527,"byte_end":1536,"line_start":44,"line_end":44,"column_start":28,"column_end":37},"alias_span":null,"name":"OnceState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":214},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1569,"byte_end":1581,"line_start":45,"line_end":45,"column_start":31,"column_end":43},"alias_span":null,"name":"RawFairMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":280},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1608,"byte_end":1616,"line_start":46,"line_end":46,"column_start":26,"column_end":34},"alias_span":null,"name":"RawMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":384},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1644,"byte_end":1653,"line_start":47,"line_end":47,"column_start":27,"column_end":36},"alias_span":null,"name":"RawRwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":498},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1684,"byte_end":1705,"line_start":49,"line_end":49,"column_start":5,"column_end":26},"alias_span":null,"name":"const_reentrant_mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":503},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1707,"byte_end":1732,"line_start":49,"line_end":49,"column_start":28,"column_end":53},"alias_span":null,"name":"MappedReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":490},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1734,"byte_end":1745,"line_start":49,"line_end":49,"column_start":55,"column_end":66},"alias_span":null,"name":"RawThreadId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":491},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1734,"byte_end":1745,"line_start":49,"line_end":49,"column_start":55,"column_end":66},"alias_span":null,"name":"RawThreadId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":496},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1747,"byte_end":1761,"line_start":49,"line_end":49,"column_start":68,"column_end":82},"alias_span":null,"name":"ReentrantMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":500},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1767,"byte_end":1786,"line_start":50,"line_end":50,"column_start":5,"column_end":24},"alias_span":null,"name":"ReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":515},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1819,"byte_end":1831,"line_start":53,"line_end":53,"column_start":5,"column_end":17},"alias_span":null,"name":"const_rwlock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":523},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1833,"byte_end":1854,"line_start":53,"line_end":53,"column_start":19,"column_end":40},"alias_span":null,"name":"MappedRwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":526},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1856,"byte_end":1878,"line_start":53,"line_end":53,"column_start":42,"column_end":64},"alias_span":null,"name":"MappedRwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":513},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1880,"byte_end":1886,"line_start":53,"line_end":53,"column_start":66,"column_end":72},"alias_span":null,"name":"RwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":517},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1888,"byte_end":1903,"line_start":53,"line_end":53,"column_start":74,"column_end":89},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":529},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1909,"byte_end":1934,"line_start":54,"line_end":54,"column_start":5,"column_end":30},"alias_span":null,"name":"RwLockUpgradableReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":520},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1936,"byte_end":1952,"line_start":54,"line_end":54,"column_start":32,"column_end":48},"alias_span":null,"name":"RwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":1967,"byte_end":1975,"line_start":56,"line_end":56,"column_start":11,"column_end":19},"alias_span":null,"name":"lock_api","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":333,"byte_end":1976,"line_start":8,"line_end":56,"column_start":1,"column_end":20},"name":"","qualname":"::","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":92},{"krate":0,"index":105},{"krate":0,"index":122},{"krate":0,"index":139},{"krate":0,"index":207},{"krate":0,"index":232},{"krate":0,"index":307},{"krate":0,"index":476},{"krate":0,"index":506},{"krate":0,"index":532},{"krate":0,"index":548},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":581},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":603},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":644}],"decl_id":null,"docs":" This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n `Once` that are smaller, faster and more flexible than those in the Rust\n standard library. It also provides a `ReentrantMutex` type.\n","sig":null,"attributes":[{"value":"/ This library provides implementations of `Mutex`, `RwLock`, `Condvar` and","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":333,"byte_end":410,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ `Once` that are smaller, faster and more flexible than those in the Rust","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":411,"byte_end":487,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ standard library. It also provides a `ReentrantMutex` type.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":488,"byte_end":551,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"warn(missing_docs)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":553,"byte_end":575,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/lib.rs","byte_start":576,"byte_end":602,"line_start":13,"line_end":13,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":647},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":2826,"byte_end":2843,"line_start":22,"line_end":22,"column_start":12,"column_end":29},"name":"WaitTimeoutResult","qualname":"::condvar::WaitTimeoutResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type indicating whether a timed wait on a condition variable returned\n due to a time out or not.\n","sig":null,"attributes":[{"value":"/ A type indicating whether a timed wait on a condition variable returned","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":2664,"byte_end":2739,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ due to a time out or not.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":2740,"byte_end":2769,"line_start":20,"line_end":20,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":2964,"byte_end":2973,"line_start":27,"line_end":27,"column_start":12,"column_end":21},"name":"timed_out","qualname":"<WaitTimeoutResult>::timed_out","value":"pub fn timed_out(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the wait was known to have timed out.\n","sig":null,"attributes":[{"value":"/ Returns whether the wait was known to have timed out.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":2881,"byte_end":2938,"line_start":25,"line_end":25,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":2943,"byte_end":2952,"line_start":26,"line_end":26,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":66},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5368,"byte_end":5375,"line_start":89,"line_end":89,"column_start":12,"column_end":19},"name":"Condvar","qualname":"::condvar::Condvar","value":"Condvar {  }","parent":null,"children":[{"krate":0,"index":67}],"decl_id":null,"docs":" A Condition Variable","sig":null,"attributes":[{"value":"/ A Condition Variable","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3014,"byte_end":3038,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3039,"byte_end":3042,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Condition variables represent the ability to block a thread such that it","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3043,"byte_end":3119,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ consumes no CPU time while waiting for an event to occur. Condition","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3120,"byte_end":3191,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/ variables are typically associated with a boolean predicate (a condition)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3192,"byte_end":3269,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ and a mutex. The predicate is always verified inside of the mutex before","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3270,"byte_end":3346,"line_start":37,"line_end":37,"column_start":1,"column_end":77}},{"value":"/ determining that thread must block.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3347,"byte_end":3386,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3387,"byte_end":3390,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Note that this module places one additional restriction over the system","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3391,"byte_end":3466,"line_start":40,"line_end":40,"column_start":1,"column_end":76}},{"value":"/ condition variables: each condvar can be used with only one mutex at a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3467,"byte_end":3541,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ time. Any attempt to use multiple mutexes on the same condition variable","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3542,"byte_end":3618,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/ simultaneously will result in a runtime panic. However it is possible to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3619,"byte_end":3695,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ switch to a different mutex if there are no threads currently waiting on","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3696,"byte_end":3772,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ the condition variable.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3773,"byte_end":3800,"line_start":45,"line_end":45,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3801,"byte_end":3804,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Condvar`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3805,"byte_end":3858,"line_start":47,"line_end":47,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3859,"byte_end":3862,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ - No spurious wakeups: A wait will only return a non-timeout result if it","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3863,"byte_end":3940,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/   was woken up by `notify_one` or `notify_all`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3941,"byte_end":3992,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ - `Condvar::notify_all` will only wake up a single thread, the rest are","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":3993,"byte_end":4068,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/   requeued to wait for the `Mutex` to be unlocked by the thread that was","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4069,"byte_end":4145,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/   woken up.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4146,"byte_end":4161,"line_start":53,"line_end":53,"column_start":1,"column_end":16}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4162,"byte_end":4237,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/   `Condvar` due to platform limitations.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4238,"byte_end":4282,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4283,"byte_end":4361,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4362,"byte_end":4412,"line_start":57,"line_end":57,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4413,"byte_end":4461,"line_start":58,"line_end":58,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4462,"byte_end":4465,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4466,"byte_end":4480,"line_start":60,"line_end":60,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4481,"byte_end":4484,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4485,"byte_end":4492,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::{Mutex, Condvar};","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4493,"byte_end":4531,"line_start":63,"line_end":63,"column_start":1,"column_end":39}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4532,"byte_end":4555,"line_start":64,"line_end":64,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4556,"byte_end":4576,"line_start":65,"line_end":65,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4577,"byte_end":4580,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let pair = Arc::new((Mutex::new(false), Condvar::new()));","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4581,"byte_end":4642,"line_start":67,"line_end":67,"column_start":1,"column_end":62}},{"value":"/ let pair2 = pair.clone();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4643,"byte_end":4672,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4673,"byte_end":4676,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ // Inside of our lock, spawn a new thread, and then wait for it to start","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4677,"byte_end":4753,"line_start":70,"line_end":70,"column_start":1,"column_end":77}},{"value":"/ thread::spawn(move|| {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4754,"byte_end":4780,"line_start":71,"line_end":71,"column_start":1,"column_end":27}},{"value":"/     let &(ref lock, ref cvar) = &*pair2;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4781,"byte_end":4825,"line_start":72,"line_end":72,"column_start":1,"column_end":45}},{"value":"/     let mut started = lock.lock();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4826,"byte_end":4864,"line_start":73,"line_end":73,"column_start":1,"column_end":39}},{"value":"/     *started = true;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4865,"byte_end":4889,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/     cvar.notify_one();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4890,"byte_end":4916,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"/ });","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4917,"byte_end":4924,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4925,"byte_end":4928,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // wait for the thread to start up","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4929,"byte_end":4967,"line_start":78,"line_end":78,"column_start":1,"column_end":39}},{"value":"/ let &(ref lock, ref cvar) = &*pair;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":4968,"byte_end":5007,"line_start":79,"line_end":79,"column_start":1,"column_end":40}},{"value":"/ let mut started = lock.lock();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5008,"byte_end":5042,"line_start":80,"line_end":80,"column_start":1,"column_end":35}},{"value":"/ if !*started {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5043,"byte_end":5061,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/     cvar.wait(&mut started);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5062,"byte_end":5094,"line_start":82,"line_end":82,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5095,"byte_end":5100,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/ // Note that we used an if instead of a while loop above. This is only","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5101,"byte_end":5175,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ // possible because parking_lot's Condvar will never spuriously wake up.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5176,"byte_end":5252,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/ // This means that wait() will only return after notify_one or notify_all is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5253,"byte_end":5333,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/ // called.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5334,"byte_end":5348,"line_start":87,"line_end":87,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5349,"byte_end":5356,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5553,"byte_end":5556,"line_start":97,"line_end":97,"column_start":18,"column_end":21},"name":"new","qualname":"<Condvar>::new","value":"pub const fn new() -> Condvar","parent":null,"children":[],"decl_id":null,"docs":" Creates a new condition variable which is ready to be waited on and\n notified.\n","sig":null,"attributes":[{"value":"/ Creates a new condition variable which is ready to be waited on and","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5432,"byte_end":5503,"line_start":94,"line_end":94,"column_start":5,"column_end":76}},{"value":"/ notified.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5508,"byte_end":5521,"line_start":95,"line_end":95,"column_start":5,"column_end":18}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5526,"byte_end":5535,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6382,"byte_end":6392,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"notify_one","qualname":"<Condvar>::notify_one","value":"pub fn notify_one(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Wakes up one blocked thread on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up one blocked thread on this condvar.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5663,"byte_end":5711,"line_start":103,"line_end":103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5716,"byte_end":5719,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Returns whether a thread was woken up.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5724,"byte_end":5766,"line_start":105,"line_end":105,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5771,"byte_end":5774,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ If there is a blocked thread on this condition variable, then it will","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5779,"byte_end":5852,"line_start":107,"line_end":107,"column_start":5,"column_end":78}},{"value":"/ be woken up from its call to `wait` or `wait_timeout`. Calls to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5857,"byte_end":5924,"line_start":108,"line_end":108,"column_start":5,"column_end":72}},{"value":"/ `notify_one` are not buffered in any way.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5929,"byte_end":5974,"line_start":109,"line_end":109,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5979,"byte_end":5982,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ To wake up all threads, see `notify_all()`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5987,"byte_end":6034,"line_start":111,"line_end":111,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6039,"byte_end":6042,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6047,"byte_end":6061,"line_start":113,"line_end":113,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6066,"byte_end":6069,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6074,"byte_end":6081,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use parking_lot::Condvar;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6086,"byte_end":6115,"line_start":116,"line_end":116,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6120,"byte_end":6123,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ let condvar = Condvar::new();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6128,"byte_end":6161,"line_start":118,"line_end":118,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6166,"byte_end":6169,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ // do something with condvar, share it with other threads","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6174,"byte_end":6235,"line_start":120,"line_end":120,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6240,"byte_end":6243,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ if !condvar.notify_one() {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6248,"byte_end":6278,"line_start":122,"line_end":122,"column_start":5,"column_end":35}},{"value":"/     println!(\"Nobody was listening for this.\");","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6283,"byte_end":6334,"line_start":123,"line_end":123,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6339,"byte_end":6344,"line_start":124,"line_end":124,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6349,"byte_end":6356,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":6361,"byte_end":6370,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":8845,"byte_end":8855,"line_start":188,"line_end":188,"column_start":12,"column_end":22},"name":"notify_all","qualname":"<Condvar>::notify_all","value":"pub fn notify_all(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Wakes up all blocked threads on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up all blocked threads on this condvar.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":8478,"byte_end":8527,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":8532,"byte_end":8535,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Returns the number of threads woken up.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":8540,"byte_end":8583,"line_start":180,"line_end":180,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":8588,"byte_end":8591,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This method will ensure that any current waiters on the condition","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":8596,"byte_end":8665,"line_start":182,"line_end":182,"column_start":5,"column_end":74}},{"value":"/ variable are awoken. Calls to `notify_all()` are not buffered in any","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":8670,"byte_end":8742,"line_start":183,"line_end":183,"column_start":5,"column_end":77}},{"value":"/ way.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":8747,"byte_end":8755,"line_start":184,"line_end":184,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":8760,"byte_end":8763,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ To wake up only one thread, see `notify_one()`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":8768,"byte_end":8819,"line_start":186,"line_end":186,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":8824,"byte_end":8833,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11868,"byte_end":11872,"line_start":258,"line_end":258,"column_start":12,"column_end":16},"name":"wait","qualname":"<Condvar>::wait","value":"pub fn wait<T: ?Sized>(&Self, &mut MutexGuard<, T>)","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until this condition variable receives a\n notification.","sig":null,"attributes":[{"value":"/ Blocks the current thread until this condition variable receives a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11219,"byte_end":11289,"line_start":244,"line_end":244,"column_start":5,"column_end":75}},{"value":"/ notification.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11294,"byte_end":11311,"line_start":245,"line_end":245,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11316,"byte_end":11319,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This function will atomically unlock the mutex specified (represented by","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11324,"byte_end":11400,"line_start":247,"line_end":247,"column_start":5,"column_end":81}},{"value":"/ `mutex_guard`) and block the current thread. This means that any calls","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11405,"byte_end":11479,"line_start":248,"line_end":248,"column_start":5,"column_end":79}},{"value":"/ to `notify_*()` which happen logically after the mutex is unlocked are","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11484,"byte_end":11558,"line_start":249,"line_end":249,"column_start":5,"column_end":79}},{"value":"/ candidates to wake this thread up. When this function call returns, the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11563,"byte_end":11638,"line_start":250,"line_end":250,"column_start":5,"column_end":80}},{"value":"/ lock specified will have been re-acquired.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11643,"byte_end":11689,"line_start":251,"line_end":251,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11694,"byte_end":11697,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11702,"byte_end":11714,"line_start":253,"line_end":253,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11719,"byte_end":11722,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11727,"byte_end":11801,"line_start":255,"line_end":255,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11806,"byte_end":11842,"line_start":256,"line_end":256,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":11847,"byte_end":11856,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":13147,"byte_end":13157,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"wait_until","qualname":"<Condvar>::wait_until","value":"pub fn wait_until<T: ?Sized>(&Self, &mut MutexGuard<, T>, Instant)\n-> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after\n the specified time instant.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12030,"byte_end":12103,"line_start":262,"line_end":262,"column_start":5,"column_end":78}},{"value":"/ the specified time instant.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12108,"byte_end":12139,"line_start":263,"line_end":263,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12144,"byte_end":12147,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12152,"byte_end":12225,"line_start":265,"line_end":265,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked roughly until `timeout` is reached. This","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12230,"byte_end":12301,"line_start":266,"line_end":266,"column_start":5,"column_end":76}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12306,"byte_end":12379,"line_start":267,"line_end":267,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12384,"byte_end":12453,"line_start":268,"line_end":268,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12458,"byte_end":12510,"line_start":269,"line_end":269,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12515,"byte_end":12518,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12523,"byte_end":12594,"line_start":271,"line_end":271,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12599,"byte_end":12675,"line_start":272,"line_end":272,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12680,"byte_end":12700,"line_start":273,"line_end":273,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12705,"byte_end":12708,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12713,"byte_end":12783,"line_start":275,"line_end":275,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12788,"byte_end":12814,"line_start":276,"line_end":276,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12819,"byte_end":12822,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12827,"byte_end":12901,"line_start":278,"line_end":278,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12906,"byte_end":12968,"line_start":279,"line_end":279,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12973,"byte_end":12976,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12981,"byte_end":12993,"line_start":281,"line_end":281,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":12998,"byte_end":13001,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":13006,"byte_end":13080,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":13085,"byte_end":13121,"line_start":284,"line_end":284,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":13126,"byte_end":13135,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":17261,"byte_end":17269,"line_start":384,"line_end":384,"column_start":12,"column_end":20},"name":"wait_for","qualname":"<Condvar>::wait_for","value":"pub fn wait_for<T: ?Sized>(&Self, &mut MutexGuard<, T>, Duration)\n-> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after a\n specified duration.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16301,"byte_end":16376,"line_start":365,"line_end":365,"column_start":5,"column_end":80}},{"value":"/ specified duration.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16381,"byte_end":16404,"line_start":366,"line_end":366,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16409,"byte_end":16412,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16417,"byte_end":16490,"line_start":368,"line_end":368,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked for roughly no longer than `timeout`. This","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16495,"byte_end":16568,"line_start":369,"line_end":369,"column_start":5,"column_end":78}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16573,"byte_end":16646,"line_start":370,"line_end":370,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16651,"byte_end":16720,"line_start":371,"line_end":371,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16725,"byte_end":16777,"line_start":372,"line_end":372,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16782,"byte_end":16785,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16790,"byte_end":16861,"line_start":374,"line_end":374,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16866,"byte_end":16942,"line_start":375,"line_end":375,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16947,"byte_end":16967,"line_start":376,"line_end":376,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16972,"byte_end":16975,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":16980,"byte_end":17050,"line_start":378,"line_end":378,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":17055,"byte_end":17081,"line_start":379,"line_end":379,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":17086,"byte_end":17089,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":17094,"byte_end":17168,"line_start":381,"line_end":381,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":17173,"byte_end":17235,"line_start":382,"line_end":382,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":17240,"byte_end":17249,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":97},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/elision.rs","byte_start":37405,"byte_end":37412,"line_start":14,"line_end":14,"column_start":10,"column_end":17},"name":"IntType","qualname":"::elision::AtomicElisionExt::IntType","value":"type IntType;","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":112},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43502,"byte_end":43511,"line_start":78,"line_end":78,"column_start":10,"column_end":19},"name":"FairMutex","qualname":"::fair_mutex::FairMutex","value":"lock_api::Mutex<RawFairMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutual exclusive primitive that is always fair, useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusive primitive that is always fair, useful for protecting shared data","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":40641,"byte_end":40728,"line_start":11,"line_end":11,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":40729,"byte_end":40732,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":40733,"byte_end":40812,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ mutex can be statically initialized or created by the `new`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":40813,"byte_end":40876,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":40877,"byte_end":40956,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":40957,"byte_end":41032,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41033,"byte_end":41112,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41113,"byte_end":41156,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41157,"byte_end":41160,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The regular mutex provided by `parking_lot` uses eventual fairness","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41161,"byte_end":41231,"line_start":20,"line_end":20,"column_start":1,"column_end":71}},{"value":"/ (after some time it will default to the fair algorithm), but eventual","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41232,"byte_end":41305,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ fairness does not provide the same guarantees an always fair method would.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41306,"byte_end":41384,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ Fair mutexes are generally slower, but sometimes needed.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41385,"byte_end":41445,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41446,"byte_end":41449,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ In a fair mutex the waiters form a queue, and the lock is always granted to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41450,"byte_end":41529,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ the next requester in the queue, in first-in first-out order. This ensures","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41530,"byte_end":41608,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ that one thread cannot starve others by quickly re-acquiring the lock after","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41609,"byte_end":41688,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/ releasing it.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41689,"byte_end":41706,"line_start":28,"line_end":28,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41707,"byte_end":41710,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ A fair mutex may not be interesting if threads have different priorities (this is known as","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41711,"byte_end":41805,"line_start":30,"line_end":30,"column_start":1,"column_end":95}},{"value":"/ priority inversion).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41806,"byte_end":41830,"line_start":31,"line_end":31,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41831,"byte_end":41834,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Mutex`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41835,"byte_end":41886,"line_start":33,"line_end":33,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41887,"byte_end":41890,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41891,"byte_end":41950,"line_start":35,"line_end":35,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 byte of space, whereas the standard library boxes the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":41951,"byte_end":42026,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/   `FairMutex` due to platform limitations.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42027,"byte_end":42073,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42074,"byte_end":42152,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42153,"byte_end":42203,"line_start":39,"line_end":39,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42204,"byte_end":42252,"line_start":40,"line_end":40,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42253,"byte_end":42322,"line_start":41,"line_end":41,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42323,"byte_end":42376,"line_start":42,"line_end":42,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42377,"byte_end":42380,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42381,"byte_end":42395,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42396,"byte_end":42399,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42400,"byte_end":42407,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::FairMutex;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42408,"byte_end":42439,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/ use std::sync::{Arc, mpsc::channel};","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42440,"byte_end":42480,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/ use std::thread;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42481,"byte_end":42501,"line_start":49,"line_end":49,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42502,"byte_end":42505,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ const N: usize = 10;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42506,"byte_end":42530,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42531,"byte_end":42534,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // Spawn a few threads to increment a shared variable (non-atomically), and","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42535,"byte_end":42614,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ // let the main thread know once all increments are done.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42615,"byte_end":42676,"line_start":54,"line_end":54,"column_start":1,"column_end":62}},{"value":"/ //","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42677,"byte_end":42683,"line_start":55,"line_end":55,"column_start":1,"column_end":7}},{"value":"/ // Here we're using an Arc to share memory among threads, and the data inside","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42684,"byte_end":42765,"line_start":56,"line_end":56,"column_start":1,"column_end":82}},{"value":"/ // the Arc is protected with a mutex.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42766,"byte_end":42807,"line_start":57,"line_end":57,"column_start":1,"column_end":42}},{"value":"/ let data = Arc::new(FairMutex::new(0));","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42808,"byte_end":42851,"line_start":58,"line_end":58,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42852,"byte_end":42855,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42856,"byte_end":42885,"line_start":60,"line_end":60,"column_start":1,"column_end":30}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42886,"byte_end":42906,"line_start":61,"line_end":61,"column_start":1,"column_end":21}},{"value":"/     let (data, tx) = (Arc::clone(&data), tx.clone());","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42907,"byte_end":42964,"line_start":62,"line_end":62,"column_start":1,"column_end":58}},{"value":"/     thread::spawn(move || {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42965,"byte_end":42996,"line_start":63,"line_end":63,"column_start":1,"column_end":32}},{"value":"/         // The shared state can only be accessed once the lock is held.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":42997,"byte_end":43072,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/         // Our non-atomic increment is safe because we're the only thread","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43073,"byte_end":43150,"line_start":65,"line_end":65,"column_start":1,"column_end":78}},{"value":"/         // which can access the shared state when the lock is held.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43151,"byte_end":43222,"line_start":66,"line_end":66,"column_start":1,"column_end":72}},{"value":"/         let mut data = data.lock();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43223,"byte_end":43262,"line_start":67,"line_end":67,"column_start":1,"column_end":40}},{"value":"/         *data += 1;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43263,"byte_end":43286,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/         if *data == N {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43287,"byte_end":43314,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/             tx.send(()).unwrap();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43315,"byte_end":43352,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43353,"byte_end":43366,"line_start":71,"line_end":71,"column_start":1,"column_end":14}},{"value":"/         // the lock is unlocked here when `data` goes out of scope.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43367,"byte_end":43438,"line_start":72,"line_end":72,"column_start":1,"column_end":72}},{"value":"/     });","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43439,"byte_end":43450,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43451,"byte_end":43456,"line_start":74,"line_end":74,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43457,"byte_end":43460,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ rx.recv().unwrap();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43461,"byte_end":43484,"line_start":76,"line_end":76,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43485,"byte_end":43492,"line_start":77,"line_end":77,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":114},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43710,"byte_end":43726,"line_start":83,"line_end":83,"column_start":14,"column_end":30},"name":"const_fair_mutex","qualname":"::fair_mutex::const_fair_mutex","value":"pub const fn const_fair_mutex<T>(T) -> FairMutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new fair mutex in an unlocked state ready for use.","sig":null,"attributes":[{"value":"/ Creates a new fair mutex in an unlocked state ready for use.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43552,"byte_end":43616,"line_start":80,"line_end":80,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43617,"byte_end":43620,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This allows creating a fair mutex in a constant context on stable Rust.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43621,"byte_end":43696,"line_start":82,"line_end":82,"column_start":1,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":116},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":44111,"byte_end":44125,"line_start":92,"line_end":92,"column_start":10,"column_end":24},"name":"FairMutexGuard","qualname":"::fair_mutex::FairMutexGuard","value":"lock_api::MutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43833,"byte_end":43913,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43914,"byte_end":43974,"line_start":88,"line_end":88,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43975,"byte_end":43978,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":43979,"byte_end":44057,"line_start":90,"line_end":90,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":44058,"byte_end":44101,"line_start":91,"line_end":91,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":119},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":44565,"byte_end":44585,"line_start":101,"line_end":101,"column_start":10,"column_end":30},"name":"MappedFairMutexGuard","qualname":"::fair_mutex::MappedFairMutexGuard","value":"lock_api::MappedMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `FairMutexGuard::map`, which can point to a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":44179,"byte_end":44258,"line_start":94,"line_end":94,"column_start":1,"column_end":80}},{"value":"/ subfield of the protected data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":44259,"byte_end":44294,"line_start":95,"line_end":95,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":44295,"byte_end":44298,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedFairMutexGuard` and `FairMutexGuard` is that the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":44299,"byte_end":44386,"line_start":97,"line_end":97,"column_start":1,"column_end":88}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":44387,"byte_end":44462,"line_start":98,"line_end":98,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":44463,"byte_end":44543,"line_start":99,"line_end":99,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/fair_mutex.rs","byte_start":44544,"byte_end":44555,"line_start":100,"line_end":100,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":129},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52876,"byte_end":52881,"line_start":87,"line_end":87,"column_start":10,"column_end":15},"name":"Mutex","qualname":"::mutex::Mutex","value":"lock_api::Mutex<RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":49505,"byte_end":49571,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":49572,"byte_end":49575,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":49576,"byte_end":49655,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ mutex can be statically initialized or created by the `new`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":49656,"byte_end":49719,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":49720,"byte_end":49799,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":49800,"byte_end":49875,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":49876,"byte_end":49955,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":49956,"byte_end":49999,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50000,"byte_end":50003,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50004,"byte_end":50018,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50019,"byte_end":50022,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50023,"byte_end":50102,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same mutex in succession, which can starve","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50103,"byte_end":50183,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ other threads waiting to acquire the mutex. While this improves throughput","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50184,"byte_end":50262,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50263,"byte_end":50342,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ a mutex it has just released, this can starve other threads.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50343,"byte_end":50407,"line_start":26,"line_end":26,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50408,"byte_end":50411,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50412,"byte_end":50493,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50494,"byte_end":50565,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ throughput. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50566,"byte_end":50643,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ which will force the lock to go to the next thread waiting for the mutex.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50644,"byte_end":50721,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50722,"byte_end":50725,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50726,"byte_end":50803,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible impact on throughput considering the length","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50804,"byte_end":50882,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ of the critical section.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50883,"byte_end":50911,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50912,"byte_end":50915,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `MutexGuard::unlock_fair` when","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50916,"byte_end":50994,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ unlocking a mutex instead of simply dropping the `MutexGuard`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":50995,"byte_end":51061,"line_start":38,"line_end":38,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51062,"byte_end":51065,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Mutex`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51066,"byte_end":51117,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51118,"byte_end":51121,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51122,"byte_end":51181,"line_start":42,"line_end":42,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 byte of space, whereas the standard library boxes the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51182,"byte_end":51257,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/   `Mutex` due to platform limitations.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51258,"byte_end":51300,"line_start":44,"line_end":44,"column_start":1,"column_end":43}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51301,"byte_end":51379,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51380,"byte_end":51430,"line_start":46,"line_end":46,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51431,"byte_end":51479,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51480,"byte_end":51549,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51550,"byte_end":51603,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the mutex is fair on average.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51604,"byte_end":51674,"line_start":50,"line_end":50,"column_start":1,"column_end":71}},{"value":"/ - Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51675,"byte_end":51758,"line_start":51,"line_end":51,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51759,"byte_end":51762,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51763,"byte_end":51777,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51778,"byte_end":51781,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51782,"byte_end":51789,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::Mutex;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51790,"byte_end":51817,"line_start":56,"line_end":56,"column_start":1,"column_end":28}},{"value":"/ use std::sync::{Arc, mpsc::channel};","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51818,"byte_end":51858,"line_start":57,"line_end":57,"column_start":1,"column_end":41}},{"value":"/ use std::thread;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51859,"byte_end":51879,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51880,"byte_end":51883,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ const N: usize = 10;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51884,"byte_end":51908,"line_start":60,"line_end":60,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51909,"byte_end":51912,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // Spawn a few threads to increment a shared variable (non-atomically), and","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51913,"byte_end":51992,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/ // let the main thread know once all increments are done.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":51993,"byte_end":52054,"line_start":63,"line_end":63,"column_start":1,"column_end":62}},{"value":"/ //","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52055,"byte_end":52061,"line_start":64,"line_end":64,"column_start":1,"column_end":7}},{"value":"/ // Here we're using an Arc to share memory among threads, and the data inside","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52062,"byte_end":52143,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/ // the Arc is protected with a mutex.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52144,"byte_end":52185,"line_start":66,"line_end":66,"column_start":1,"column_end":42}},{"value":"/ let data = Arc::new(Mutex::new(0));","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52186,"byte_end":52225,"line_start":67,"line_end":67,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52226,"byte_end":52229,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52230,"byte_end":52259,"line_start":69,"line_end":69,"column_start":1,"column_end":30}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52260,"byte_end":52280,"line_start":70,"line_end":70,"column_start":1,"column_end":21}},{"value":"/     let (data, tx) = (Arc::clone(&data), tx.clone());","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52281,"byte_end":52338,"line_start":71,"line_end":71,"column_start":1,"column_end":58}},{"value":"/     thread::spawn(move || {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52339,"byte_end":52370,"line_start":72,"line_end":72,"column_start":1,"column_end":32}},{"value":"/         // The shared state can only be accessed once the lock is held.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52371,"byte_end":52446,"line_start":73,"line_end":73,"column_start":1,"column_end":76}},{"value":"/         // Our non-atomic increment is safe because we're the only thread","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52447,"byte_end":52524,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/         // which can access the shared state when the lock is held.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52525,"byte_end":52596,"line_start":75,"line_end":75,"column_start":1,"column_end":72}},{"value":"/         let mut data = data.lock();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52597,"byte_end":52636,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"/         *data += 1;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52637,"byte_end":52660,"line_start":77,"line_end":77,"column_start":1,"column_end":24}},{"value":"/         if *data == N {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52661,"byte_end":52688,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/             tx.send(()).unwrap();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52689,"byte_end":52726,"line_start":79,"line_end":79,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52727,"byte_end":52740,"line_start":80,"line_end":80,"column_start":1,"column_end":14}},{"value":"/         // the lock is unlocked here when `data` goes out of scope.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52741,"byte_end":52812,"line_start":81,"line_end":81,"column_start":1,"column_end":72}},{"value":"/     });","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52813,"byte_end":52824,"line_start":82,"line_end":82,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52825,"byte_end":52830,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52831,"byte_end":52834,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ rx.recv().unwrap();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52835,"byte_end":52858,"line_start":85,"line_end":85,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52859,"byte_end":52866,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":131},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53066,"byte_end":53077,"line_start":92,"line_end":92,"column_start":14,"column_end":25},"name":"const_mutex","qualname":"::mutex::const_mutex","value":"pub const fn const_mutex<T>(T) -> Mutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52918,"byte_end":52977,"line_start":89,"line_end":89,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52978,"byte_end":52981,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ This allows creating a mutex in a constant context on stable Rust.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":52982,"byte_end":53052,"line_start":91,"line_end":91,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":133},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53450,"byte_end":53460,"line_start":101,"line_end":101,"column_start":10,"column_end":20},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"lock_api::MutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53172,"byte_end":53252,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53253,"byte_end":53313,"line_start":97,"line_end":97,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53314,"byte_end":53317,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53318,"byte_end":53396,"line_start":99,"line_end":99,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53397,"byte_end":53440,"line_start":100,"line_end":100,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":136},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53884,"byte_end":53900,"line_start":110,"line_end":110,"column_start":10,"column_end":26},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"lock_api::MappedMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53510,"byte_end":53585,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53586,"byte_end":53621,"line_start":104,"line_end":104,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53622,"byte_end":53625,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53626,"byte_end":53705,"line_start":106,"line_end":106,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53706,"byte_end":53781,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53782,"byte_end":53862,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/mutex.rs","byte_start":53863,"byte_end":53874,"line_start":109,"line_end":109,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":663},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":59984,"byte_end":59987,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"New","qualname":"::once::OnceState::New","value":"OnceState::New","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" A closure has not been executed yet\n","sig":null,"attributes":[{"value":"/ A closure has not been executed yet","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":59940,"byte_end":59979,"line_start":23,"line_end":23,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":665},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60039,"byte_end":60047,"line_start":27,"line_end":27,"column_start":5,"column_end":13},"name":"Poisoned","qualname":"::once::OnceState::Poisoned","value":"OnceState::Poisoned","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" A closure was executed but panicked.\n","sig":null,"attributes":[{"value":"/ A closure was executed but panicked.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":59994,"byte_end":60034,"line_start":26,"line_end":26,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":667},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60105,"byte_end":60115,"line_start":30,"line_end":30,"column_start":5,"column_end":15},"name":"InProgress","qualname":"::once::OnceState::InProgress","value":"OnceState::InProgress","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" A thread is currently executing a closure.\n","sig":null,"attributes":[{"value":"/ A thread is currently executing a closure.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60054,"byte_end":60100,"line_start":29,"line_end":29,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":669},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60168,"byte_end":60172,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Done","qualname":"::once::OnceState::Done","value":"OnceState::Done","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":" A closure has completed successfully.\n","sig":null,"attributes":[{"value":"/ A closure has completed successfully.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60122,"byte_end":60163,"line_start":32,"line_end":32,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":662},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":59924,"byte_end":59933,"line_start":22,"line_end":22,"column_start":10,"column_end":19},"name":"OnceState","qualname":"::once::OnceState","value":"pub enum OnceState { New, Poisoned, InProgress, Done, }","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":665},{"krate":0,"index":667},{"krate":0,"index":669}],"decl_id":null,"docs":" Current state of a `Once`.\n","sig":null,"attributes":[{"value":"/ Current state of a `Once`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":59839,"byte_end":59869,"line_start":20,"line_end":20,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60452,"byte_end":60460,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"poisoned","qualname":"<OnceState>::poisoned","value":"pub fn poisoned(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has been poisoned.","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has been poisoned.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60198,"byte_end":60258,"line_start":37,"line_end":37,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60263,"byte_end":60266,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ Once an initialization routine for a `Once` has panicked it will forever","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60271,"byte_end":60347,"line_start":39,"line_end":39,"column_start":5,"column_end":81}},{"value":"/ indicate to future forced initialization routines that it is poisoned.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60352,"byte_end":60426,"line_start":40,"line_end":40,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60431,"byte_end":60440,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60696,"byte_end":60700,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"done","qualname":"<OnceState>::done","value":"pub fn done(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has successfully executed a\n closure.\n","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has successfully executed a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60584,"byte_end":60653,"line_start":49,"line_end":49,"column_start":5,"column_end":74}},{"value":"/ closure.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60658,"byte_end":60670,"line_start":50,"line_end":50,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60675,"byte_end":60684,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":180},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61521,"byte_end":61525,"line_start":83,"line_end":83,"column_start":12,"column_end":16},"name":"Once","qualname":"::once::Once","value":"","parent":null,"children":[],"decl_id":null,"docs":" A synchronization primitive which can be used to run a one-time\n initialization. Useful for one-time initialization for globals, FFI or\n related functionality.","sig":null,"attributes":[{"value":"/ A synchronization primitive which can be used to run a one-time","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60818,"byte_end":60885,"line_start":60,"line_end":60,"column_start":1,"column_end":68}},{"value":"/ initialization. Useful for one-time initialization for globals, FFI or","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60886,"byte_end":60960,"line_start":61,"line_end":61,"column_start":1,"column_end":75}},{"value":"/ related functionality.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60961,"byte_end":60987,"line_start":62,"line_end":62,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60988,"byte_end":60991,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Once`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60992,"byte_end":61042,"line_start":64,"line_end":64,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61043,"byte_end":61046,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ - Only requires 1 byte of space, instead of 1 word.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61047,"byte_end":61102,"line_start":66,"line_end":66,"column_start":1,"column_end":56}},{"value":"/ - Not required to be `'static`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61103,"byte_end":61138,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ - Relaxed memory barriers in the fast path, which can significantly improve","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61139,"byte_end":61218,"line_start":68,"line_end":68,"column_start":1,"column_end":80}},{"value":"/   performance on some architectures.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61219,"byte_end":61259,"line_start":69,"line_end":69,"column_start":1,"column_end":41}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61260,"byte_end":61329,"line_start":70,"line_end":70,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61330,"byte_end":61333,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61334,"byte_end":61348,"line_start":72,"line_end":72,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61349,"byte_end":61352,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61353,"byte_end":61360,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::Once;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61361,"byte_end":61387,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61388,"byte_end":61391,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ static START: Once = Once::new();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61392,"byte_end":61429,"line_start":77,"line_end":77,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61430,"byte_end":61433,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ START.call_once(|| {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61434,"byte_end":61458,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"/     // run initialization here","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61459,"byte_end":61493,"line_start":80,"line_end":80,"column_start":1,"column_end":35}},{"value":"/ });","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61494,"byte_end":61501,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61502,"byte_end":61509,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61617,"byte_end":61620,"line_start":88,"line_end":88,"column_start":18,"column_end":21},"name":"new","qualname":"<Once>::new","value":"pub const fn new() -> Once","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Once` value.\n","sig":null,"attributes":[{"value":"/ Creates a new `Once` value.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61554,"byte_end":61585,"line_start":86,"line_end":86,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61590,"byte_end":61599,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61746,"byte_end":61751,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"state","qualname":"<Once>::state","value":"pub fn state(&Self) -> OnceState","parent":null,"children":[],"decl_id":null,"docs":" Returns the current state of this `Once`.\n","sig":null,"attributes":[{"value":"/ Returns the current state of this `Once`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61675,"byte_end":61720,"line_start":92,"line_end":92,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61725,"byte_end":61734,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64024,"byte_end":64033,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"call_once","qualname":"<Once>::call_once","value":"pub fn call_once<F>(&Self, F) where F: FnOnce() -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs an initialization routine once and only once. The given closure\n will be executed if this is the first time `call_once` has been called,\n and otherwise the routine will *not* be invoked.","sig":null,"attributes":[{"value":"/ Performs an initialization routine once and only once. The given closure","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62108,"byte_end":62184,"line_start":107,"line_end":107,"column_start":5,"column_end":81}},{"value":"/ will be executed if this is the first time `call_once` has been called,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62189,"byte_end":62264,"line_start":108,"line_end":108,"column_start":5,"column_end":80}},{"value":"/ and otherwise the routine will *not* be invoked.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62269,"byte_end":62321,"line_start":109,"line_end":109,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62326,"byte_end":62329,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62334,"byte_end":62405,"line_start":111,"line_end":111,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62410,"byte_end":62443,"line_start":112,"line_end":112,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62448,"byte_end":62451,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ When this function returns, it is guaranteed that some initialization","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62456,"byte_end":62529,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ has run and completed (it may not be the closure specified). It is also","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62534,"byte_end":62609,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ guaranteed that any memory writes performed by the executed closure can","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62614,"byte_end":62689,"line_start":116,"line_end":116,"column_start":5,"column_end":80}},{"value":"/ be reliably observed by other threads at this point (there is a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62694,"byte_end":62761,"line_start":117,"line_end":117,"column_start":5,"column_end":72}},{"value":"/ happens-before relation between the closure and code executing after the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62766,"byte_end":62842,"line_start":118,"line_end":118,"column_start":5,"column_end":81}},{"value":"/ return).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62847,"byte_end":62859,"line_start":119,"line_end":119,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62864,"byte_end":62867,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62872,"byte_end":62886,"line_start":121,"line_end":121,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62891,"byte_end":62894,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62899,"byte_end":62906,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ use parking_lot::Once;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62911,"byte_end":62937,"line_start":124,"line_end":124,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62942,"byte_end":62945,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ static mut VAL: usize = 0;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62950,"byte_end":62980,"line_start":126,"line_end":126,"column_start":5,"column_end":35}},{"value":"/ static INIT: Once = Once::new();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":62985,"byte_end":63021,"line_start":127,"line_end":127,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63026,"byte_end":63029,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ // Accessing a `static mut` is unsafe much of the time, but if we do so","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63034,"byte_end":63109,"line_start":129,"line_end":129,"column_start":5,"column_end":80}},{"value":"/ // in a synchronized fashion (e.g. write once or read all) then we're","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63114,"byte_end":63187,"line_start":130,"line_end":130,"column_start":5,"column_end":78}},{"value":"/ // good to go!","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63192,"byte_end":63210,"line_start":131,"line_end":131,"column_start":5,"column_end":23}},{"value":"/ //","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63215,"byte_end":63221,"line_start":132,"line_end":132,"column_start":5,"column_end":11}},{"value":"/ // This function will only call `expensive_computation` once, and will","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63226,"byte_end":63300,"line_start":133,"line_end":133,"column_start":5,"column_end":79}},{"value":"/ // otherwise always return the value returned from the first invocation.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63305,"byte_end":63381,"line_start":134,"line_end":134,"column_start":5,"column_end":81}},{"value":"/ fn get_cached_val() -> usize {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63386,"byte_end":63420,"line_start":135,"line_end":135,"column_start":5,"column_end":39}},{"value":"/     unsafe {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63425,"byte_end":63441,"line_start":136,"line_end":136,"column_start":5,"column_end":21}},{"value":"/         INIT.call_once(|| {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63446,"byte_end":63477,"line_start":137,"line_end":137,"column_start":5,"column_end":36}},{"value":"/             VAL = expensive_computation();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63482,"byte_end":63528,"line_start":138,"line_end":138,"column_start":5,"column_end":51}},{"value":"/         });","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63533,"byte_end":63548,"line_start":139,"line_end":139,"column_start":5,"column_end":20}},{"value":"/         VAL","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63553,"byte_end":63568,"line_start":140,"line_end":140,"column_start":5,"column_end":20}},{"value":"/     }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63573,"byte_end":63582,"line_start":141,"line_end":141,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63587,"byte_end":63592,"line_start":142,"line_end":142,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63597,"byte_end":63600,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ fn expensive_computation() -> usize {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63605,"byte_end":63646,"line_start":144,"line_end":144,"column_start":5,"column_end":46}},{"value":"/     // ...","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63651,"byte_end":63665,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/ # 2","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63670,"byte_end":63677,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63682,"byte_end":63687,"line_start":147,"line_end":147,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63692,"byte_end":63699,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63704,"byte_end":63707,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63712,"byte_end":63724,"line_start":150,"line_end":150,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63729,"byte_end":63732,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ The closure `f` will only be executed once if this is called","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63737,"byte_end":63801,"line_start":152,"line_end":152,"column_start":5,"column_end":69}},{"value":"/ concurrently amongst many threads. If that closure panics, however, then","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63806,"byte_end":63882,"line_start":153,"line_end":153,"column_start":5,"column_end":81}},{"value":"/ it will *poison* this `Once` instance, causing all future invocations of","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63887,"byte_end":63963,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/ `call_once` to also panic.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":63968,"byte_end":63998,"line_start":155,"line_end":155,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64003,"byte_end":64012,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64784,"byte_end":64799,"line_start":179,"line_end":179,"column_start":12,"column_end":27},"name":"call_once_force","qualname":"<Once>::call_once_force","value":"pub fn call_once_force<F>(&Self, F) where F: FnOnce(OnceState) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the same function as `call_once` except ignores poisoning.","sig":null,"attributes":[{"value":"/ Performs the same function as `call_once` except ignores poisoning.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64301,"byte_end":64372,"line_start":169,"line_end":169,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64377,"byte_end":64380,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ If this `Once` has been poisoned (some initialization panicked) then","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64385,"byte_end":64457,"line_start":171,"line_end":171,"column_start":5,"column_end":77}},{"value":"/ this function will continue to attempt to call initialization functions","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64462,"byte_end":64537,"line_start":172,"line_end":172,"column_start":5,"column_end":80}},{"value":"/ until one of them doesn't panic.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64542,"byte_end":64578,"line_start":173,"line_end":173,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64583,"byte_end":64586,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is yielded a structure which can be used to query the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64591,"byte_end":64664,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ state of this `Once` (whether initialization has previously panicked or","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64669,"byte_end":64744,"line_start":176,"line_end":176,"column_start":5,"column_end":80}},{"value":"/ not).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64749,"byte_end":64758,"line_start":177,"line_end":177,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":64763,"byte_end":64772,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":214},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_fair_mutex.rs","byte_start":73598,"byte_end":73610,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"RawFairMutex","qualname":"::raw_fair_mutex::RawFairMutex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Raw fair mutex type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw fair mutex type backed by the parking lot.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_fair_mutex.rs","byte_start":73536,"byte_end":73586,"line_start":11,"line_end":11,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":280},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_mutex.rs","byte_start":76154,"byte_end":76162,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"RawMutex","qualname":"::raw_mutex::RawMutex","value":"RawMutex {  }","parent":null,"children":[{"krate":0,"index":281}],"decl_id":null,"docs":" Raw mutex type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw mutex type backed by the parking lot.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_mutex.rs","byte_start":76097,"byte_end":76142,"line_start":31,"line_end":31,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":384},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":89134,"byte_end":89143,"line_start":55,"line_end":55,"column_start":12,"column_end":21},"name":"RawRwLock","qualname":"::raw_rwlock::RawRwLock","value":"RawRwLock {  }","parent":null,"children":[{"krate":0,"index":385}],"decl_id":null,"docs":" Raw reader-writer lock type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw reader-writer lock type backed by the parking lot.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":89064,"byte_end":89122,"line_start":54,"line_end":54,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":490},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":125268,"byte_end":125279,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"RawThreadId","qualname":"::remutex::RawThreadId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.\n","sig":null,"attributes":[{"value":"/ Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":125179,"byte_end":125256,"line_start":12,"line_end":12,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":496},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126350,"byte_end":126364,"line_start":41,"line_end":41,"column_start":10,"column_end":24},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"lock_api::ReentrantMutex<RawMutex, RawThreadId, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":125879,"byte_end":125942,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":125943,"byte_end":125946,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":125947,"byte_end":126017,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126018,"byte_end":126021,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126022,"byte_end":126102,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126103,"byte_end":126121,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126122,"byte_end":126202,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126203,"byte_end":126242,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126243,"byte_end":126246,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](type.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126247,"byte_end":126325,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ primitive.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126326,"byte_end":126340,"line_start":40,"line_end":40,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126591,"byte_end":126612,"line_start":46,"line_end":46,"column_start":14,"column_end":35},"name":"const_reentrant_mutex","qualname":"::remutex::const_reentrant_mutex","value":"pub const fn const_reentrant_mutex<T>(T) -> ReentrantMutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126423,"byte_end":126492,"line_start":43,"line_end":43,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126493,"byte_end":126496,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This allows creating a reentrant mutex in a constant context on stable Rust.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126497,"byte_end":126577,"line_start":45,"line_end":45,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":500},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":127074,"byte_end":127093,"line_start":59,"line_end":59,"column_start":10,"column_end":29},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"lock_api::ReentrantMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126802,"byte_end":126889,"line_start":54,"line_end":54,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126890,"byte_end":126953,"line_start":55,"line_end":55,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126954,"byte_end":126957,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":126958,"byte_end":127036,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":127037,"byte_end":127064,"line_start":58,"line_end":58,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":503},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":127566,"byte_end":127591,"line_start":68,"line_end":68,"column_start":10,"column_end":35},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"lock_api::MappedReentrantMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":127165,"byte_end":127249,"line_start":61,"line_end":61,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":127250,"byte_end":127285,"line_start":62,"line_end":62,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":127286,"byte_end":127289,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":127290,"byte_end":127387,"line_start":64,"line_end":64,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":127388,"byte_end":127463,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":127464,"byte_end":127544,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":127545,"byte_end":127556,"line_start":67,"line_end":67,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":513},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133648,"byte_end":133654,"line_start":89,"line_end":89,"column_start":10,"column_end":16},"name":"RwLock","qualname":"::rwlock::RwLock","value":"lock_api::RwLock<RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130089,"byte_end":130113,"line_start":11,"line_end":11,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130114,"byte_end":130117,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130118,"byte_end":130195,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130196,"byte_end":130275,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130276,"byte_end":130355,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130356,"byte_end":130414,"line_start":16,"line_end":16,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130415,"byte_end":130418,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This lock uses a task-fair locking policy which avoids both reader and","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130419,"byte_end":130493,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ writer starvation. This means that readers trying to acquire the lock will","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130494,"byte_end":130572,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ block even if the lock is unlocked when there are writers waiting to acquire","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130573,"byte_end":130653,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ the lock. Because of this, attempts to recursively acquire a read lock","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130654,"byte_end":130728,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ within a single thread may result in a deadlock.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130729,"byte_end":130781,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130782,"byte_end":130785,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130786,"byte_end":130863,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130864,"byte_end":130944,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":130945,"byte_end":131023,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131024,"byte_end":131102,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131103,"byte_end":131152,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131153,"byte_end":131156,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131157,"byte_end":131171,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131172,"byte_end":131175,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131176,"byte_end":131255,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same lock in succession, which can starve","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131256,"byte_end":131335,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ other threads waiting to acquire the rwlock. While this improves throughput","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131336,"byte_end":131415,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131416,"byte_end":131495,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ a rwlock it has just released, this can starve other threads.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131496,"byte_end":131561,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131562,"byte_end":131565,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131566,"byte_end":131648,"line_start":38,"line_end":38,"column_start":1,"column_end":83}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131649,"byte_end":131720,"line_start":39,"line_end":39,"column_start":1,"column_end":72}},{"value":"/ throughput. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131721,"byte_end":131798,"line_start":40,"line_end":40,"column_start":1,"column_end":78}},{"value":"/ which will force the lock to go to the next thread waiting for the rwlock.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131799,"byte_end":131877,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131878,"byte_end":131881,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131882,"byte_end":131959,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible impact on throughput considering the length","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":131960,"byte_end":132038,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ of the critical section.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132039,"byte_end":132067,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132068,"byte_end":132071,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132072,"byte_end":132150,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ or `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132151,"byte_end":132230,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ dropping the guard.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132231,"byte_end":132254,"line_start":49,"line_end":49,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132255,"byte_end":132258,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `RwLock`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132259,"byte_end":132311,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132312,"byte_end":132315,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ - Supports atomically downgrading a write lock into a read lock.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132316,"byte_end":132384,"line_start":53,"line_end":53,"column_start":1,"column_end":69}},{"value":"/ - Task-fair locking policy instead of an unspecified platform default.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132385,"byte_end":132459,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132460,"byte_end":132519,"line_start":55,"line_end":55,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132520,"byte_end":132595,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/   `RwLock` due to platform limitations.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132596,"byte_end":132639,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132640,"byte_end":132718,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132719,"byte_end":132769,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132770,"byte_end":132818,"line_start":60,"line_end":60,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132819,"byte_end":132888,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132889,"byte_end":132942,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the rwlock is fair on average.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":132943,"byte_end":133014,"line_start":63,"line_end":63,"column_start":1,"column_end":72}},{"value":"/ - Optionally allows making the rwlock fair by calling","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133015,"byte_end":133072,"line_start":64,"line_end":64,"column_start":1,"column_end":58}},{"value":"/   `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133073,"byte_end":133146,"line_start":65,"line_end":65,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133147,"byte_end":133150,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133151,"byte_end":133165,"line_start":67,"line_end":67,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133166,"byte_end":133169,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133170,"byte_end":133177,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::RwLock;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133178,"byte_end":133206,"line_start":70,"line_end":70,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133207,"byte_end":133210,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let lock = RwLock::new(5);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133211,"byte_end":133241,"line_start":72,"line_end":72,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133242,"byte_end":133245,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // many reader locks can be held at once","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133246,"byte_end":133290,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133291,"byte_end":133296,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/     let r1 = lock.read();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133297,"byte_end":133326,"line_start":76,"line_end":76,"column_start":1,"column_end":30}},{"value":"/     let r2 = lock.read();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133327,"byte_end":133356,"line_start":77,"line_end":77,"column_start":1,"column_end":30}},{"value":"/     assert_eq!(*r1, 5);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133357,"byte_end":133384,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/     assert_eq!(*r2, 5);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133385,"byte_end":133412,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/ } // read locks are dropped at this point","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133413,"byte_end":133458,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133459,"byte_end":133462,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // only one write lock may be held, however","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133463,"byte_end":133510,"line_start":82,"line_end":82,"column_start":1,"column_end":48}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133511,"byte_end":133516,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/     let mut w = lock.write();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133517,"byte_end":133550,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/     *w += 1;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133551,"byte_end":133567,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"/     assert_eq!(*w, 6);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133568,"byte_end":133594,"line_start":86,"line_end":86,"column_start":1,"column_end":27}},{"value":"/ } // write lock is dropped here","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133595,"byte_end":133630,"line_start":87,"line_end":87,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133631,"byte_end":133638,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133851,"byte_end":133863,"line_start":94,"line_end":94,"column_start":14,"column_end":26},"name":"const_rwlock","qualname":"::rwlock::const_rwlock","value":"pub const fn const_rwlock<T>(T) -> RwLock<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133693,"byte_end":133756,"line_start":91,"line_end":91,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133757,"byte_end":133760,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ This allows creating a `RwLock<T>` in a constant context on stable Rust.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133761,"byte_end":133837,"line_start":93,"line_end":93,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":517},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134057,"byte_end":134072,"line_start":100,"line_end":100,"column_start":10,"column_end":25},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"lock_api::RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":133962,"byte_end":134034,"line_start":98,"line_end":98,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134035,"byte_end":134047,"line_start":99,"line_end":99,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":520},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134227,"byte_end":134243,"line_start":104,"line_end":104,"column_start":10,"column_end":26},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"lock_api::RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134128,"byte_end":134204,"line_start":102,"line_end":102,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134205,"byte_end":134217,"line_start":103,"line_end":103,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":523},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134693,"byte_end":134714,"line_start":113,"line_end":113,"column_start":10,"column_end":31},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"lock_api::MappedRwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134300,"byte_end":134384,"line_start":106,"line_end":106,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134385,"byte_end":134420,"line_start":107,"line_end":107,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134421,"byte_end":134424,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134425,"byte_end":134514,"line_start":109,"line_end":109,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134515,"byte_end":134590,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134591,"byte_end":134671,"line_start":111,"line_end":111,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134672,"byte_end":134683,"line_start":112,"line_end":112,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":526},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":135173,"byte_end":135195,"line_start":122,"line_end":122,"column_start":10,"column_end":32},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"lock_api::MappedRwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134776,"byte_end":134862,"line_start":115,"line_end":115,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134863,"byte_end":134898,"line_start":116,"line_end":116,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134899,"byte_end":134902,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134903,"byte_end":134994,"line_start":118,"line_end":118,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":134995,"byte_end":135070,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":135071,"byte_end":135151,"line_start":120,"line_end":120,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":135152,"byte_end":135163,"line_start":121,"line_end":121,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":529},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":135357,"byte_end":135382,"line_start":126,"line_end":126,"column_start":10,"column_end":35},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"lock_api::RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":135258,"byte_end":135334,"line_start":124,"line_end":124,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/rwlock.rs","byte_start":135335,"byte_end":135347,"line_start":125,"line_end":125,"column_start":1,"column_end":13}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":2857,"byte_end":2874,"line_start":24,"line_end":24,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5418,"byte_end":5425,"line_start":93,"line_end":93,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":17567,"byte_end":17574,"line_start":394,"line_end":394,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":17673,"byte_end":17680,"line_start":401,"line_end":401,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/elision.rs","byte_start":38221,"byte_end":38232,"line_start":39,"line_end":39,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60182,"byte_end":60191,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61543,"byte_end":61547,"line_start":85,"line_end":85,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":68638,"byte_end":68648,"line_start":282,"line_end":282,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":69890,"byte_end":69894,"line_start":318,"line_end":318,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":69987,"byte_end":69991,"line_start":325,"line_end":325,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_fair_mutex.rs","byte_start":73658,"byte_end":73670,"line_start":14,"line_end":14,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_fair_mutex.rs","byte_start":74167,"byte_end":74179,"line_start":40,"line_end":40,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_fair_mutex.rs","byte_start":74380,"byte_end":74392,"line_start":52,"line_end":52,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_mutex.rs","byte_start":77985,"byte_end":77993,"line_start":58,"line_end":58,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_mutex.rs","byte_start":79580,"byte_end":79588,"line_start":119,"line_end":119,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_mutex.rs","byte_start":80118,"byte_end":80126,"line_start":141,"line_end":141,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_mutex.rs","byte_start":81117,"byte_end":81125,"line_start":180,"line_end":180,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":304},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":89209,"byte_end":89218,"line_start":59,"line_end":59,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":91628,"byte_end":91637,"line_start":154,"line_end":154,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":92570,"byte_end":92579,"line_start":191,"line_end":191,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":92947,"byte_end":92956,"line_start":205,"line_end":205,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":94623,"byte_end":94632,"line_start":270,"line_end":270,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":95230,"byte_end":95239,"line_start":294,"line_end":294,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":95981,"byte_end":95990,"line_start":322,"line_end":322,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":97893,"byte_end":97902,"line_start":397,"line_end":397,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":98751,"byte_end":98760,"line_start":427,"line_end":427,"column_start":53,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":99463,"byte_end":99472,"line_start":452,"line_end":452,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":100890,"byte_end":100899,"line_start":506,"line_end":506,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":464},{"krate":0,"index":469},{"krate":0,"index":474},{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":125310,"byte_end":125321,"line_start":15,"line_end":15,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/util.rs","byte_start":149731,"byte_end":149737,"line_start":15,"line_end":15,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":2857,"byte_end":2874,"line_start":24,"line_end":24,"column_start":6,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":647},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":5418,"byte_end":5425,"line_start":93,"line_end":93,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":66},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":17567,"byte_end":17574,"line_start":394,"line_end":394,"column_start":18,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":66},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/condvar.rs","byte_start":17673,"byte_end":17680,"line_start":401,"line_end":401,"column_start":21,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":66},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/elision.rs","byte_start":38221,"byte_end":38232,"line_start":39,"line_end":39,"column_start":27,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":2,"index":46519},"to":{"krate":0,"index":96}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":60182,"byte_end":60191,"line_start":36,"line_end":36,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":61543,"byte_end":61547,"line_start":85,"line_end":85,"column_start":6,"column_end":10},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":68638,"byte_end":68648,"line_start":282,"line_end":282,"column_start":27,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":196},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":69890,"byte_end":69894,"line_start":318,"line_end":318,"column_start":18,"column_end":22},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":180},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/once.rs","byte_start":69987,"byte_end":69991,"line_start":325,"line_end":325,"column_start":21,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":180},"to":{"krate":2,"index":9595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_fair_mutex.rs","byte_start":73658,"byte_end":73670,"line_start":14,"line_end":14,"column_start":36,"column_end":48},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":214},"to":{"krate":20,"index":32}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_fair_mutex.rs","byte_start":74167,"byte_end":74179,"line_start":40,"line_end":40,"column_start":40,"column_end":52},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":214},"to":{"krate":20,"index":39}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_fair_mutex.rs","byte_start":74380,"byte_end":74392,"line_start":52,"line_end":52,"column_start":41,"column_end":53},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":214},"to":{"krate":20,"index":42}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_mutex.rs","byte_start":77985,"byte_end":77993,"line_start":58,"line_end":58,"column_start":36,"column_end":44},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":280},"to":{"krate":20,"index":32}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_mutex.rs","byte_start":79580,"byte_end":79588,"line_start":119,"line_end":119,"column_start":40,"column_end":48},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":280},"to":{"krate":20,"index":39}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_mutex.rs","byte_start":80118,"byte_end":80126,"line_start":141,"line_end":141,"column_start":41,"column_end":49},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":280},"to":{"krate":20,"index":42}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_mutex.rs","byte_start":81117,"byte_end":81125,"line_start":180,"line_end":180,"column_start":6,"column_end":14},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":89209,"byte_end":89218,"line_start":59,"line_end":59,"column_start":37,"column_end":46},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":384},"to":{"krate":20,"index":512}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":91628,"byte_end":91637,"line_start":154,"line_end":154,"column_start":41,"column_end":50},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":384},"to":{"krate":20,"index":523}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":92570,"byte_end":92579,"line_start":191,"line_end":191,"column_start":46,"column_end":55},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":384},"to":{"krate":20,"index":528}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":92947,"byte_end":92956,"line_start":205,"line_end":205,"column_start":42,"column_end":51},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":384},"to":{"krate":20,"index":530}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":94623,"byte_end":94632,"line_start":270,"line_end":270,"column_start":46,"column_end":55},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":384},"to":{"krate":20,"index":537}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":95230,"byte_end":95239,"line_start":294,"line_end":294,"column_start":51,"column_end":60},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":384},"to":{"krate":20,"index":540}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":95981,"byte_end":95990,"line_start":322,"line_end":322,"column_start":44,"column_end":53},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":384},"to":{"krate":20,"index":543}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":97893,"byte_end":97902,"line_start":397,"line_end":397,"column_start":48,"column_end":57},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":384},"to":{"krate":20,"index":549}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":98751,"byte_end":98760,"line_start":427,"line_end":427,"column_start":53,"column_end":62},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":384},"to":{"krate":20,"index":552}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":99463,"byte_end":99472,"line_start":452,"line_end":452,"column_start":49,"column_end":58},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":384},"to":{"krate":20,"index":555}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/raw_rwlock.rs","byte_start":100890,"byte_end":100899,"line_start":506,"line_end":506,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/remutex.rs","byte_start":125310,"byte_end":125321,"line_start":15,"line_end":15,"column_start":29,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":490},"to":{"krate":20,"index":265}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.12.0/src/util.rs","byte_start":149731,"byte_end":149737,"line_start":15,"line_end":15,"column_start":35,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":2,"index":45974},"to":{"krate":0,"index":540}}]}