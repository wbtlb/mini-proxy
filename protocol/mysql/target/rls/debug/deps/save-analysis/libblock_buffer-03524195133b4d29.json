{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2","program":"/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","block_buffer","--edition=2018","/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=03524195133b4d29","-C","extra-filename=-03524195133b4d29","--out-dir","/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps","-L","dependency=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps","--extern","generic_array=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps/libgeneric_array-f500006f7f1c7943.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu"],"output":"/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps/libblock_buffer-03524195133b4d29.rmeta"},"prelude":{"crate_id":{"name":"block_buffer","disambiguator":[1890734334836265874,0]},"crate_root":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src","external_crates":[{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","num":4,"id":{"name":"generic_array","disambiguator":[14659237377528794186,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","num":5,"id":{"name":"typenum","disambiguator":[2930080192617149959,0]}}],"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":0,"byte_end":10020,"line_start":1,"line_end":325,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":4,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":369,"byte_end":382,"line_start":10,"line_end":10,"column_start":9,"column_end":22},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":0,"byte_end":10020,"line_start":1,"line_end":325,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":119},{"krate":0,"index":125},{"krate":0,"index":66},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":89},{"krate":0,"index":101}],"decl_id":null,"docs":" Fixed size buffer for block processing of data.\n","sig":null,"attributes":[{"value":"/ Fixed size buffer for block processing of data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":0,"byte_end":51,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"no_std","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":52,"byte_end":62,"line_start":2,"line_end":2,"column_start":1,"column_end":11}},{"value":"warn(missing_docs, rust_2018_idioms)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":319,"byte_end":359,"line_start":8,"line_end":8,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/sealed.rs","byte_start":10118,"byte_end":10124,"line_start":5,"line_end":5,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::sealed::Sealed","value":"Sealed","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":" Sealed trait for buffer kinds.\n","sig":null,"attributes":[{"value":"/ Sealed trait for buffer kinds.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/sealed.rs","byte_start":10073,"byte_end":10107,"line_start":4,"line_end":4,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/sealed.rs","byte_start":10254,"byte_end":10263,"line_start":8,"line_end":8,"column_start":8,"column_end":17},"name":"invariant","qualname":"::sealed::Sealed::invariant","value":"pub fn invariant(usize, usize) -> bool","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Invariant guaranteed by a buffer kind, i.e. with correct\n buffer code this function always returns true.\n","sig":null,"attributes":[{"value":"/ Invariant guaranteed by a buffer kind, i.e. with correct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/sealed.rs","byte_start":10131,"byte_end":10191,"line_start":6,"line_end":6,"column_start":5,"column_end":65}},{"value":"/ buffer code this function always returns true.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/sealed.rs","byte_start":10196,"byte_end":10246,"line_start":7,"line_end":7,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/sealed.rs","byte_start":10368,"byte_end":10380,"line_start":11,"line_end":11,"column_start":8,"column_end":20},"name":"split_blocks","qualname":"::sealed::Sealed::split_blocks","value":"pub fn split_blocks<N: ArrayLength<u8>>(&[u8]) -> (&[Block<N>], &[u8])","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Split input data into slice fo blocks and tail.\n","sig":null,"attributes":[{"value":"/ Split input data into slice fo blocks and tail.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/sealed.rs","byte_start":10309,"byte_end":10360,"line_start":10,"line_end":10,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":57},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":588,"byte_end":593,"line_start":21,"line_end":21,"column_start":10,"column_end":15},"name":"Block","qualname":"::Block","value":"GenericArray<u8, BlockSize>","parent":null,"children":[],"decl_id":null,"docs":" Block on which `BlockBuffer` operates.\n","sig":null,"attributes":[{"value":"/ Block on which `BlockBuffer` operates.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":536,"byte_end":578,"line_start":20,"line_end":20,"column_start":1,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":59},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":675,"byte_end":685,"line_start":24,"line_end":24,"column_start":11,"column_end":21},"name":"BufferKind","qualname":"::BufferKind","value":"BufferKind: sealed::Sealed","parent":null,"children":[],"decl_id":null,"docs":" Trait for buffer kinds.\n","sig":null,"attributes":[{"value":"/ Trait for buffer kinds.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":637,"byte_end":664,"line_start":23,"line_end":23,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":103},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":871,"byte_end":876,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Eager","qualname":"::Eager","value":"Eager {  }","parent":null,"children":[],"decl_id":null,"docs":" Eager block buffer kind, which guarantees that buffer position\n always lies in the range of `0..BlockSize`.\n","sig":null,"attributes":[{"value":"/ Eager block buffer kind, which guarantees that buffer position","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":706,"byte_end":772,"line_start":26,"line_end":26,"column_start":1,"column_end":67}},{"value":"/ always lies in the range of `0..BlockSize`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":773,"byte_end":820,"line_start":27,"line_end":27,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":111},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1046,"byte_end":1050,"line_start":34,"line_end":34,"column_start":12,"column_end":16},"name":"Lazy","qualname":"::Lazy","value":"Lazy {  }","parent":null,"children":[],"decl_id":null,"docs":" Lazy block buffer kind, which guarantees that buffer position\n always lies in the range of `0..=BlockSize`.\n","sig":null,"attributes":[{"value":"/ Lazy block buffer kind, which guarantees that buffer position","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":881,"byte_end":946,"line_start":31,"line_end":31,"column_start":1,"column_end":66}},{"value":"/ always lies in the range of `0..=BlockSize`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":947,"byte_end":995,"line_start":32,"line_end":32,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":62},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1146,"byte_end":1157,"line_start":40,"line_end":40,"column_start":10,"column_end":21},"name":"EagerBuffer","qualname":"::EagerBuffer","value":"BlockBuffer<B, Eager>","parent":null,"children":[],"decl_id":null,"docs":" Eager block buffer.\n","sig":null,"attributes":[{"value":"/ Eager block buffer.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1113,"byte_end":1136,"line_start":39,"line_end":39,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":64},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1218,"byte_end":1228,"line_start":42,"line_end":42,"column_start":10,"column_end":20},"name":"LazyBuffer","qualname":"::LazyBuffer","value":"BlockBuffer<B, Lazy>","parent":null,"children":[],"decl_id":null,"docs":" Lazy block buffer.\n","sig":null,"attributes":[{"value":"/ Lazy block buffer.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1186,"byte_end":1208,"line_start":41,"line_end":41,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":119},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1326,"byte_end":1337,"line_start":46,"line_end":46,"column_start":12,"column_end":23},"name":"BlockBuffer","qualname":"::BlockBuffer","value":"BlockBuffer {  }","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124}],"decl_id":null,"docs":" Buffer for block processing of data.\n","sig":null,"attributes":[{"value":"/ Buffer for block processing of data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1257,"byte_end":1297,"line_start":44,"line_end":44,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2516,"byte_end":2519,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockBuffer<BlockSize, Kind>>::new","value":"pub fn new(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new buffer from slice.","sig":null,"attributes":[{"value":"/ Create new buffer from slice.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2365,"byte_end":2398,"line_start":93,"line_end":93,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2403,"byte_end":2406,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2411,"byte_end":2423,"line_start":95,"line_end":95,"column_start":5,"column_end":17}},{"value":"/ If slice length is not valid for used buffer kind.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2428,"byte_end":2482,"line_start":96,"line_end":96,"column_start":5,"column_end":59}},{"value":"inline(always)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2487,"byte_end":2504,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2994,"byte_end":3007,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"name":"digest_blocks","qualname":"<BlockBuffer<BlockSize, Kind>>::digest_blocks","value":"pub fn digest_blocks<impl FnMut(&[Block<BlockSize>]): FnMut(&[Block<BlockSize>])\n-> ()>(&mut Self, &[u8], impl FnMut(&[Block<BlockSize>]))","parent":null,"children":[],"decl_id":null,"docs":" Digest data in `input` in blocks of size `BlockSize` using\n the `compress` function, which accepts slice of blocks.\n","sig":null,"attributes":[{"value":"/ Digest data in `input` in blocks of size `BlockSize` using","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2842,"byte_end":2904,"line_start":110,"line_end":110,"column_start":5,"column_end":67}},{"value":"/ the `compress` function, which accepts slice of blocks.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2909,"byte_end":2968,"line_start":111,"line_end":111,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2973,"byte_end":2982,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":4578,"byte_end":4583,"line_start":155,"line_end":155,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockBuffer<BlockSize, Kind>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset buffer by setting cursor position to zero.\n","sig":null,"attributes":[{"value":"/ Reset buffer by setting cursor position to zero.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":4492,"byte_end":4544,"line_start":153,"line_end":153,"column_start":5,"column_end":57}},{"value":"inline(always)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":4549,"byte_end":4566,"line_start":154,"line_end":154,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":4738,"byte_end":4752,"line_start":161,"line_end":161,"column_start":12,"column_end":26},"name":"pad_with_zeros","qualname":"<BlockBuffer<BlockSize, Kind>>::pad_with_zeros","value":"pub fn pad_with_zeros(&mut Self) -> &mut Block<BlockSize>","parent":null,"children":[],"decl_id":null,"docs":" Pad remaining data with zeros and return resulting block.\n","sig":null,"attributes":[{"value":"/ Pad remaining data with zeros and return resulting block.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":4643,"byte_end":4704,"line_start":159,"line_end":159,"column_start":5,"column_end":66}},{"value":"inline(always)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":4709,"byte_end":4726,"line_start":160,"line_end":160,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5025,"byte_end":5032,"line_start":170,"line_end":170,"column_start":12,"column_end":19},"name":"get_pos","qualname":"<BlockBuffer<BlockSize, Kind>>::get_pos","value":"pub fn get_pos(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return current cursor position.\n","sig":null,"attributes":[{"value":"/ Return current cursor position.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":4956,"byte_end":4991,"line_start":168,"line_end":168,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":4996,"byte_end":5013,"line_start":169,"line_end":169,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5436,"byte_end":5444,"line_start":184,"line_end":184,"column_start":12,"column_end":20},"name":"get_data","qualname":"<BlockBuffer<BlockSize, Kind>>::get_data","value":"pub fn get_data(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return slice of data stored inside the buffer.\n","sig":null,"attributes":[{"value":"/ Return slice of data stored inside the buffer.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5352,"byte_end":5402,"line_start":182,"line_end":182,"column_start":5,"column_end":55}},{"value":"inline(always)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5407,"byte_end":5424,"line_start":183,"line_end":183,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5658,"byte_end":5661,"line_start":193,"line_end":193,"column_start":12,"column_end":15},"name":"set","qualname":"<BlockBuffer<BlockSize, Kind>>::set","value":"pub fn set(&mut Self, Block<BlockSize>, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set buffer content and cursor position.","sig":null,"attributes":[{"value":"/ Set buffer content and cursor position.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5513,"byte_end":5556,"line_start":188,"line_end":188,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5561,"byte_end":5564,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5569,"byte_end":5581,"line_start":190,"line_end":190,"column_start":5,"column_end":17}},{"value":"/ If `pos` is bigger or equal to block size.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5586,"byte_end":5632,"line_start":191,"line_end":191,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5637,"byte_end":5646,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5925,"byte_end":5929,"line_start":201,"line_end":201,"column_start":12,"column_end":16},"name":"size","qualname":"<BlockBuffer<BlockSize, Kind>>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return size of the internall buffer in bytes.\n","sig":null,"attributes":[{"value":"/ Return size of the internall buffer in bytes.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5842,"byte_end":5891,"line_start":199,"line_end":199,"column_start":5,"column_end":54}},{"value":"inline(always)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5896,"byte_end":5913,"line_start":200,"line_end":200,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":6079,"byte_end":6088,"line_start":207,"line_end":207,"column_start":12,"column_end":21},"name":"remaining","qualname":"<BlockBuffer<BlockSize, Kind>>::remaining","value":"pub fn remaining(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return number of remaining bytes in the internall buffer.\n","sig":null,"attributes":[{"value":"/ Return number of remaining bytes in the internall buffer.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":5984,"byte_end":6045,"line_start":205,"line_end":205,"column_start":5,"column_end":66}},{"value":"inline(always)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":6050,"byte_end":6067,"line_start":206,"line_end":206,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":6525,"byte_end":6533,"line_start":225,"line_end":225,"column_start":12,"column_end":20},"name":"set_data","qualname":"<BlockBuffer<BlockSize, Eager>>::set_data","value":"pub fn set_data<impl FnMut(&mut [Block<BlockSize>]): FnMut(&mut [Block<BlockSize>])\n-> ()>(&mut Self, &mut [u8], impl FnMut(&mut [Block<BlockSize>]))","parent":null,"children":[],"decl_id":null,"docs":" Set `data` to generated blocks.\n","sig":null,"attributes":[{"value":"/ Set `data` to generated blocks.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":6464,"byte_end":6499,"line_start":223,"line_end":223,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":6504,"byte_end":6513,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":7829,"byte_end":7839,"line_start":265,"line_end":265,"column_start":12,"column_end":22},"name":"digest_pad","qualname":"<BlockBuffer<BlockSize, Eager>>::digest_pad","value":"pub fn digest_pad<impl FnMut(&Block<BlockSize>): FnMut(&Block<BlockSize>) ->\n()>(&mut Self, u8, &[u8], impl FnMut(&Block<BlockSize>))","parent":null,"children":[],"decl_id":null,"docs":" Compress remaining data after padding it with `delim`, zeros and\n the `suffix` bytes. If there is not enough unused space, `compress`\n will be called twice.","sig":null,"attributes":[{"value":"/ Compress remaining data after padding it with `delim`, zeros and","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":7544,"byte_end":7612,"line_start":258,"line_end":258,"column_start":5,"column_end":73}},{"value":"/ the `suffix` bytes. If there is not enough unused space, `compress`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":7617,"byte_end":7688,"line_start":259,"line_end":259,"column_start":5,"column_end":76}},{"value":"/ will be called twice.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":7693,"byte_end":7718,"line_start":260,"line_end":260,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":7723,"byte_end":7726,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":7731,"byte_end":7743,"line_start":262,"line_end":262,"column_start":5,"column_end":17}},{"value":"/ If suffix length is bigger than block size.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":7748,"byte_end":7795,"line_start":263,"line_end":263,"column_start":5,"column_end":52}},{"value":"inline(always)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":7800,"byte_end":7817,"line_start":264,"line_end":264,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":8756,"byte_end":8772,"line_start":296,"line_end":296,"column_start":12,"column_end":28},"name":"len64_padding_be","qualname":"<BlockBuffer<BlockSize, Eager>>::len64_padding_be","value":"pub fn len64_padding_be<impl FnMut(&Block<BlockSize>): FnMut(&Block<BlockSize>)\n-> ()>(&mut Self, u64, impl FnMut(&Block<BlockSize>))","parent":null,"children":[],"decl_id":null,"docs":" Pad message with 0x80, zeros and 64-bit message length using\n big-endian byte order.\n","sig":null,"attributes":[{"value":"/ Pad message with 0x80, zeros and 64-bit message length using","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":8635,"byte_end":8699,"line_start":293,"line_end":293,"column_start":5,"column_end":69}},{"value":"/ big-endian byte order.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":8704,"byte_end":8730,"line_start":294,"line_end":294,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":8735,"byte_end":8744,"line_start":295,"line_end":295,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":9043,"byte_end":9059,"line_start":303,"line_end":303,"column_start":12,"column_end":28},"name":"len64_padding_le","qualname":"<BlockBuffer<BlockSize, Eager>>::len64_padding_le","value":"pub fn len64_padding_le<impl FnMut(&Block<BlockSize>): FnMut(&Block<BlockSize>)\n-> ()>(&mut Self, u64, impl FnMut(&Block<BlockSize>))","parent":null,"children":[],"decl_id":null,"docs":" Pad message with 0x80, zeros and 64-bit message length using\n little-endian byte order.\n","sig":null,"attributes":[{"value":"/ Pad message with 0x80, zeros and 64-bit message length using","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":8919,"byte_end":8983,"line_start":300,"line_end":300,"column_start":5,"column_end":69}},{"value":"/ little-endian byte order.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":8988,"byte_end":9017,"line_start":301,"line_end":301,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":9022,"byte_end":9031,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":9328,"byte_end":9345,"line_start":310,"line_end":310,"column_start":12,"column_end":29},"name":"len128_padding_be","qualname":"<BlockBuffer<BlockSize, Eager>>::len128_padding_be","value":"pub fn len128_padding_be<impl FnMut(&Block<BlockSize>): FnMut(&Block<BlockSize>)\n-> ()>(&mut Self, u128, impl FnMut(&Block<BlockSize>))","parent":null,"children":[],"decl_id":null,"docs":" Pad message with 0x80, zeros and 128-bit message length using\n big-endian byte order.\n","sig":null,"attributes":[{"value":"/ Pad message with 0x80, zeros and 128-bit message length using","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":9206,"byte_end":9271,"line_start":307,"line_end":307,"column_start":5,"column_end":70}},{"value":"/ big-endian byte order.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":9276,"byte_end":9302,"line_start":308,"line_end":308,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":9307,"byte_end":9316,"line_start":309,"line_end":309,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/sealed.rs","byte_start":10465,"byte_end":10470,"line_start":14,"line_end":14,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/sealed.rs","byte_start":11230,"byte_end":11234,"line_start":38,"line_end":38,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1075,"byte_end":1080,"line_start":36,"line_end":36,"column_start":21,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1104,"byte_end":1108,"line_start":37,"line_end":37,"column_start":21,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1574,"byte_end":1585,"line_start":57,"line_end":57,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1897,"byte_end":1908,"line_start":72,"line_end":72,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2221,"byte_end":2232,"line_start":87,"line_end":87,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":6341,"byte_end":6352,"line_start":218,"line_end":218,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/sealed.rs","byte_start":10465,"byte_end":10470,"line_start":14,"line_end":14,"column_start":24,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":103},"to":{"krate":0,"index":45}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/sealed.rs","byte_start":11230,"byte_end":11234,"line_start":38,"line_end":38,"column_start":24,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":111},"to":{"krate":0,"index":45}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":695,"byte_end":701,"line_start":24,"line_end":24,"column_start":31,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":45},"to":{"krate":0,"index":59}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1075,"byte_end":1080,"line_start":36,"line_end":36,"column_start":21,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":103},"to":{"krate":0,"index":59}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1104,"byte_end":1108,"line_start":37,"line_end":37,"column_start":21,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":111},"to":{"krate":0,"index":59}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1574,"byte_end":1585,"line_start":57,"line_end":57,"column_start":35,"column_end":46},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":119},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":1897,"byte_end":1908,"line_start":72,"line_end":72,"column_start":33,"column_end":44},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":119},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":2221,"byte_end":2232,"line_start":87,"line_end":87,"column_start":23,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.10.2/src/lib.rs","byte_start":6341,"byte_end":6352,"line_start":218,"line_end":218,"column_start":17,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":119},"to":{"krate":4294967295,"index":4294967295}}]}