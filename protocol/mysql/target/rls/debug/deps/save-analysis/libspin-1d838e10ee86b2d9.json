{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2","program":"/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","spin","/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=1d838e10ee86b2d9","-C","extra-filename=-1d838e10ee86b2d9","--out-dir","/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps","-L","dependency=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu"],"output":"/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps/libspin-1d838e10ee86b2d9.rmeta"},"prelude":{"crate_id":{"name":"spin","disambiguator":[16689960791893565133,0]},"crate_root":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src","external_crates":[{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}}],"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","byte_start":0,"byte_end":243,"line_start":1,"line_end":18,"column_start":1,"column_end":10}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","byte_start":169,"byte_end":170,"line_start":12,"line_end":12,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","byte_start":189,"byte_end":190,"line_start":13,"line_end":13,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","byte_start":206,"byte_end":207,"line_start":14,"line_end":14,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","byte_start":0,"byte_end":243,"line_start":1,"line_end":18,"column_start":1,"column_end":10},"name":"","qualname":"::","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":91},{"krate":0,"index":204}],"decl_id":null,"docs":" Synchronization primitives based on spinning\n","sig":null,"attributes":[{"value":"crate_type = \"lib\"","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"warn(missing_docs)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","byte_start":23,"byte_end":45,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ Synchronization primitives based on spinning","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","byte_start":47,"byte_end":95,"line_start":4,"line_end":4,"column_start":1,"column_end":49}},{"value":"no_std","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/lib.rs","byte_start":97,"byte_end":107,"line_start":6,"line_end":6,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":50},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1903,"byte_end":1908,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53}],"decl_id":null,"docs":" This type provides MUTual EXclusion based on spinning.","sig":null,"attributes":[{"value":"/ This type provides MUTual EXclusion based on spinning.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":504,"byte_end":562,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":563,"byte_end":566,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Description","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":567,"byte_end":584,"line_start":11,"line_end":11,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":585,"byte_end":588,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The behaviour of these lock is similar to their namesakes in `std::sync`. they","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":589,"byte_end":671,"line_start":13,"line_end":13,"column_start":1,"column_end":83}},{"value":"/ differ on the following:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":672,"byte_end":700,"line_start":14,"line_end":14,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":701,"byte_end":704,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ - The lock will not be poisoned in case of failure;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":705,"byte_end":760,"line_start":16,"line_end":16,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":761,"byte_end":764,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Simple examples","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":765,"byte_end":786,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":787,"byte_end":790,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":791,"byte_end":798,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":799,"byte_end":812,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/ let spin_mutex = spin::Mutex::new(0);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":813,"byte_end":854,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":855,"byte_end":858,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Modify the data","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":859,"byte_end":881,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":882,"byte_end":887,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/     let mut data = spin_mutex.lock();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":888,"byte_end":929,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/     *data = 2;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":930,"byte_end":948,"line_start":27,"line_end":27,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":949,"byte_end":954,"line_start":28,"line_end":28,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":955,"byte_end":958,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // Read the data","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":959,"byte_end":979,"line_start":30,"line_end":30,"column_start":1,"column_end":21}},{"value":"/ let answer =","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":980,"byte_end":996,"line_start":31,"line_end":31,"column_start":1,"column_end":17}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":997,"byte_end":1002,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/     let data = spin_mutex.lock();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1003,"byte_end":1040,"line_start":33,"line_end":33,"column_start":1,"column_end":38}},{"value":"/     *data","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1041,"byte_end":1054,"line_start":34,"line_end":34,"column_start":1,"column_end":14}},{"value":"/ };","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1055,"byte_end":1061,"line_start":35,"line_end":35,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1062,"byte_end":1065,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(answer, 2);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1066,"byte_end":1092,"line_start":37,"line_end":37,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1093,"byte_end":1100,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1101,"byte_end":1104,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Thread-safety example","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1105,"byte_end":1132,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1133,"byte_end":1136,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1137,"byte_end":1144,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1145,"byte_end":1158,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/ use std::sync::{Arc, Barrier};","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1159,"byte_end":1193,"line_start":44,"line_end":44,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1194,"byte_end":1197,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ let numthreads = 1000;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1198,"byte_end":1224,"line_start":46,"line_end":46,"column_start":1,"column_end":27}},{"value":"/ let spin_mutex = Arc::new(spin::Mutex::new(0));","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1225,"byte_end":1276,"line_start":47,"line_end":47,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1277,"byte_end":1280,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ // We use a barrier to ensure the readout happens after all writing","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1281,"byte_end":1352,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/ let barrier = Arc::new(Barrier::new(numthreads + 1));","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1353,"byte_end":1410,"line_start":50,"line_end":50,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1411,"byte_end":1414,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ for _ in (0..numthreads)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1415,"byte_end":1443,"line_start":52,"line_end":52,"column_start":1,"column_end":29}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1444,"byte_end":1449,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/     let my_barrier = barrier.clone();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1450,"byte_end":1491,"line_start":54,"line_end":54,"column_start":1,"column_end":42}},{"value":"/     let my_lock = spin_mutex.clone();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1492,"byte_end":1533,"line_start":55,"line_end":55,"column_start":1,"column_end":42}},{"value":"/     std::thread::spawn(move||","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1534,"byte_end":1567,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/     {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1568,"byte_end":1577,"line_start":57,"line_end":57,"column_start":1,"column_end":10}},{"value":"/         let mut guard = my_lock.lock();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1578,"byte_end":1621,"line_start":58,"line_end":58,"column_start":1,"column_end":44}},{"value":"/         *guard += 1;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1622,"byte_end":1646,"line_start":59,"line_end":59,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1647,"byte_end":1650,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/         // Release the lock to prevent a deadlock","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1651,"byte_end":1704,"line_start":61,"line_end":61,"column_start":1,"column_end":54}},{"value":"/         drop(guard);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1705,"byte_end":1729,"line_start":62,"line_end":62,"column_start":1,"column_end":25}},{"value":"/         my_barrier.wait();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1730,"byte_end":1760,"line_start":63,"line_end":63,"column_start":1,"column_end":31}},{"value":"/     });","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1761,"byte_end":1772,"line_start":64,"line_end":64,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1773,"byte_end":1778,"line_start":65,"line_end":65,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1779,"byte_end":1782,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ barrier.wait();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1783,"byte_end":1802,"line_start":67,"line_end":67,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1803,"byte_end":1806,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let answer = { *spin_mutex.lock() };","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1807,"byte_end":1847,"line_start":69,"line_end":69,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(answer, numthreads);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1848,"byte_end":1883,"line_start":70,"line_end":70,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1884,"byte_end":1891,"line_start":71,"line_end":71,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":261},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2124,"byte_end":2134,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265}],"decl_id":null,"docs":" A guard to which the protected data can be accessed","sig":null,"attributes":[{"value":"/ A guard to which the protected data can be accessed","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":1972,"byte_end":2027,"line_start":78,"line_end":78,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2028,"byte_end":2031,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2032,"byte_end":2095,"line_start":80,"line_end":80,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2745,"byte_end":2748,"line_start":109,"line_end":109,"column_start":18,"column_end":21},"name":"new","qualname":"<Mutex<T>>::new","value":"pub const fn new(T) -> Mutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new spinlock wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new spinlock wrapping the supplied data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2376,"byte_end":2430,"line_start":94,"line_end":94,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2435,"byte_end":2438,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ May be used statically:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2443,"byte_end":2470,"line_start":96,"line_end":96,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2475,"byte_end":2478,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2483,"byte_end":2490,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2495,"byte_end":2508,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2513,"byte_end":2516,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ static MUTEX: spin::Mutex<()> = spin::Mutex::new(());","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2521,"byte_end":2578,"line_start":101,"line_end":101,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2583,"byte_end":2586,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2591,"byte_end":2606,"line_start":103,"line_end":103,"column_start":5,"column_end":20}},{"value":"/     let lock = MUTEX.lock();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2611,"byte_end":2643,"line_start":104,"line_end":104,"column_start":5,"column_end":37}},{"value":"/     // do something with lock","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2648,"byte_end":2681,"line_start":105,"line_end":105,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2686,"byte_end":2705,"line_start":106,"line_end":106,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2710,"byte_end":2715,"line_start":107,"line_end":107,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2720,"byte_end":2727,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2981,"byte_end":2991,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2914,"byte_end":2969,"line_start":118,"line_end":118,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4025,"byte_end":4029,"line_start":156,"line_end":156,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks the spinlock and returns a guard.","sig":null,"attributes":[{"value":"/ Locks the spinlock and returns a guard.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3546,"byte_end":3589,"line_start":141,"line_end":141,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3594,"byte_end":3597,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ The returned value may be dereferenced for data access","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3602,"byte_end":3660,"line_start":143,"line_end":143,"column_start":5,"column_end":63}},{"value":"/ and the lock will be dropped when the guard falls out of scope.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3665,"byte_end":3732,"line_start":144,"line_end":144,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3737,"byte_end":3740,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3745,"byte_end":3752,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::Mutex::new(0);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3757,"byte_end":3794,"line_start":147,"line_end":147,"column_start":5,"column_end":42}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3799,"byte_end":3804,"line_start":148,"line_end":148,"column_start":5,"column_end":10}},{"value":"/     let mut data = mylock.lock();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3809,"byte_end":3846,"line_start":149,"line_end":149,"column_start":5,"column_end":42}},{"value":"/     // The lock is now locked and the data can be accessed","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3851,"byte_end":3913,"line_start":150,"line_end":150,"column_start":5,"column_end":67}},{"value":"/     *data += 1;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3918,"byte_end":3937,"line_start":151,"line_end":151,"column_start":5,"column_end":24}},{"value":"/     // The lock is implicitly dropped","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3942,"byte_end":3983,"line_start":152,"line_end":152,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3988,"byte_end":3993,"line_start":153,"line_end":153,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3998,"byte_end":4001,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4006,"byte_end":4013,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4548,"byte_end":4560,"line_start":173,"line_end":173,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock the spinlock.","sig":null,"attributes":[{"value":"/ Force unlock the spinlock.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4220,"byte_end":4250,"line_start":166,"line_end":166,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4255,"byte_end":4258,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if the lock is not held by the current","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4263,"byte_end":4332,"line_start":168,"line_end":168,"column_start":5,"column_end":74}},{"value":"/ thread. However, this can be useful in some instances for exposing the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4337,"byte_end":4411,"line_start":169,"line_end":169,"column_start":5,"column_end":79}},{"value":"/ lock to FFI that doesn't know how to deal with RAII.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4416,"byte_end":4472,"line_start":170,"line_end":170,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4477,"byte_end":4480,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ If the lock isn't held, this is a no-op.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4485,"byte_end":4529,"line_start":172,"line_end":172,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4768,"byte_end":4776,"line_start":179,"line_end":179,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to lock the mutex. If it is already locked, it will return None. Otherwise it returns\n a guard within Some.\n","sig":null,"attributes":[{"value":"/ Tries to lock the mutex. If it is already locked, it will return None. Otherwise it returns","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4632,"byte_end":4727,"line_start":177,"line_end":177,"column_start":5,"column_end":100}},{"value":"/ a guard within Some.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":4732,"byte_end":4756,"line_start":178,"line_end":178,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":127},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12439,"byte_end":12445,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rw_lock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10246,"byte_end":10270,"line_start":10,"line_end":10,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10271,"byte_end":10274,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10275,"byte_end":10352,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10353,"byte_end":10432,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10433,"byte_end":10512,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10513,"byte_end":10571,"line_start":15,"line_end":15,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10572,"byte_end":10575,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10576,"byte_end":10653,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across tasks and `Sync` to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10654,"byte_end":10732,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10733,"byte_end":10811,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10812,"byte_end":10890,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10891,"byte_end":10940,"line_start":21,"line_end":21,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10941,"byte_end":10944,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ An [`RwLockUpgradeableGuard`](RwLockUpgradeableGuard) can be upgraded to a","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":10945,"byte_end":11023,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ writable guard through the [`RwLockUpgradeableGuard::upgrade`](RwLockUpgradeableGuard::upgrade)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11024,"byte_end":11123,"line_start":24,"line_end":24,"column_start":1,"column_end":100}},{"value":"/ [`RwLockUpgradeableGuard::try_upgrade`](RwLockUpgradeableGuard::try_upgrade) functions.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11124,"byte_end":11215,"line_start":25,"line_end":25,"column_start":1,"column_end":92}},{"value":"/ Writable or upgradeable guards can be downgraded through their respective `downgrade`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11216,"byte_end":11305,"line_start":26,"line_end":26,"column_start":1,"column_end":90}},{"value":"/ functions.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11306,"byte_end":11320,"line_start":27,"line_end":27,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11321,"byte_end":11324,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Based on Facebook's","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11325,"byte_end":11348,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"/ [`folly/RWSpinLock.h`](https://github.com/facebook/folly/blob/a0394d84f2d5c3e50ebfd0566f9d3acb52cfab5a/folly/synchronization/RWSpinLock.h).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11349,"byte_end":11492,"line_start":30,"line_end":30,"column_start":1,"column_end":144}},{"value":"/ This implementation is unfair to writers - if the lock always has readers, then no writers will","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11493,"byte_end":11592,"line_start":31,"line_end":31,"column_start":1,"column_end":100}},{"value":"/ ever get a chance. Using an upgradeable lock guard can *somewhat* alleviate this issue as no","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11593,"byte_end":11689,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ new readers are allowed when an upgradeable guard is held, but upgradeable guards can be taken","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11690,"byte_end":11788,"line_start":33,"line_end":33,"column_start":1,"column_end":99}},{"value":"/ when there are existing readers. However if the lock is that highly contended and writes are","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11789,"byte_end":11885,"line_start":34,"line_end":34,"column_start":1,"column_end":97}},{"value":"/ crucial then this implementation may be a poor choice.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11886,"byte_end":11944,"line_start":35,"line_end":35,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11945,"byte_end":11948,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11949,"byte_end":11963,"line_start":37,"line_end":37,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11964,"byte_end":11967,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11968,"byte_end":11975,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11976,"byte_end":11989,"line_start":40,"line_end":40,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11990,"byte_end":11993,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::RwLock::new(5);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":11994,"byte_end":12030,"line_start":42,"line_end":42,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12031,"byte_end":12034,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // many reader locks can be held at once","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12035,"byte_end":12079,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12080,"byte_end":12085,"line_start":45,"line_end":45,"column_start":1,"column_end":6}},{"value":"/     let r1 = lock.read();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12086,"byte_end":12115,"line_start":46,"line_end":46,"column_start":1,"column_end":30}},{"value":"/     let r2 = lock.read();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12116,"byte_end":12145,"line_start":47,"line_end":47,"column_start":1,"column_end":30}},{"value":"/     assert_eq!(*r1, 5);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12146,"byte_end":12173,"line_start":48,"line_end":48,"column_start":1,"column_end":28}},{"value":"/     assert_eq!(*r2, 5);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12174,"byte_end":12201,"line_start":49,"line_end":49,"column_start":1,"column_end":28}},{"value":"/ } // read locks are dropped at this point","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12202,"byte_end":12247,"line_start":50,"line_end":50,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12248,"byte_end":12251,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ // only one write lock may be held, however","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12252,"byte_end":12299,"line_start":52,"line_end":52,"column_start":1,"column_end":48}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12300,"byte_end":12305,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/     let mut w = lock.write();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12306,"byte_end":12339,"line_start":54,"line_end":54,"column_start":1,"column_end":34}},{"value":"/     *w += 1;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12340,"byte_end":12356,"line_start":55,"line_end":55,"column_start":1,"column_end":17}},{"value":"/     assert_eq!(*w, 6);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12357,"byte_end":12383,"line_start":56,"line_end":56,"column_start":1,"column_end":27}},{"value":"/ } // write lock is dropped here","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12384,"byte_end":12419,"line_start":57,"line_end":57,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12420,"byte_end":12427,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":270},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12792,"byte_end":12807,"line_start":73,"line_end":73,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rw_lock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274}],"decl_id":null,"docs":" A guard from which the protected data can be read","sig":null,"attributes":[{"value":"/ A guard from which the protected data can be read","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12598,"byte_end":12651,"line_start":68,"line_end":68,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12652,"byte_end":12655,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will decrement the read count,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12656,"byte_end":12727,"line_start":70,"line_end":70,"column_start":1,"column_end":72}},{"value":"/ potentially releasing the lock.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12728,"byte_end":12763,"line_start":71,"line_end":71,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":279},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13033,"byte_end":13049,"line_start":82,"line_end":82,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rw_lock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"decl_id":null,"docs":" A guard to which the protected data can be written","sig":null,"attributes":[{"value":"/ A guard to which the protected data can be written","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12882,"byte_end":12936,"line_start":78,"line_end":78,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12937,"byte_end":12940,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":12941,"byte_end":13004,"line_start":80,"line_end":80,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":289},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13604,"byte_end":13626,"line_start":98,"line_end":98,"column_start":12,"column_end":34},"name":"RwLockUpgradeableGuard","qualname":"::rw_lock::RwLockUpgradeableGuard","value":"RwLockUpgradeableGuard {  }","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294}],"decl_id":null,"docs":" A guard from which the protected data can be read, and can be upgraded\n to a writable guard if needed","sig":null,"attributes":[{"value":"/ A guard from which the protected data can be read, and can be upgraded","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13183,"byte_end":13257,"line_start":89,"line_end":89,"column_start":1,"column_end":75}},{"value":"/ to a writable guard if needed","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13258,"byte_end":13291,"line_start":90,"line_end":90,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13292,"byte_end":13295,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ No writers or other upgradeable guards can exist while this is in scope. New reader","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13296,"byte_end":13383,"line_start":92,"line_end":92,"column_start":1,"column_end":88}},{"value":"/ creation is prevented (to alleviate writer starvation) but there may be existing readers","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13384,"byte_end":13476,"line_start":93,"line_end":93,"column_start":1,"column_end":93}},{"value":"/ when the lock is acquired.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13477,"byte_end":13507,"line_start":94,"line_end":94,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13508,"byte_end":13511,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13512,"byte_end":13575,"line_start":96,"line_end":96,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14329,"byte_end":14332,"line_start":126,"line_end":126,"column_start":18,"column_end":21},"name":"new","qualname":"<RwLock<T>>::new","value":"pub const fn new(T) -> RwLock<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new spinlock wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new spinlock wrapping the supplied data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13940,"byte_end":13994,"line_start":110,"line_end":110,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13999,"byte_end":14002,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ May be used statically:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14007,"byte_end":14034,"line_start":112,"line_end":112,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14039,"byte_end":14042,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14047,"byte_end":14054,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14059,"byte_end":14072,"line_start":115,"line_end":115,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14077,"byte_end":14080,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ static RW_LOCK: spin::RwLock<()> = spin::RwLock::new(());","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14085,"byte_end":14146,"line_start":117,"line_end":117,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14151,"byte_end":14154,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14159,"byte_end":14174,"line_start":119,"line_end":119,"column_start":5,"column_end":20}},{"value":"/     let lock = RW_LOCK.read();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14179,"byte_end":14213,"line_start":120,"line_end":120,"column_start":5,"column_end":39}},{"value":"/     // do something with lock","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14218,"byte_end":14251,"line_start":121,"line_end":121,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14256,"byte_end":14275,"line_start":122,"line_end":122,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14280,"byte_end":14285,"line_start":123,"line_end":123,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14290,"byte_end":14297,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14302,"byte_end":14311,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14569,"byte_end":14579,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14485,"byte_end":14543,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14548,"byte_end":14557,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15696,"byte_end":15700,"line_start":166,"line_end":166,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with shared read access, blocking the current thread","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14820,"byte_end":14894,"line_start":144,"line_end":144,"column_start":5,"column_end":79}},{"value":"/ until it can be acquired.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14899,"byte_end":14928,"line_start":145,"line_end":145,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14933,"byte_end":14936,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14941,"byte_end":15017,"line_start":147,"line_end":147,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15022,"byte_end":15098,"line_start":148,"line_end":148,"column_start":5,"column_end":81}},{"value":"/ this method returns. This method does not provide any guarantees with","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15103,"byte_end":15176,"line_start":149,"line_end":149,"column_start":5,"column_end":78}},{"value":"/ respect to the ordering of whether contentious readers or writers will","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15181,"byte_end":15255,"line_start":150,"line_end":150,"column_start":5,"column_end":79}},{"value":"/ acquire the lock first.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15260,"byte_end":15287,"line_start":151,"line_end":151,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15292,"byte_end":15295,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15300,"byte_end":15372,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15377,"byte_end":15400,"line_start":154,"line_end":154,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15405,"byte_end":15408,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15413,"byte_end":15420,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15425,"byte_end":15463,"line_start":157,"line_end":157,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15468,"byte_end":15473,"line_start":158,"line_end":158,"column_start":5,"column_end":10}},{"value":"/     let mut data = mylock.read();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15478,"byte_end":15515,"line_start":159,"line_end":159,"column_start":5,"column_end":42}},{"value":"/     // The lock is now locked and the data can be read","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15520,"byte_end":15578,"line_start":160,"line_end":160,"column_start":5,"column_end":63}},{"value":"/     println!(\"{}\", *data);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15583,"byte_end":15613,"line_start":161,"line_end":161,"column_start":5,"column_end":35}},{"value":"/     // The lock is dropped","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15618,"byte_end":15648,"line_start":162,"line_end":162,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15653,"byte_end":15658,"line_start":163,"line_end":163,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15663,"byte_end":15670,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15675,"byte_end":15684,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16817,"byte_end":16825,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to acquire this lock with shared read access.","sig":null,"attributes":[{"value":"/ Attempt to acquire this lock with shared read access.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15900,"byte_end":15957,"line_start":175,"line_end":175,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15962,"byte_end":15965,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ This function will never block and will return immediately if `read`","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":15970,"byte_end":16042,"line_start":177,"line_end":177,"column_start":5,"column_end":77}},{"value":"/ would otherwise succeed. Returns `Some` of an RAII guard which will","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16047,"byte_end":16118,"line_start":178,"line_end":178,"column_start":5,"column_end":76}},{"value":"/ release the shared access of this thread when dropped, or `None` if the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16123,"byte_end":16198,"line_start":179,"line_end":179,"column_start":5,"column_end":80}},{"value":"/ access could not be granted. This method does not provide any","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16203,"byte_end":16268,"line_start":180,"line_end":180,"column_start":5,"column_end":70}},{"value":"/ guarantees with respect to the ordering of whether contentious readers","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16273,"byte_end":16347,"line_start":181,"line_end":181,"column_start":5,"column_end":79}},{"value":"/ or writers will acquire the lock first.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16352,"byte_end":16395,"line_start":182,"line_end":182,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16400,"byte_end":16403,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16408,"byte_end":16415,"line_start":184,"line_end":184,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16420,"byte_end":16458,"line_start":185,"line_end":185,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16463,"byte_end":16468,"line_start":186,"line_end":186,"column_start":5,"column_end":10}},{"value":"/     match mylock.try_read() {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16473,"byte_end":16506,"line_start":187,"line_end":187,"column_start":5,"column_end":38}},{"value":"/         Some(data) => {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16511,"byte_end":16538,"line_start":188,"line_end":188,"column_start":5,"column_end":32}},{"value":"/             // The lock is now locked and the data can be read","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16543,"byte_end":16609,"line_start":189,"line_end":189,"column_start":5,"column_end":71}},{"value":"/             println!(\"{}\", *data);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16614,"byte_end":16652,"line_start":190,"line_end":190,"column_start":5,"column_end":43}},{"value":"/             // The lock is dropped","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16657,"byte_end":16695,"line_start":191,"line_end":191,"column_start":5,"column_end":43}},{"value":"/         },","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16700,"byte_end":16714,"line_start":192,"line_end":192,"column_start":5,"column_end":19}},{"value":"/         None => (), // no cigar","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16719,"byte_end":16754,"line_start":193,"line_end":193,"column_start":5,"column_end":40}},{"value":"/     };","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16759,"byte_end":16769,"line_start":194,"line_end":194,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16774,"byte_end":16779,"line_start":195,"line_end":195,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16784,"byte_end":16791,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":16796,"byte_end":16805,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":17829,"byte_end":17849,"line_start":222,"line_end":222,"column_start":19,"column_end":39},"name":"force_read_decrement","qualname":"<RwLock<T>>::force_read_decrement","value":"pub unsafe fn force_read_decrement(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force decrement the reader count.","sig":null,"attributes":[{"value":"/ Force decrement the reader count.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":17444,"byte_end":17481,"line_start":215,"line_end":215,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":17486,"byte_end":17489,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if there are outstanding `RwLockReadGuard`s","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":17494,"byte_end":17568,"line_start":217,"line_end":217,"column_start":5,"column_end":79}},{"value":"/ live, or if called more times than `read` has been called, but can be","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":17573,"byte_end":17646,"line_start":218,"line_end":218,"column_start":5,"column_end":78}},{"value":"/ useful in FFI contexts where the caller doesn't know how to deal with","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":17651,"byte_end":17724,"line_start":219,"line_end":219,"column_start":5,"column_end":78}},{"value":"/ RAII. The underlying atomic operation uses `Ordering::Release`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":17729,"byte_end":17796,"line_start":220,"line_end":220,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":17801,"byte_end":17810,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":18379,"byte_end":18397,"line_start":234,"line_end":234,"column_start":19,"column_end":37},"name":"force_write_unlock","qualname":"<RwLock<T>>::force_write_unlock","value":"pub unsafe fn force_write_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock exclusive write access.","sig":null,"attributes":[{"value":"/ Force unlock exclusive write access.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":17998,"byte_end":18038,"line_start":227,"line_end":227,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":18043,"byte_end":18046,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if there are outstanding `RwLockWriteGuard`s","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":18051,"byte_end":18126,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ live, or if called when there are current readers, but can be useful in","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":18131,"byte_end":18206,"line_start":230,"line_end":230,"column_start":5,"column_end":80}},{"value":"/ FFI contexts where the caller doesn't know how to deal with RAII. The","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":18211,"byte_end":18284,"line_start":231,"line_end":231,"column_start":5,"column_end":78}},{"value":"/ underlying atomic operation uses `Ordering::Release`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":18289,"byte_end":18346,"line_start":232,"line_end":232,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":18351,"byte_end":18360,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19769,"byte_end":19774,"line_start":280,"line_end":280,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Lock this rwlock with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Lock this rwlock with exclusive write access, blocking the current","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19135,"byte_end":19205,"line_start":261,"line_end":261,"column_start":5,"column_end":75}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19210,"byte_end":19246,"line_start":262,"line_end":262,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19251,"byte_end":19254,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19259,"byte_end":19329,"line_start":264,"line_end":264,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19334,"byte_end":19372,"line_start":265,"line_end":265,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19377,"byte_end":19380,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this rwlock","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19385,"byte_end":19458,"line_start":267,"line_end":267,"column_start":5,"column_end":78}},{"value":"/ when dropped.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19463,"byte_end":19480,"line_start":268,"line_end":268,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19485,"byte_end":19488,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19493,"byte_end":19500,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19505,"byte_end":19543,"line_start":271,"line_end":271,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19548,"byte_end":19553,"line_start":272,"line_end":272,"column_start":5,"column_end":10}},{"value":"/     let mut data = mylock.write();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19558,"byte_end":19596,"line_start":273,"line_end":273,"column_start":5,"column_end":43}},{"value":"/     // The lock is now locked and the data can be written","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19601,"byte_end":19662,"line_start":274,"line_end":274,"column_start":5,"column_end":66}},{"value":"/     *data += 1;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19667,"byte_end":19686,"line_start":275,"line_end":275,"column_start":5,"column_end":24}},{"value":"/     // The lock is dropped","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19691,"byte_end":19721,"line_start":276,"line_end":276,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19726,"byte_end":19731,"line_start":277,"line_end":277,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19736,"byte_end":19743,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19748,"byte_end":19757,"line_start":279,"line_end":279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20659,"byte_end":20668,"line_start":309,"line_end":309,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to lock this rwlock with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempt to lock this rwlock with exclusive write access.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":19990,"byte_end":20050,"line_start":289,"line_end":289,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20055,"byte_end":20058,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ This function does not ever block, and it will return `None` if a call","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20063,"byte_end":20137,"line_start":291,"line_end":291,"column_start":5,"column_end":79}},{"value":"/ to `write` would otherwise block. If successful, an RAII guard is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20142,"byte_end":20211,"line_start":292,"line_end":292,"column_start":5,"column_end":74}},{"value":"/ returned.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20216,"byte_end":20229,"line_start":293,"line_end":293,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20234,"byte_end":20237,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20242,"byte_end":20249,"line_start":295,"line_end":295,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20254,"byte_end":20292,"line_start":296,"line_end":296,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20297,"byte_end":20302,"line_start":297,"line_end":297,"column_start":5,"column_end":10}},{"value":"/     match mylock.try_write() {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20307,"byte_end":20341,"line_start":298,"line_end":298,"column_start":5,"column_end":39}},{"value":"/         Some(mut data) => {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20346,"byte_end":20377,"line_start":299,"line_end":299,"column_start":5,"column_end":36}},{"value":"/             // The lock is now locked and the data can be written","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20382,"byte_end":20451,"line_start":300,"line_end":300,"column_start":5,"column_end":74}},{"value":"/             *data += 1;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20456,"byte_end":20483,"line_start":301,"line_end":301,"column_start":5,"column_end":32}},{"value":"/             // The lock is implicitly dropped","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20488,"byte_end":20537,"line_start":302,"line_end":302,"column_start":5,"column_end":54}},{"value":"/         },","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20542,"byte_end":20556,"line_start":303,"line_end":303,"column_start":5,"column_end":19}},{"value":"/         None => (), // no cigar","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20561,"byte_end":20596,"line_start":304,"line_end":304,"column_start":5,"column_end":40}},{"value":"/     };","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20601,"byte_end":20611,"line_start":305,"line_end":305,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20616,"byte_end":20621,"line_start":306,"line_end":306,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20626,"byte_end":20633,"line_start":307,"line_end":307,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20638,"byte_end":20647,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20987,"byte_end":21003,"line_start":316,"line_end":316,"column_start":12,"column_end":28},"name":"upgradeable_read","qualname":"<RwLock<T>>::upgradeable_read","value":"pub fn upgradeable_read(&Self) -> RwLockUpgradeableGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Obtain a readable lock guard that can later be upgraded to a writable lock guard.\n Upgrades can be done through the [`RwLockUpgradeableGuard::upgrade`](RwLockUpgradeableGuard::upgrade) method.\n","sig":null,"attributes":[{"value":"/ Obtain a readable lock guard that can later be upgraded to a writable lock guard.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20758,"byte_end":20843,"line_start":313,"line_end":313,"column_start":5,"column_end":90}},{"value":"/ Upgrades can be done through the [`RwLockUpgradeableGuard::upgrade`](RwLockUpgradeableGuard::upgrade) method.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20848,"byte_end":20961,"line_start":314,"line_end":314,"column_start":5,"column_end":118}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":20966,"byte_end":20975,"line_start":315,"line_end":315,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":21294,"byte_end":21314,"line_start":327,"line_end":327,"column_start":12,"column_end":32},"name":"try_upgradeable_read","qualname":"<RwLock<T>>::try_upgradeable_read","value":"pub fn try_upgradeable_read(&Self) -> Option<RwLockUpgradeableGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to obtain an upgradeable lock guard.\n","sig":null,"attributes":[{"value":"/ Tries to obtain an upgradeable lock guard.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":21222,"byte_end":21268,"line_start":325,"line_end":325,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":21273,"byte_end":21282,"line_start":326,"line_end":326,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23460,"byte_end":23467,"line_start":397,"line_end":397,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradeableGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Upgrades an upgradeable lock guard to a writable lock guard.","sig":null,"attributes":[{"value":"/ Upgrades an upgradeable lock guard to a writable lock guard.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23154,"byte_end":23218,"line_start":388,"line_end":388,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23223,"byte_end":23226,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23231,"byte_end":23238,"line_start":390,"line_end":390,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23243,"byte_end":23281,"line_start":391,"line_end":391,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23286,"byte_end":23289,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ let upgradeable = mylock.upgradeable_read(); // Readable, but not yet writable","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23294,"byte_end":23376,"line_start":393,"line_end":393,"column_start":5,"column_end":87}},{"value":"/ let writable = upgradeable.upgrade();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23381,"byte_end":23422,"line_start":394,"line_end":394,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23427,"byte_end":23434,"line_start":395,"line_end":395,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23439,"byte_end":23448,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24188,"byte_end":24199,"line_start":420,"line_end":420,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradeableGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to upgrade an upgradeable lock guard to a writable lock guard.","sig":null,"attributes":[{"value":"/ Tries to upgrade an upgradeable lock guard to a writable lock guard.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23721,"byte_end":23793,"line_start":408,"line_end":408,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23798,"byte_end":23801,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23806,"byte_end":23813,"line_start":410,"line_end":410,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23818,"byte_end":23856,"line_start":411,"line_end":411,"column_start":5,"column_end":43}},{"value":"/ let upgradeable = mylock.upgradeable_read(); // Readable, but not yet writable","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23861,"byte_end":23943,"line_start":412,"line_end":412,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23948,"byte_end":23951,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ match upgradeable.try_upgrade() {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23956,"byte_end":23993,"line_start":414,"line_end":414,"column_start":5,"column_end":42}},{"value":"/     Ok(writable) => /* upgrade successful - use writable lock guard */ (),","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":23998,"byte_end":24076,"line_start":415,"line_end":415,"column_start":5,"column_end":83}},{"value":"/     Err(upgradeable) => /* upgrade unsuccessful */ (),","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24081,"byte_end":24139,"line_start":416,"line_end":416,"column_start":5,"column_end":63}},{"value":"/ };","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24144,"byte_end":24150,"line_start":417,"line_end":417,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24155,"byte_end":24162,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24167,"byte_end":24176,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24838,"byte_end":24847,"line_start":438,"line_end":438,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradeableGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the upgradeable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24305,"byte_end":24314,"line_start":424,"line_end":424,"column_start":5,"column_end":14}},{"value":"/ Downgrades the upgradeable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24319,"byte_end":24437,"line_start":425,"line_end":425,"column_start":5,"column_end":123}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24442,"byte_end":24445,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24450,"byte_end":24457,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(1);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24462,"byte_end":24500,"line_start":428,"line_end":428,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24505,"byte_end":24508,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let upgradeable = mylock.upgradeable_read();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24513,"byte_end":24561,"line_start":430,"line_end":430,"column_start":5,"column_end":53}},{"value":"/ assert!(mylock.try_read().is_none());","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24566,"byte_end":24607,"line_start":431,"line_end":431,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(*upgradeable, 1);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24612,"byte_end":24644,"line_start":432,"line_end":432,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24649,"byte_end":24652,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ let readable = upgradeable.downgrade(); // This is guaranteed not to spin","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24657,"byte_end":24734,"line_start":434,"line_end":434,"column_start":5,"column_end":82}},{"value":"/ assert!(mylock.try_read().is_some());","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24739,"byte_end":24780,"line_start":435,"line_end":435,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(*readable, 1);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24785,"byte_end":24814,"line_start":436,"line_end":436,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":24819,"byte_end":24826,"line_start":437,"line_end":437,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25673,"byte_end":25682,"line_start":465,"line_end":465,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the writable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","sig":null,"attributes":[{"value":"/ Downgrades the writable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25207,"byte_end":25322,"line_start":452,"line_end":452,"column_start":5,"column_end":120}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25327,"byte_end":25330,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25335,"byte_end":25342,"line_start":454,"line_end":454,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25347,"byte_end":25385,"line_start":455,"line_end":455,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25390,"byte_end":25393,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ let mut writable = mylock.write();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25398,"byte_end":25436,"line_start":457,"line_end":457,"column_start":5,"column_end":43}},{"value":"/ *writable = 1;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25441,"byte_end":25459,"line_start":458,"line_end":458,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25464,"byte_end":25467,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ let readable = writable.downgrade(); // This is guaranteed not to spin","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25472,"byte_end":25546,"line_start":460,"line_end":460,"column_start":5,"column_end":79}},{"value":"/ # let readable_2 = mylock.try_read().unwrap();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25551,"byte_end":25601,"line_start":461,"line_end":461,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(*readable, 1);","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25606,"byte_end":25635,"line_start":462,"line_end":462,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25640,"byte_end":25647,"line_start":463,"line_end":463,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25652,"byte_end":25661,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":221},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34525,"byte_end":34529,"line_start":21,"line_end":21,"column_start":12,"column_end":16},"name":"Once","qualname":"::once::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"decl_id":null,"docs":" A synchronization primitive which can be used to run a one-time global\n initialization. Unlike its std equivalent, this is generalized so that the\n closure returns a value and it is stored. Once therefore acts something like\n a future, too.","sig":null,"attributes":[{"value":"/ A synchronization primitive which can be used to run a one-time global","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34077,"byte_end":34151,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/ initialization. Unlike its std equivalent, this is generalized so that the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34152,"byte_end":34230,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ closure returns a value and it is stored. Once therefore acts something like","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34231,"byte_end":34311,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ a future, too.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34312,"byte_end":34330,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34331,"byte_end":34334,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34335,"byte_end":34349,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34350,"byte_end":34353,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34354,"byte_end":34361,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34362,"byte_end":34375,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34376,"byte_end":34379,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ static START: spin::Once<()> = spin::Once::new();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34380,"byte_end":34433,"line_start":15,"line_end":15,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34434,"byte_end":34437,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ START.call_once(|| {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34438,"byte_end":34462,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/     // run initialization here","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34463,"byte_end":34497,"line_start":18,"line_end":18,"column_start":1,"column_end":35}},{"value":"/ });","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34498,"byte_end":34505,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34506,"byte_end":34513,"line_start":20,"line_end":20,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":243},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35507,"byte_end":35511,"line_start":53,"line_end":53,"column_start":15,"column_end":19},"name":"INIT","qualname":"::once::Once::<T>::INIT","value":"Self","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Initialization constant of `Once`.\n","sig":null,"attributes":[{"value":"/ Initialization constant of `Once`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35454,"byte_end":35492,"line_start":52,"line_end":52,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35670,"byte_end":35673,"line_start":59,"line_end":59,"column_start":18,"column_end":21},"name":"new","qualname":"<Once<T>>::new","value":"pub const fn new() -> Once<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Once` value.\n","sig":null,"attributes":[{"value":"/ Creates a new `Once` value.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35621,"byte_end":35652,"line_start":58,"line_end":58,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36850,"byte_end":36859,"line_start":98,"line_end":98,"column_start":12,"column_end":21},"name":"call_once","qualname":"<Once<T>>::call_once","value":"pub fn call_once<'a, F>(&'a Self, F) -> &'a T where F: FnOnce() -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs an initialization routine once and only once. The given closure\n will be executed if this is the first time `call_once` has been called,\n and otherwise the routine will *not* be invoked.","sig":null,"attributes":[{"value":"/ Performs an initialization routine once and only once. The given closure","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35907,"byte_end":35983,"line_start":70,"line_end":70,"column_start":5,"column_end":81}},{"value":"/ will be executed if this is the first time `call_once` has been called,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35988,"byte_end":36063,"line_start":71,"line_end":71,"column_start":5,"column_end":80}},{"value":"/ and otherwise the routine will *not* be invoked.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36068,"byte_end":36120,"line_start":72,"line_end":72,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36125,"byte_end":36128,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36133,"byte_end":36204,"line_start":74,"line_end":74,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36209,"byte_end":36242,"line_start":75,"line_end":75,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36247,"byte_end":36250,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ When this function returns, it is guaranteed that some initialization","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36255,"byte_end":36328,"line_start":77,"line_end":77,"column_start":5,"column_end":78}},{"value":"/ has run and completed (it may not be the closure specified). The","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36333,"byte_end":36401,"line_start":78,"line_end":78,"column_start":5,"column_end":73}},{"value":"/ returned pointer will point to the result from the closure that was","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36406,"byte_end":36477,"line_start":79,"line_end":79,"column_start":5,"column_end":76}},{"value":"/ run.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36482,"byte_end":36490,"line_start":80,"line_end":80,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36495,"byte_end":36498,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36503,"byte_end":36517,"line_start":82,"line_end":82,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36522,"byte_end":36525,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36530,"byte_end":36537,"line_start":84,"line_end":84,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36542,"byte_end":36555,"line_start":85,"line_end":85,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36560,"byte_end":36563,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ static INIT: spin::Once<usize> = spin::Once::new();","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36568,"byte_end":36623,"line_start":87,"line_end":87,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36628,"byte_end":36631,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ fn get_cached_val() -> usize {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36636,"byte_end":36670,"line_start":89,"line_end":89,"column_start":5,"column_end":39}},{"value":"/     *INIT.call_once(expensive_computation)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36675,"byte_end":36721,"line_start":90,"line_end":90,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36726,"byte_end":36731,"line_start":91,"line_end":91,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36736,"byte_end":36739,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ fn expensive_computation() -> usize {","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36744,"byte_end":36785,"line_start":93,"line_end":93,"column_start":5,"column_end":46}},{"value":"/     // ...","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36790,"byte_end":36804,"line_start":94,"line_end":94,"column_start":5,"column_end":19}},{"value":"/ # 2","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36809,"byte_end":36816,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36821,"byte_end":36826,"line_start":96,"line_end":96,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":36831,"byte_end":36838,"line_start":97,"line_end":97,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":38262,"byte_end":38265,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"try","qualname":"<Once<T>>::try","value":"pub fn try<'a>(&'a Self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer iff the `Once` was previously initialized\n","sig":null,"attributes":[{"value":"/ Returns a pointer iff the `Once` was previously initialized","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":38187,"byte_end":38250,"line_start":135,"line_end":135,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":38548,"byte_end":38552,"line_start":145,"line_end":145,"column_start":12,"column_end":16},"name":"wait","qualname":"<Once<T>>::wait","value":"pub fn wait<'a>(&'a Self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Like try, but will spin if the `Once` is in the process of being\n initialized\n","sig":null,"attributes":[{"value":"/ Like try, but will spin if the `Once` is in the process of being","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":38448,"byte_end":38516,"line_start":143,"line_end":143,"column_start":5,"column_end":73}},{"value":"/ initialized","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":38521,"byte_end":38536,"line_start":144,"line_end":144,"column_start":5,"column_end":20}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2289,"byte_end":2294,"line_start":89,"line_end":89,"column_start":40,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2340,"byte_end":2345,"line_start":90,"line_end":90,"column_start":40,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2361,"byte_end":2366,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3215,"byte_end":3220,"line_start":127,"line_end":127,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":5194,"byte_end":5199,"line_start":197,"line_end":197,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":5550,"byte_end":5555,"line_start":211,"line_end":211,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":5670,"byte_end":5680,"line_start":217,"line_end":217,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":5799,"byte_end":5809,"line_start":223,"line_end":223,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":5919,"byte_end":5929,"line_start":228,"line_end":228,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13843,"byte_end":13849,"line_start":106,"line_end":106,"column_start":40,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13902,"byte_end":13908,"line_start":107,"line_end":107,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13924,"byte_end":13930,"line_start":109,"line_end":109,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14804,"byte_end":14810,"line_start":143,"line_end":143,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":21919,"byte_end":21925,"line_start":342,"line_end":342,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":22290,"byte_end":22296,"line_start":353,"line_end":353,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":22408,"byte_end":22430,"line_start":359,"line_end":359,"column_start":26,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25172,"byte_end":25188,"line_start":451,"line_end":451,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26015,"byte_end":26030,"line_start":478,"line_end":478,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26177,"byte_end":26199,"line_start":486,"line_end":486,"column_start":36,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26346,"byte_end":26362,"line_start":494,"line_end":494,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26512,"byte_end":26528,"line_start":502,"line_end":502,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26664,"byte_end":26679,"line_start":508,"line_end":508,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26903,"byte_end":26925,"line_start":515,"line_end":515,"column_start":35,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":27192,"byte_end":27208,"line_start":525,"line_end":525,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34679,"byte_end":34683,"line_start":26,"line_end":26,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35103,"byte_end":35107,"line_start":39,"line_end":39,"column_start":38,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35144,"byte_end":35148,"line_start":40,"line_end":40,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35440,"byte_end":35444,"line_start":51,"line_end":51,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":39041,"byte_end":39047,"line_start":163,"line_end":163,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2289,"byte_end":2294,"line_start":89,"line_end":89,"column_start":40,"column_end":45},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":50},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2340,"byte_end":2345,"line_start":90,"line_end":90,"column_start":40,"column_end":45},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":50},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":2361,"byte_end":2366,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":3215,"byte_end":3220,"line_start":127,"line_end":127,"column_start":17,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":5194,"byte_end":5199,"line_start":197,"line_end":197,"column_start":45,"column_end":50},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":50},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":5550,"byte_end":5555,"line_start":211,"line_end":211,"column_start":39,"column_end":44},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":50},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":5670,"byte_end":5680,"line_start":217,"line_end":217,"column_start":31,"column_end":41},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":261},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":5799,"byte_end":5809,"line_start":223,"line_end":223,"column_start":34,"column_end":44},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":261},"to":{"krate":1,"index":3255}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/mutex.rs","byte_start":5919,"byte_end":5929,"line_start":228,"line_end":228,"column_start":30,"column_end":40},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":261},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13843,"byte_end":13849,"line_start":106,"line_end":106,"column_start":40,"column_end":46},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":127},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13902,"byte_end":13908,"line_start":107,"line_end":107,"column_start":47,"column_end":53},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":127},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":13924,"byte_end":13930,"line_start":109,"line_end":109,"column_start":9,"column_end":15},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":127},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":14804,"byte_end":14810,"line_start":143,"line_end":143,"column_start":17,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":127},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":21919,"byte_end":21925,"line_start":342,"line_end":342,"column_start":45,"column_end":51},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":127},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":22290,"byte_end":22296,"line_start":353,"line_end":353,"column_start":39,"column_end":45},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":127},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":22408,"byte_end":22430,"line_start":359,"line_end":359,"column_start":26,"column_end":48},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":25172,"byte_end":25188,"line_start":451,"line_end":451,"column_start":26,"column_end":42},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26015,"byte_end":26030,"line_start":478,"line_end":478,"column_start":36,"column_end":51},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":270},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26177,"byte_end":26199,"line_start":486,"line_end":486,"column_start":36,"column_end":58},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26346,"byte_end":26362,"line_start":494,"line_end":494,"column_start":36,"column_end":52},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":279},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26512,"byte_end":26528,"line_start":502,"line_end":502,"column_start":39,"column_end":55},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":279},"to":{"krate":1,"index":3255}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26664,"byte_end":26679,"line_start":508,"line_end":508,"column_start":35,"column_end":50},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":270},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":26903,"byte_end":26925,"line_start":515,"line_end":515,"column_start":35,"column_end":57},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/rw_lock.rs","byte_start":27192,"byte_end":27208,"line_start":525,"line_end":525,"column_start":35,"column_end":51},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":279},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":34679,"byte_end":34683,"line_start":26,"line_end":26,"column_start":36,"column_end":40},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":221},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35103,"byte_end":35107,"line_start":39,"line_end":39,"column_start":38,"column_end":42},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":221},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35144,"byte_end":35148,"line_start":40,"line_end":40,"column_start":31,"column_end":35},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":221},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":35440,"byte_end":35444,"line_start":51,"line_end":51,"column_start":9,"column_end":13},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.5.2/src/once.rs","byte_start":39041,"byte_end":39047,"line_start":163,"line_end":163,"column_start":19,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":254},"to":{"krate":1,"index":3266}}]}