{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3","program":"/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","digest","--edition=2018","/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"block-buffer\"","--cfg","feature=\"core-api\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=606164780c46ba6d","-C","extra-filename=-606164780c46ba6d","--out-dir","/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps","-L","dependency=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps","--extern","block_buffer=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps/libblock_buffer-03524195133b4d29.rmeta","--extern","crypto_common=/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps/libcrypto_common-323f7f533e47ff0c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/root/.rustup/toolchains/1.60.0-x86_64-unknown-linux-gnu"],"output":"/root/workspaces/rust/pro/pisanix/pisa-proxy/protocol/mysql/target/rls/debug/deps/libdigest-606164780c46ba6d.rmeta"},"prelude":{"crate_id":{"name":"digest","disambiguator":[17593402478282737913,0]},"crate_root":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src","external_crates":[{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","num":20,"id":{"name":"crypto_common","disambiguator":[5467915393634550326,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","num":21,"id":{"name":"generic_array","disambiguator":[14659237377528794186,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","num":22,"id":{"name":"typenum","disambiguator":[2930080192617149959,0]}},{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","num":23,"id":{"name":"block_buffer","disambiguator":[1890734334836265874,0]}}],"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":0,"byte_end":10601,"line_start":1,"line_end":299,"column_start":1,"column_end":48}},"imports":[{"kind":"Use","ref_id":{"krate":20,"index":54},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":10899,"byte_end":10912,"line_start":8,"line_end":8,"column_start":25,"column_end":38},"alias_span":null,"name":"AlgorithmName","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":20,"index":24},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":10914,"byte_end":10919,"line_start":8,"line_end":8,"column_start":40,"column_end":45},"alias_span":null,"name":"Block","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":20,"index":32},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":10921,"byte_end":10934,"line_start":8,"line_end":8,"column_start":47,"column_end":60},"alias_span":null,"name":"BlockSizeUser","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":20,"index":41},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":10936,"byte_end":10950,"line_start":8,"line_end":8,"column_start":62,"column_end":76},"alias_span":null,"name":"OutputSizeUser","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":20,"index":52},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":10952,"byte_end":10957,"line_start":8,"line_end":8,"column_start":78,"column_end":83},"alias_span":null,"name":"Reset","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":627},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11170,"byte_end":11191,"line_start":21,"line_end":21,"column_start":22,"column_end":43},"alias_span":null,"name":"CtVariableCoreWrapper","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":636},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11214,"byte_end":11235,"line_start":22,"line_end":22,"column_start":22,"column_end":43},"alias_span":null,"name":"RtVariableCoreWrapper","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":380},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11255,"byte_end":11264,"line_start":23,"line_end":23,"column_start":19,"column_end":28},"alias_span":null,"name":"CoreProxy","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":644},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11266,"byte_end":11277,"line_start":23,"line_end":23,"column_start":30,"column_end":41},"alias_span":null,"name":"CoreWrapper","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":654},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11300,"byte_end":11320,"line_start":24,"line_end":24,"column_start":21,"column_end":41},"alias_span":null,"name":"XofReaderCoreWrapper","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":23,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2335,"byte_end":2347,"line_start":62,"line_end":62,"column_start":9,"column_end":21},"alias_span":null,"name":"block_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2357,"byte_end":2370,"line_start":63,"line_end":63,"column_start":9,"column_end":22},"alias_span":null,"name":"crypto_common","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":493},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2397,"byte_end":2403,"line_start":65,"line_end":65,"column_start":25,"column_end":31},"alias_span":null,"name":"Digest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":526},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2405,"byte_end":2414,"line_start":65,"line_end":65,"column_start":33,"column_end":42},"alias_span":null,"name":"DynDigest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":492},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2416,"byte_end":2426,"line_start":65,"line_end":65,"column_start":44,"column_end":54},"alias_span":null,"name":"HashMarker","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2453,"byte_end":2466,"line_start":66,"line_end":66,"column_start":25,"column_end":38},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2468,"byte_end":2475,"line_start":66,"line_end":66,"column_start":40,"column_end":47},"alias_span":null,"name":"typenum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":2827},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2486,"byte_end":2492,"line_start":66,"line_end":66,"column_start":58,"column_end":64},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":26},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2494,"byte_end":2500,"line_start":66,"line_end":66,"column_start":66,"column_end":72},"alias_span":null,"name":"Output","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":41},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2502,"byte_end":2516,"line_start":66,"line_end":66,"column_start":74,"column_end":88},"alias_span":null,"name":"OutputSizeUser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":52},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2518,"byte_end":2523,"line_start":66,"line_end":66,"column_start":90,"column_end":95},"alias_span":null,"name":"Reset","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":0,"byte_end":10601,"line_start":1,"line_end":299,"column_start":1,"column_end":48},"name":"","qualname":"::","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":462},{"krate":0,"index":547},{"krate":0,"index":550},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":589},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":605},{"krate":0,"index":609},{"krate":0,"index":618},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":681},{"krate":0,"index":621},{"krate":0,"index":623},{"krate":0,"index":683},{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":624},{"krate":0,"index":626}],"decl_id":null,"docs":" This crate provides traits which describe functionality of cryptographic hash\n functions and Message Authentication algorithms.","sig":null,"attributes":[{"value":"/ This crate provides traits which describe functionality of cryptographic hash","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":0,"byte_end":81,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/ functions and Message Authentication algorithms.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":82,"byte_end":134,"line_start":2,"line_end":2,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":135,"byte_end":138,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Traits in this repository are organized into the following levels:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":139,"byte_end":209,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":210,"byte_end":213,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ - **High-level convenience traits**: [`Digest`], [`DynDigest`], [`Mac`].","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":214,"byte_end":290,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/   Wrappers around lower-level traits for most common use-cases. Users should","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":291,"byte_end":371,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/   usually prefer using these traits.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":372,"byte_end":412,"line_start":8,"line_end":8,"column_start":1,"column_end":41}},{"value":"/ - **Mid-level traits**: [`Update`], [`FixedOutput`], [`FixedOutputReset`],","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":413,"byte_end":491,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/   [`ExtendableOutput`], [`ExtendableOutputReset`], [`XofReader`],","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":492,"byte_end":561,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/   [`VariableOutput`], [`Reset`], [`KeyInit`], and [`InnerInit`]. These","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":562,"byte_end":636,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/   traits atomically describe available functionality of an algorithm.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":637,"byte_end":710,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/ - **Marker traits**: [`HashMarker`], [`MacMarker`]. Used to distinguish","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":711,"byte_end":786,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/   different algorithm classes.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":787,"byte_end":821,"line_start":14,"line_end":14,"column_start":1,"column_end":35}},{"value":"/ - **Low-level traits** defined in the [`core_api`] module. These traits","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":822,"byte_end":897,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/   operate at a block-level and do not contain any built-in buffering.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":898,"byte_end":971,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/   They are intended to be implemented by low-level algorithm providers only.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":972,"byte_end":1052,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/   Usually they should not be used in application-level code.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":1053,"byte_end":1117,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":1118,"byte_end":1121,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Additionally hash functions implement traits from the standard library:","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":1122,"byte_end":1197,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ [`Default`], [`Clone`], [`Write`][std::io::Write]. The latter is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":1198,"byte_end":1266,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/ feature-gated behind `std` feature, which is usually enabled by default","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":1267,"byte_end":1342,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ by hash implementation crates.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":1343,"byte_end":1377,"line_start":23,"line_end":23,"column_start":1,"column_end":35}},{"value":"no_std","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":1379,"byte_end":1389,"line_start":25,"line_end":25,"column_start":1,"column_end":11}},{"value":"forbid(unsafe_code)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":1429,"byte_end":1452,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"warn(missing_docs, rust_2018_idioms)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":1703,"byte_end":1743,"line_start":33,"line_end":33,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":9},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core_api","qualname":"::core_api","value":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":160},{"krate":0,"index":248},{"krate":0,"index":389},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":664},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":672}],"decl_id":null,"docs":" Low-level traits operating on blocks and wrappers around them.","sig":null,"attributes":[{"value":"cfg(feature = \"core-api\")","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2101,"byte_end":2129,"line_start":53,"line_end":53,"column_start":1,"column_end":29}},{"value":"/ Low-level traits operating on blocks and wrappers around them.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":10603,"byte_end":10669,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":10670,"byte_end":10673,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Usage of traits in this module in user code is discouraged. Instead use","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":10674,"byte_end":10749,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ core algorithm wrapped by the wrapper types, which implement the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":10750,"byte_end":10818,"line_start":4,"line_end":4,"column_start":1,"column_end":69}},{"value":"/ higher-level traits.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":10819,"byte_end":10843,"line_start":5,"line_end":5,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":627},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":15354,"byte_end":15375,"line_start":18,"line_end":18,"column_start":12,"column_end":33},"name":"CtVariableCoreWrapper","qualname":"::core_api::ct_variable::CtVariableCoreWrapper","value":"CtVariableCoreWrapper {  }","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":631}],"decl_id":null,"docs":" Wrapper around [`VariableOutputCore`] which selects output size\n at compile time.\n","sig":null,"attributes":[{"value":"/ Wrapper around [`VariableOutputCore`] which selects output size","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":15237,"byte_end":15304,"line_start":15,"line_end":15,"column_start":1,"column_end":68}},{"value":"/ at compile time.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":15305,"byte_end":15325,"line_start":16,"line_end":16,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":636},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":20130,"byte_end":20151,"line_start":13,"line_end":13,"column_start":12,"column_end":33},"name":"RtVariableCoreWrapper","qualname":"::core_api::rt_variable::RtVariableCoreWrapper","value":"RtVariableCoreWrapper {  }","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640}],"decl_id":null,"docs":" Wrapper around [`VariableOutputCore`] which selects output size\n at run time.\n","sig":null,"attributes":[{"value":"/ Wrapper around [`VariableOutputCore`] which selects output size","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":20017,"byte_end":20084,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ at run time.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":20085,"byte_end":20101,"line_start":11,"line_end":11,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":644},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":24718,"byte_end":24729,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"name":"CoreWrapper","qualname":"::core_api::wrapper::CoreWrapper","value":"CoreWrapper {  }","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647}],"decl_id":null,"docs":" Wrapper around [`BufferKindUser`].","sig":null,"attributes":[{"value":"/ Wrapper around [`BufferKindUser`].","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":24569,"byte_end":24607,"line_start":18,"line_end":18,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":24608,"byte_end":24611,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ It handles data buffering and implements the slice-based traits.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":24612,"byte_end":24680,"line_start":20,"line_end":20,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":25700,"byte_end":25709,"line_start":68,"line_end":68,"column_start":12,"column_end":21},"name":"from_core","qualname":"<CoreWrapper<T>>::from_core","value":"pub fn from_core(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new wrapper from `core`.\n","sig":null,"attributes":[{"value":"/ Create new wrapper from `core`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":25639,"byte_end":25674,"line_start":66,"line_end":66,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":25679,"byte_end":25688,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":25876,"byte_end":25885,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"decompose","qualname":"<CoreWrapper<T>>::decompose","value":"pub fn decompose(Self) -> (T, Buffer<T>)","parent":null,"children":[],"decl_id":null,"docs":" Decompose wrapper into inner parts.\n","sig":null,"attributes":[{"value":"/ Decompose wrapper into inner parts.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":25811,"byte_end":25850,"line_start":73,"line_end":73,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":25855,"byte_end":25864,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":380},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":30332,"byte_end":30341,"line_start":253,"line_end":253,"column_start":11,"column_end":20},"name":"CoreProxy","qualname":"::core_api::wrapper::CoreProxy","value":"CoreProxy: sealed::Sealed","parent":null,"children":[{"krate":0,"index":381}],"decl_id":null,"docs":" A proxy trait to a core type implemented by [`CoreWrapper`]\n","sig":null,"attributes":[{"value":"/ A proxy trait to a core type implemented by [`CoreWrapper`]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":30141,"byte_end":30204,"line_start":250,"line_end":250,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":381},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":30410,"byte_end":30414,"line_start":255,"line_end":255,"column_start":10,"column_end":14},"name":"Core","qualname":"::core_api::wrapper::CoreProxy::Core","value":"type Core;","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" Type wrapped by [`CoreWrapper`].\n","sig":null,"attributes":[{"value":"/ Type wrapped by [`CoreWrapper`].","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":30364,"byte_end":30400,"line_start":254,"line_end":254,"column_start":5,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":383},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":30446,"byte_end":30452,"line_start":259,"line_end":259,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::core_api::wrapper::sealed::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":654},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/xof_reader.rs","byte_start":31094,"byte_end":31114,"line_start":11,"line_end":11,"column_start":12,"column_end":32},"name":"XofReaderCoreWrapper","qualname":"::core_api::xof_reader::XofReaderCoreWrapper","value":"XofReaderCoreWrapper {  }","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":657}],"decl_id":null,"docs":" Wrapper around [`XofReaderCore`] implementations.","sig":null,"attributes":[{"value":"/ Wrapper around [`XofReaderCore`] implementations.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/xof_reader.rs","byte_start":30932,"byte_end":30985,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/xof_reader.rs","byte_start":30986,"byte_end":30989,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ It handles data buffering and implements the mid-level traits.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/xof_reader.rs","byte_start":30990,"byte_end":31056,"line_start":9,"line_end":9,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":445},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11398,"byte_end":11404,"line_start":27,"line_end":27,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::core_api::Buffer","value":"BlockBuffer<<S as BlockSizeUser>::BlockSize,\n<S as BufferKindUser>::BufferKind>","parent":null,"children":[],"decl_id":null,"docs":" Buffer type used by type which implements [`BufferKindUser`].\n","sig":null,"attributes":[{"value":"/ Buffer type used by type which implements [`BufferKindUser`].","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11323,"byte_end":11388,"line_start":26,"line_end":26,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":447},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11546,"byte_end":11556,"line_start":31,"line_end":31,"column_start":11,"column_end":21},"name":"UpdateCore","qualname":"::core_api::UpdateCore","value":"UpdateCore: BlockSizeUser","parent":null,"children":[{"krate":0,"index":448}],"decl_id":null,"docs":" Types which consume data in blocks.\n","sig":null,"attributes":[{"value":"/ Types which consume data in blocks.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11496,"byte_end":11535,"line_start":30,"line_end":30,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11634,"byte_end":11647,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"update_blocks","qualname":"::core_api::UpdateCore::update_blocks","value":"pub fn update_blocks(&mut Self, &[Block<Self>])","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" Update state using the provided data blocks.\n","sig":null,"attributes":[{"value":"/ Update state using the provided data blocks.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11578,"byte_end":11626,"line_start":32,"line_end":32,"column_start":5,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":449},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11748,"byte_end":11762,"line_start":37,"line_end":37,"column_start":11,"column_end":25},"name":"BufferKindUser","qualname":"::core_api::BufferKindUser","value":"BufferKindUser: BlockSizeUser","parent":null,"children":[{"krate":0,"index":450}],"decl_id":null,"docs":" Types which use [`BlockBuffer`] functionality.\n","sig":null,"attributes":[{"value":"/ Types which use [`BlockBuffer`] functionality.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11687,"byte_end":11737,"line_start":36,"line_end":36,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":450},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11841,"byte_end":11851,"line_start":39,"line_end":39,"column_start":10,"column_end":20},"name":"BufferKind","qualname":"::core_api::BufferKindUser::BufferKind","value":"type BufferKind: BufferKind;","parent":{"krate":0,"index":449},"children":[],"decl_id":null,"docs":" Block buffer kind over which type operates.\n","sig":null,"attributes":[{"value":"/ Block buffer kind over which type operates.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11784,"byte_end":11831,"line_start":38,"line_end":38,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":451},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11936,"byte_end":11951,"line_start":43,"line_end":43,"column_start":11,"column_end":26},"name":"FixedOutputCore","qualname":"::core_api::FixedOutputCore","value":"FixedOutputCore: UpdateCore + BufferKindUser + OutputSizeUser","parent":null,"children":[{"krate":0,"index":452}],"decl_id":null,"docs":" Core trait for hash functions with fixed output size.\n","sig":null,"attributes":[{"value":"/ Core trait for hash functions with fixed output size.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11868,"byte_end":11925,"line_start":42,"line_end":42,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12245,"byte_end":12264,"line_start":50,"line_end":50,"column_start":8,"column_end":27},"name":"finalize_fixed_core","qualname":"::core_api::FixedOutputCore::finalize_fixed_core","value":"pub fn finalize_fixed_core(&mut Self, &mut Buffer<Self>, &mut Output<Self>)","parent":{"krate":0,"index":451},"children":[],"decl_id":null,"docs":" Finalize state using remaining data stored in the provided block buffer,\n write result into provided array and leave `self` in a dirty state.\n","sig":null,"attributes":[{"value":"/ Finalize state using remaining data stored in the provided block buffer,","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12085,"byte_end":12161,"line_start":48,"line_end":48,"column_start":5,"column_end":81}},{"value":"/ write result into provided array and leave `self` in a dirty state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12166,"byte_end":12237,"line_start":49,"line_end":49,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":453},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12410,"byte_end":12430,"line_start":54,"line_end":54,"column_start":11,"column_end":31},"name":"ExtendableOutputCore","qualname":"::core_api::ExtendableOutputCore","value":"ExtendableOutputCore: UpdateCore + BufferKindUser","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455}],"decl_id":null,"docs":" Core trait for hash functions with extendable (XOF) output size.\n","sig":null,"attributes":[{"value":"/ Core trait for hash functions with extendable (XOF) output size.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12331,"byte_end":12399,"line_start":53,"line_end":53,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":454},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12583,"byte_end":12593,"line_start":60,"line_end":60,"column_start":10,"column_end":20},"name":"ReaderCore","qualname":"::core_api::ExtendableOutputCore::ReaderCore","value":"type ReaderCore: XofReaderCore;","parent":{"krate":0,"index":453},"children":[],"decl_id":null,"docs":" XOF reader core state.\n","sig":null,"attributes":[{"value":"/ XOF reader core state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12547,"byte_end":12573,"line_start":59,"line_end":59,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12737,"byte_end":12754,"line_start":64,"line_end":64,"column_start":8,"column_end":25},"name":"finalize_xof_core","qualname":"::core_api::ExtendableOutputCore::finalize_xof_core","value":"pub fn finalize_xof_core(&mut Self, &mut Buffer<Self>) -> Self::ReaderCore","parent":{"krate":0,"index":453},"children":[],"decl_id":null,"docs":" Retrieve XOF reader using remaining data stored in the block buffer\n and leave hasher in a dirty state.\n","sig":null,"attributes":[{"value":"/ Retrieve XOF reader using remaining data stored in the block buffer","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12615,"byte_end":12686,"line_start":62,"line_end":62,"column_start":5,"column_end":76}},{"value":"/ and leave hasher in a dirty state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12691,"byte_end":12729,"line_start":63,"line_end":63,"column_start":5,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":456},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12894,"byte_end":12907,"line_start":68,"line_end":68,"column_start":11,"column_end":24},"name":"XofReaderCore","qualname":"::core_api::XofReaderCore","value":"XofReaderCore: BlockSizeUser","parent":null,"children":[{"krate":0,"index":457}],"decl_id":null,"docs":" Core reader trait for extendable-output function (XOF) result.\n","sig":null,"attributes":[{"value":"/ Core reader trait for extendable-output function (XOF) result.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12817,"byte_end":12883,"line_start":67,"line_end":67,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12961,"byte_end":12971,"line_start":70,"line_end":70,"column_start":8,"column_end":18},"name":"read_block","qualname":"::core_api::XofReaderCore::read_block","value":"pub fn read_block(&mut Self) -> Block<Self>","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Read next XOF block.\n","sig":null,"attributes":[{"value":"/ Read next XOF block.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12929,"byte_end":12953,"line_start":69,"line_end":69,"column_start":5,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":458},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13546,"byte_end":13564,"line_start":84,"line_end":84,"column_start":11,"column_end":29},"name":"VariableOutputCore","qualname":"::core_api::VariableOutputCore","value":"VariableOutputCore: UpdateCore + OutputSizeUser + BufferKindUser + Sized","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461}],"decl_id":null,"docs":" Core trait for hash functions with variable output size.","sig":null,"attributes":[{"value":"/ Core trait for hash functions with variable output size.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13002,"byte_end":13062,"line_start":73,"line_end":73,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13063,"byte_end":13066,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Maximum output size is equal to [`OutputSizeUser::OutputSize`].","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13067,"byte_end":13134,"line_start":75,"line_end":75,"column_start":1,"column_end":68}},{"value":"/ Users are expected to truncate result returned by the","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13135,"byte_end":13192,"line_start":76,"line_end":76,"column_start":1,"column_end":58}},{"value":"/ [`finalize_variable_core`] to `output_size` passed to the [`new`] method","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13193,"byte_end":13269,"line_start":77,"line_end":77,"column_start":1,"column_end":77}},{"value":"/ during construction. Truncation side is defined by the [`TRUNC_SIDE`]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13270,"byte_end":13343,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/ associated constant.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13344,"byte_end":13368,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13369,"byte_end":13372,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ [`finalize_variable_core`]: VariableOutputCore::finalize_variable_core","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13373,"byte_end":13447,"line_start":81,"line_end":81,"column_start":1,"column_end":75}},{"value":"/ [`new`]: VariableOutputCore::new","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13448,"byte_end":13484,"line_start":82,"line_end":82,"column_start":1,"column_end":37}},{"value":"/ [`TRUNC_SIDE`]: VariableOutputCore::TRUNC_SIDE","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13485,"byte_end":13535,"line_start":83,"line_end":83,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":459},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13769,"byte_end":13779,"line_start":90,"line_end":90,"column_start":11,"column_end":21},"name":"TRUNC_SIDE","qualname":"::core_api::VariableOutputCore::TRUNC_SIDE","value":"TruncSide","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Side which should be used in a truncated result.\n","sig":null,"attributes":[{"value":"/ Side which should be used in a truncated result.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13706,"byte_end":13758,"line_start":89,"line_end":89,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14086,"byte_end":14089,"line_start":99,"line_end":99,"column_start":8,"column_end":11},"name":"new","qualname":"::core_api::VariableOutputCore::new","value":"pub fn new(usize) -> Result<Self, InvalidOutputSize>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Initialize hasher state for given output size.","sig":null,"attributes":[{"value":"/ Initialize hasher state for given output size.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13797,"byte_end":13847,"line_start":92,"line_end":92,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13852,"byte_end":13855,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Returns [`InvalidOutputSize`] if `output_size` is not valid for","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13860,"byte_end":13927,"line_start":94,"line_end":94,"column_start":5,"column_end":72}},{"value":"/ the algorithm, e.g. if it's bigger than the [`OutputSize`]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13932,"byte_end":13994,"line_start":95,"line_end":95,"column_start":5,"column_end":67}},{"value":"/ associated type.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13999,"byte_end":14019,"line_start":96,"line_end":96,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14024,"byte_end":14027,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ [`OutputSize`]: OutputSizeUser::OutputSize","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14032,"byte_end":14078,"line_start":98,"line_end":98,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14475,"byte_end":14497,"line_start":108,"line_end":108,"column_start":8,"column_end":30},"name":"finalize_variable_core","qualname":"::core_api::VariableOutputCore::finalize_variable_core","value":"pub fn finalize_variable_core(&mut Self, &mut Buffer<Self>, &mut Output<Self>)","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Finalize hasher and write full hashing result into the `out` buffer.","sig":null,"attributes":[{"value":"/ Finalize hasher and write full hashing result into the `out` buffer.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14151,"byte_end":14223,"line_start":101,"line_end":101,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14228,"byte_end":14231,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ The result must be truncated to `output_size` used during hasher","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14236,"byte_end":14304,"line_start":103,"line_end":103,"column_start":5,"column_end":73}},{"value":"/ construction. Truncation side is defined by the [`TRUNC_SIDE`]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14309,"byte_end":14375,"line_start":104,"line_end":104,"column_start":5,"column_end":71}},{"value":"/ associated constant.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14380,"byte_end":14404,"line_start":105,"line_end":105,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14409,"byte_end":14412,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ [`TRUNC_SIDE`]: VariableOutputCore::TRUNC_SIDE","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14417,"byte_end":14467,"line_start":107,"line_end":107,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":665},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14755,"byte_end":14759,"line_start":116,"line_end":116,"column_start":5,"column_end":9},"name":"Left","qualname":"::core_api::TruncSide::Left","value":"TruncSide::Left","parent":{"krate":0,"index":664},"children":[],"decl_id":null,"docs":" Truncate left side, i.e. `&out[..n]`.\n","sig":null,"attributes":[{"value":"/ Truncate left side, i.e. `&out[..n]`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14709,"byte_end":14750,"line_start":115,"line_end":115,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":667},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14812,"byte_end":14817,"line_start":118,"line_end":118,"column_start":5,"column_end":10},"name":"Right","qualname":"::core_api::TruncSide::Right","value":"TruncSide::Right","parent":{"krate":0,"index":664},"children":[],"decl_id":null,"docs":" Truncate right side, i.e. `&out[m..]`.\n","sig":null,"attributes":[{"value":"/ Truncate right side, i.e. `&out[m..]`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14765,"byte_end":14807,"line_start":117,"line_end":117,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":664},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14693,"byte_end":14702,"line_start":114,"line_end":114,"column_start":10,"column_end":19},"name":"TruncSide","qualname":"::core_api::TruncSide","value":"pub enum TruncSide { Left, Right, }","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":667}],"decl_id":null,"docs":" Type which used for defining truncation side in the [`VariableOutputCore`]\n trait.\n","sig":null,"attributes":[{"value":"/ Type which used for defining truncation side in the [`VariableOutputCore`]","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14564,"byte_end":14642,"line_start":111,"line_end":111,"column_start":1,"column_end":79}},{"value":"/ trait.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":14643,"byte_end":14653,"line_start":112,"line_end":112,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":492},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32626,"byte_end":32636,"line_start":8,"line_end":8,"column_start":11,"column_end":21},"name":"HashMarker","qualname":"::digest::HashMarker","value":"HashMarker","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for cryptographic hash functions.\n","sig":null,"attributes":[{"value":"/ Marker trait for cryptographic hash functions.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32565,"byte_end":32615,"line_start":7,"line_end":7,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":493},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32906,"byte_end":32912,"line_start":15,"line_end":15,"column_start":11,"column_end":17},"name":"Digest","qualname":"::digest::Digest","value":"Digest: OutputSizeUser","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"decl_id":null,"docs":" Convinience wrapper trait covering functionality of cryptographic hash\n functions with fixed output size.","sig":null,"attributes":[{"value":"/ Convinience wrapper trait covering functionality of cryptographic hash","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32641,"byte_end":32715,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ functions with fixed output size.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32716,"byte_end":32753,"line_start":11,"line_end":11,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32754,"byte_end":32757,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This trait wraps [`Update`], [`FixedOutput`], [`Default`], and","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32758,"byte_end":32824,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ [`HashMarker`] traits and provides additional convenience methods.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32825,"byte_end":32895,"line_start":14,"line_end":14,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32974,"byte_end":32977,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"new","qualname":"::digest::Digest::new","value":"pub fn new() -> Self","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Create new hasher instance.\n","sig":null,"attributes":[{"value":"/ Create new hasher instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32935,"byte_end":32966,"line_start":16,"line_end":16,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33071,"byte_end":33086,"line_start":20,"line_end":20,"column_start":8,"column_end":23},"name":"new_with_prefix","qualname":"::digest::Digest::new_with_prefix","value":"pub fn new_with_prefix<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>)\n-> Self","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Create new hasher instance which has processed the provided data.\n","sig":null,"attributes":[{"value":"/ Create new hasher instance which has processed the provided data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32994,"byte_end":33063,"line_start":19,"line_end":19,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33179,"byte_end":33185,"line_start":23,"line_end":23,"column_start":8,"column_end":14},"name":"update","qualname":"::digest::Digest::update","value":"pub fn update<impl AsRef<[u8]>: AsRef<[u8]>>(&mut Self, impl AsRef<[u8]>)","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Process data, updating the internal state.\n","sig":null,"attributes":[{"value":"/ Process data, updating the internal state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33125,"byte_end":33171,"line_start":22,"line_end":22,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33294,"byte_end":33306,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"chain_update","qualname":"::digest::Digest::chain_update","value":"pub fn chain_update<impl AsRef<[u8]>: AsRef<[u8]>>(Self, impl AsRef<[u8]>)\n-> Self","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Process input data in a chained manner.\n","sig":null,"attributes":[{"value":"/ Process input data in a chained manner.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33227,"byte_end":33270,"line_start":25,"line_end":25,"column_start":5,"column_end":48}},{"value":"must_use","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33275,"byte_end":33286,"line_start":26,"line_end":26,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33407,"byte_end":33415,"line_start":30,"line_end":30,"column_start":8,"column_end":16},"name":"finalize","qualname":"::digest::Digest::finalize","value":"pub fn finalize(Self) -> Output<Self>","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Retrieve result and consume hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve result and consume hasher instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33351,"byte_end":33399,"line_start":29,"line_end":29,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33521,"byte_end":33534,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"finalize_into","qualname":"::digest::Digest::finalize_into","value":"pub fn finalize_into(Self, &mut Output<Self>)","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Write result into provided array and consume the hasher instance.\n","sig":null,"attributes":[{"value":"/ Write result into provided array and consume the hasher instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33444,"byte_end":33513,"line_start":32,"line_end":32,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33625,"byte_end":33639,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"finalize_reset","qualname":"::digest::Digest::finalize_reset","value":"pub fn finalize_reset(&mut Self) -> Output<Self> where Self: FixedOutputReset","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Retrieve result and reset hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve result and reset hasher instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33571,"byte_end":33617,"line_start":35,"line_end":35,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33789,"byte_end":33808,"line_start":41,"line_end":41,"column_start":8,"column_end":27},"name":"finalize_into_reset","qualname":"::digest::Digest::finalize_into_reset","value":"pub fn finalize_into_reset(&mut Self, &mut Output<Self>) where\nSelf: FixedOutputReset","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Write result into provided array and reset the hasher instance.\n","sig":null,"attributes":[{"value":"/ Write result into provided array and reset the hasher instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33714,"byte_end":33781,"line_start":40,"line_end":40,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33946,"byte_end":33951,"line_start":46,"line_end":46,"column_start":8,"column_end":13},"name":"reset","qualname":"::digest::Digest::reset","value":"pub fn reset(&mut Self) where Self: Reset","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Reset hasher instance to its initial state.\n","sig":null,"attributes":[{"value":"/ Reset hasher instance to its initial state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33891,"byte_end":33938,"line_start":45,"line_end":45,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":34040,"byte_end":34051,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"output_size","qualname":"::digest::Digest::output_size","value":"pub fn output_size() -> usize","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Get output size of the hasher\n","sig":null,"attributes":[{"value":"/ Get output size of the hasher","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":33999,"byte_end":34032,"line_start":50,"line_end":50,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":34104,"byte_end":34110,"line_start":54,"line_end":54,"column_start":8,"column_end":14},"name":"digest","qualname":"::digest::Digest::digest","value":"pub fn digest<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>) -> Output<Self>","parent":{"krate":0,"index":493},"children":[],"decl_id":null,"docs":" Compute hash of `data`.\n","sig":null,"attributes":[{"value":"/ Compute hash of `data`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":34069,"byte_end":34096,"line_start":53,"line_end":53,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":526},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":35806,"byte_end":35815,"line_start":132,"line_end":132,"column_start":11,"column_end":20},"name":"DynDigest","qualname":"::digest::DynDigest","value":"DynDigest","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534}],"decl_id":null,"docs":" Modification of the [`Digest`] trait suitable for trait objects.\n","sig":null,"attributes":[{"value":"/ Modification of the [`Digest`] trait suitable for trait objects.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":35727,"byte_end":35795,"line_start":131,"line_end":131,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":35938,"byte_end":35944,"line_start":136,"line_end":136,"column_start":8,"column_end":14},"name":"update","qualname":"::digest::DynDigest::update","value":"pub fn update(&mut Self, &[u8])","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Digest input data.","sig":null,"attributes":[{"value":"/ Digest input data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":35822,"byte_end":35844,"line_start":133,"line_end":133,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":35849,"byte_end":35852,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ This method can be called repeatedly for use with streaming messages.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":35857,"byte_end":35930,"line_start":135,"line_end":135,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36111,"byte_end":36125,"line_start":141,"line_end":141,"column_start":8,"column_end":22},"name":"finalize_reset","qualname":"::digest::DynDigest::finalize_reset","value":"pub fn finalize_reset(&mut Self) -> Box<[u8]>","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Retrieve result and reset hasher instance\n","sig":null,"attributes":[{"value":"/ Retrieve result and reset hasher instance","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":35975,"byte_end":36020,"line_start":138,"line_end":138,"column_start":5,"column_end":50}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36025,"byte_end":36050,"line_start":139,"line_end":139,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36485,"byte_end":36493,"line_start":151,"line_end":151,"column_start":8,"column_end":16},"name":"finalize","qualname":"::digest::DynDigest::finalize","value":"pub fn finalize(Box<Self>) -> Box<[u8]>","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Retrieve result and consume boxed hasher instance\n","sig":null,"attributes":[{"value":"/ Retrieve result and consume boxed hasher instance","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36307,"byte_end":36360,"line_start":147,"line_end":147,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36365,"byte_end":36390,"line_start":148,"line_end":148,"column_start":5,"column_end":30}},{"value":"allow(clippy :: boxed_local)","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36448,"byte_end":36477,"line_start":150,"line_end":150,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36840,"byte_end":36853,"line_start":160,"line_end":160,"column_start":8,"column_end":21},"name":"finalize_into","qualname":"::digest::DynDigest::finalize_into","value":"pub fn finalize_into(Self, &mut [u8]) -> Result<(), InvalidBufferSize>","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Write result into provided array and consume the hasher instance.","sig":null,"attributes":[{"value":"/ Write result into provided array and consume the hasher instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36685,"byte_end":36754,"line_start":157,"line_end":157,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36759,"byte_end":36762,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ Returns error if buffer length is not equal to `output_size`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36767,"byte_end":36832,"line_start":159,"line_end":159,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":37068,"byte_end":37087,"line_start":165,"line_end":165,"column_start":8,"column_end":27},"name":"finalize_into_reset","qualname":"::digest::DynDigest::finalize_into_reset","value":"pub fn finalize_into_reset(&mut Self, &mut [u8])\n-> Result<(), InvalidBufferSize>","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Write result into provided array and reset the hasher instance.","sig":null,"attributes":[{"value":"/ Write result into provided array and reset the hasher instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36915,"byte_end":36982,"line_start":162,"line_end":162,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36987,"byte_end":36990,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Returns error if buffer length is not equal to `output_size`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":36995,"byte_end":37060,"line_start":164,"line_end":164,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":37209,"byte_end":37214,"line_start":168,"line_end":168,"column_start":8,"column_end":13},"name":"reset","qualname":"::digest::DynDigest::reset","value":"pub fn reset(&mut Self)","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Reset hasher instance to its initial state.\n","sig":null,"attributes":[{"value":"/ Reset hasher instance to its initial state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":37154,"byte_end":37201,"line_start":167,"line_end":167,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":37273,"byte_end":37284,"line_start":171,"line_end":171,"column_start":8,"column_end":19},"name":"output_size","qualname":"::digest::DynDigest::output_size","value":"pub fn output_size(&Self) -> usize","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Get output size of the hasher\n","sig":null,"attributes":[{"value":"/ Get output size of the hasher","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":37232,"byte_end":37265,"line_start":170,"line_end":170,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":37446,"byte_end":37455,"line_start":176,"line_end":176,"column_start":8,"column_end":17},"name":"box_clone","qualname":"::digest::DynDigest::box_clone","value":"pub fn box_clone(&Self) -> Box<dyn DynDigest>","parent":{"krate":0,"index":526},"children":[],"decl_id":null,"docs":" Clone hasher state into a boxed trait object\n","sig":null,"attributes":[{"value":"/ Clone hasher state into a boxed trait object","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":37307,"byte_end":37355,"line_start":173,"line_end":173,"column_start":5,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":37360,"byte_end":37385,"line_start":174,"line_end":174,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":585},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2769,"byte_end":2775,"line_start":75,"line_end":75,"column_start":11,"column_end":17},"name":"Update","qualname":"::Update","value":"Update","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587}],"decl_id":null,"docs":" Types which consume data with byte granularity.\n","sig":null,"attributes":[{"value":"/ Types which consume data with byte granularity.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2707,"byte_end":2758,"line_start":74,"line_end":74,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2831,"byte_end":2837,"line_start":77,"line_end":77,"column_start":8,"column_end":14},"name":"update","qualname":"::Update::update","value":"pub fn update(&mut Self, &[u8])","parent":{"krate":0,"index":585},"children":[],"decl_id":null,"docs":" Update state using the provided data.\n","sig":null,"attributes":[{"value":"/ Update state using the provided data.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2782,"byte_end":2823,"line_start":76,"line_end":76,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2934,"byte_end":2939,"line_start":81,"line_end":81,"column_start":8,"column_end":13},"name":"chain","qualname":"::Update::chain","value":"pub fn chain<impl AsRef<[u8]>: AsRef<[u8]>>(Self, impl AsRef<[u8]>) -> Self\nwhere Self: Sized","parent":{"krate":0,"index":585},"children":[],"decl_id":null,"docs":" Digest input data in a chained manner.\n","sig":null,"attributes":[{"value":"/ Digest input data in a chained manner.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2868,"byte_end":2910,"line_start":79,"line_end":79,"column_start":5,"column_end":47}},{"value":"must_use","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2915,"byte_end":2926,"line_start":80,"line_end":80,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":589},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3140,"byte_end":3151,"line_start":91,"line_end":91,"column_start":11,"column_end":22},"name":"FixedOutput","qualname":"::FixedOutput","value":"FixedOutput: Update + OutputSizeUser + Sized","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591}],"decl_id":null,"docs":" Trait for hash functions with fixed-size output.\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with fixed-size output.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3077,"byte_end":3129,"line_start":90,"line_end":90,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3254,"byte_end":3267,"line_start":93,"line_end":93,"column_start":8,"column_end":21},"name":"finalize_into","qualname":"::FixedOutput::finalize_into","value":"pub fn finalize_into(Self, &mut Output<Self>)","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Consume value and write result into provided array.\n","sig":null,"attributes":[{"value":"/ Consume value and write result into provided array.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3191,"byte_end":3246,"line_start":92,"line_end":92,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3378,"byte_end":3392,"line_start":97,"line_end":97,"column_start":8,"column_end":22},"name":"finalize_fixed","qualname":"::FixedOutput::finalize_fixed","value":"pub fn finalize_fixed(Self) -> Output<Self>","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Retrieve result and consume the hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve result and consume the hasher instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3304,"byte_end":3356,"line_start":95,"line_end":95,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3361,"byte_end":3370,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":592},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3606,"byte_end":3622,"line_start":105,"line_end":105,"column_start":11,"column_end":27},"name":"FixedOutputReset","qualname":"::FixedOutputReset","value":"FixedOutputReset: FixedOutput + Reset","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594}],"decl_id":null,"docs":" Trait for hash functions with fixed-size output able to reset themselves.\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with fixed-size output able to reset themselves.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3518,"byte_end":3595,"line_start":104,"line_end":104,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3722,"byte_end":3741,"line_start":107,"line_end":107,"column_start":8,"column_end":27},"name":"finalize_into_reset","qualname":"::FixedOutputReset::finalize_into_reset","value":"pub fn finalize_into_reset(&mut Self, &mut Output<Self>)","parent":{"krate":0,"index":592},"children":[],"decl_id":null,"docs":" Write result into provided array and reset the hasher state.\n","sig":null,"attributes":[{"value":"/ Write result into provided array and reset the hasher state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3650,"byte_end":3714,"line_start":106,"line_end":106,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3852,"byte_end":3872,"line_start":111,"line_end":111,"column_start":8,"column_end":28},"name":"finalize_fixed_reset","qualname":"::FixedOutputReset::finalize_fixed_reset","value":"pub fn finalize_fixed_reset(&mut Self) -> Output<Self>","parent":{"krate":0,"index":592},"children":[],"decl_id":null,"docs":" Retrieve result and reset the hasher state.\n","sig":null,"attributes":[{"value":"/ Retrieve result and reset the hasher state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3783,"byte_end":3830,"line_start":109,"line_end":109,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3835,"byte_end":3844,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":595},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4142,"byte_end":4151,"line_start":120,"line_end":120,"column_start":11,"column_end":20},"name":"XofReader","qualname":"::XofReader","value":"XofReader","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597}],"decl_id":null,"docs":" Trait for reader types which are used to extract extendable output\n from a XOF (extendable-output function) result.\n","sig":null,"attributes":[{"value":"/ Trait for reader types which are used to extract extendable output","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4009,"byte_end":4079,"line_start":118,"line_end":118,"column_start":1,"column_end":71}},{"value":"/ from a XOF (extendable-output function) result.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4080,"byte_end":4131,"line_start":119,"line_end":119,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4244,"byte_end":4248,"line_start":122,"line_end":122,"column_start":8,"column_end":12},"name":"read","qualname":"::XofReader::read","value":"pub fn read(&mut Self, &mut [u8])","parent":{"krate":0,"index":595},"children":[],"decl_id":null,"docs":" Read output into the `buffer`. Can be called an unlimited number of times.\n","sig":null,"attributes":[{"value":"/ Read output into the `buffer`. Can be called an unlimited number of times.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4158,"byte_end":4236,"line_start":121,"line_end":121,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4658,"byte_end":4668,"line_start":132,"line_end":132,"column_start":8,"column_end":18},"name":"read_boxed","qualname":"::XofReader::read_boxed","value":"pub fn read_boxed(&mut Self, usize) -> Box<[u8]>","parent":{"krate":0,"index":595},"children":[],"decl_id":null,"docs":" Read output into a boxed slice of the specified size.","sig":null,"attributes":[{"value":"/ Read output into a boxed slice of the specified size.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4285,"byte_end":4342,"line_start":124,"line_end":124,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4347,"byte_end":4350,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Can be called an unlimited number of times in combination with `read`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4355,"byte_end":4429,"line_start":126,"line_end":126,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4434,"byte_end":4437,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ `Box<[u8]>` is used instead of `Vec<u8>` to save stack space, since","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4442,"byte_end":4513,"line_start":128,"line_end":128,"column_start":5,"column_end":76}},{"value":"/ they have size of 2 and 3 words respectively.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4518,"byte_end":4567,"line_start":129,"line_end":129,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4572,"byte_end":4597,"line_start":130,"line_end":130,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":598},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4879,"byte_end":4895,"line_start":140,"line_end":140,"column_start":11,"column_end":27},"name":"ExtendableOutput","qualname":"::ExtendableOutput","value":"ExtendableOutput: Sized + Update","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":604}],"decl_id":null,"docs":" Trait for hash functions with extendable-output (XOF).\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with extendable-output (XOF).","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4810,"byte_end":4868,"line_start":139,"line_end":139,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":599},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4938,"byte_end":4944,"line_start":142,"line_end":142,"column_start":10,"column_end":16},"name":"Reader","qualname":"::ExtendableOutput::Reader","value":"type Reader: XofReader;","parent":{"krate":0,"index":598},"children":[],"decl_id":null,"docs":" Reader\n","sig":null,"attributes":[{"value":"/ Reader","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4918,"byte_end":4928,"line_start":141,"line_end":141,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5022,"byte_end":5034,"line_start":145,"line_end":145,"column_start":8,"column_end":20},"name":"finalize_xof","qualname":"::ExtendableOutput::finalize_xof","value":"pub fn finalize_xof(Self) -> Self::Reader","parent":{"krate":0,"index":598},"children":[],"decl_id":null,"docs":" Retrieve XOF reader and consume hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve XOF reader and consume hasher instance.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4962,"byte_end":5014,"line_start":144,"line_end":144,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5116,"byte_end":5133,"line_start":148,"line_end":148,"column_start":8,"column_end":25},"name":"finalize_xof_into","qualname":"::ExtendableOutput::finalize_xof_into","value":"pub fn finalize_xof_into(Self, &mut [u8])","parent":{"krate":0,"index":598},"children":[],"decl_id":null,"docs":" Finalize XOF and write result into `out`.\n","sig":null,"attributes":[{"value":"/ Finalize XOF and write result into `out`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5063,"byte_end":5108,"line_start":147,"line_end":147,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5270,"byte_end":5280,"line_start":153,"line_end":153,"column_start":8,"column_end":18},"name":"digest_xof","qualname":"::ExtendableOutput::digest_xof","value":"pub fn digest_xof<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>, &mut [u8])\nwhere Self: Default","parent":{"krate":0,"index":598},"children":[],"decl_id":null,"docs":" Compute hash of `data` and write it into `output`.\n","sig":null,"attributes":[{"value":"/ Compute hash of `data` and write it into `output`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5208,"byte_end":5262,"line_start":152,"line_end":152,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5821,"byte_end":5835,"line_start":169,"line_end":169,"column_start":8,"column_end":22},"name":"finalize_boxed","qualname":"::ExtendableOutput::finalize_boxed","value":"pub fn finalize_boxed(Self, usize) -> Box<[u8]>","parent":{"krate":0,"index":598},"children":[],"decl_id":null,"docs":" Retrieve result into a boxed slice of the specified size and consume\n the hasher.","sig":null,"attributes":[{"value":"/ Retrieve result into a boxed slice of the specified size and consume","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5500,"byte_end":5572,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/ the hasher.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5577,"byte_end":5592,"line_start":163,"line_end":163,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5597,"byte_end":5600,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ `Box<[u8]>` is used instead of `Vec<u8>` to save stack space, since","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5605,"byte_end":5676,"line_start":165,"line_end":165,"column_start":5,"column_end":76}},{"value":"/ they have size of 2 and 3 words respectively.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5681,"byte_end":5730,"line_start":166,"line_end":166,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":5735,"byte_end":5760,"line_start":167,"line_end":167,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":605},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6101,"byte_end":6122,"line_start":177,"line_end":177,"column_start":11,"column_end":32},"name":"ExtendableOutputReset","qualname":"::ExtendableOutputReset","value":"ExtendableOutputReset: ExtendableOutput + Reset","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608}],"decl_id":null,"docs":" Trait for hash functions with extendable-output (XOF) able to reset themselves.\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with extendable-output (XOF) able to reset themselves.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6007,"byte_end":6090,"line_start":176,"line_end":176,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6219,"byte_end":6237,"line_start":179,"line_end":179,"column_start":8,"column_end":26},"name":"finalize_xof_reset","qualname":"::ExtendableOutputReset::finalize_xof_reset","value":"pub fn finalize_xof_reset(&mut Self) -> Self::Reader","parent":{"krate":0,"index":605},"children":[],"decl_id":null,"docs":" Retrieve XOF reader and reset hasher instance state.\n","sig":null,"attributes":[{"value":"/ Retrieve XOF reader and reset hasher instance state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6155,"byte_end":6211,"line_start":178,"line_end":178,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6349,"byte_end":6372,"line_start":182,"line_end":182,"column_start":8,"column_end":31},"name":"finalize_xof_reset_into","qualname":"::ExtendableOutputReset::finalize_xof_reset_into","value":"pub fn finalize_xof_reset_into(&mut Self, &mut [u8])","parent":{"krate":0,"index":605},"children":[],"decl_id":null,"docs":" Finalize XOF, write result into `out`, and reset the hasher state.\n","sig":null,"attributes":[{"value":"/ Finalize XOF, write result into `out`, and reset the hasher state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6271,"byte_end":6341,"line_start":181,"line_end":181,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6783,"byte_end":6803,"line_start":193,"line_end":193,"column_start":8,"column_end":28},"name":"finalize_boxed_reset","qualname":"::ExtendableOutputReset::finalize_boxed_reset","value":"pub fn finalize_boxed_reset(&mut Self, usize) -> Box<[u8]>","parent":{"krate":0,"index":605},"children":[],"decl_id":null,"docs":" Retrieve result into a boxed slice of the specified size and reset\n the hasher state.","sig":null,"attributes":[{"value":"/ Retrieve result into a boxed slice of the specified size and reset","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6458,"byte_end":6528,"line_start":186,"line_end":186,"column_start":5,"column_end":75}},{"value":"/ the hasher state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6533,"byte_end":6554,"line_start":187,"line_end":187,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6559,"byte_end":6562,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ `Box<[u8]>` is used instead of `Vec<u8>` to save stack space, since","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6567,"byte_end":6638,"line_start":189,"line_end":189,"column_start":5,"column_end":76}},{"value":"/ they have size of 2 and 3 words respectively.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6643,"byte_end":6692,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6697,"byte_end":6722,"line_start":191,"line_end":191,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":609},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7052,"byte_end":7066,"line_start":201,"line_end":201,"column_start":11,"column_end":25},"name":"VariableOutput","qualname":"::VariableOutput","value":"VariableOutput: Sized + Update","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":617}],"decl_id":null,"docs":" Trait for hash functions with variable-size output.\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with variable-size output.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6986,"byte_end":7041,"line_start":200,"line_end":200,"column_start":1,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":610},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7132,"byte_end":7147,"line_start":203,"line_end":203,"column_start":11,"column_end":26},"name":"MAX_OUTPUT_SIZE","qualname":"::VariableOutput::MAX_OUTPUT_SIZE","value":"usize","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Maximum size of output hash.\n","sig":null,"attributes":[{"value":"/ Maximum size of output hash.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7089,"byte_end":7121,"line_start":202,"line_end":202,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7359,"byte_end":7362,"line_start":209,"line_end":209,"column_start":8,"column_end":11},"name":"new","qualname":"::VariableOutput::new","value":"pub fn new(usize) -> Result<Self, InvalidOutputSize>","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Create new hasher instance with the given output size.","sig":null,"attributes":[{"value":"/ Create new hasher instance with the given output size.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7161,"byte_end":7219,"line_start":205,"line_end":205,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7224,"byte_end":7227,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ It will return `Err(InvalidOutputSize)` in case if hasher can not return","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7232,"byte_end":7308,"line_start":207,"line_end":207,"column_start":5,"column_end":81}},{"value":"/ hash of the specified output size.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7313,"byte_end":7351,"line_start":208,"line_end":208,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7503,"byte_end":7514,"line_start":212,"line_end":212,"column_start":8,"column_end":19},"name":"output_size","qualname":"::VariableOutput::output_size","value":"pub fn output_size(&Self) -> usize","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Get output size of the hasher instance provided to the `new` method\n","sig":null,"attributes":[{"value":"/ Get output size of the hasher instance provided to the `new` method","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7424,"byte_end":7495,"line_start":211,"line_end":211,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7694,"byte_end":7711,"line_start":218,"line_end":218,"column_start":8,"column_end":25},"name":"finalize_variable","qualname":"::VariableOutput::finalize_variable","value":"pub fn finalize_variable(Self, &mut [u8]) -> Result<(), InvalidBufferSize>","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Write result into the output buffer.","sig":null,"attributes":[{"value":"/ Write result into the output buffer.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7537,"byte_end":7577,"line_start":214,"line_end":214,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7582,"byte_end":7585,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Returns `Err(InvalidOutputSize)` if `out` size is not equal to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7590,"byte_end":7656,"line_start":216,"line_end":216,"column_start":5,"column_end":71}},{"value":"/ `self.output_size()`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7661,"byte_end":7686,"line_start":217,"line_end":217,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":8011,"byte_end":8026,"line_start":225,"line_end":225,"column_start":8,"column_end":23},"name":"digest_variable","qualname":"::VariableOutput::digest_variable","value":"pub fn digest_variable<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>,\n&mut [u8]) -> Result<(), InvalidOutputSize>","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Compute hash of `data` and write it to `output`.","sig":null,"attributes":[{"value":"/ Compute hash of `data` and write it to `output`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7773,"byte_end":7825,"line_start":220,"line_end":220,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7830,"byte_end":7833,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Length of the output hash is determined by `output`. If `output` is","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7838,"byte_end":7909,"line_start":222,"line_end":222,"column_start":5,"column_end":76}},{"value":"/ bigger than `Self::MAX_OUTPUT_SIZE`, this method returns","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7914,"byte_end":7974,"line_start":223,"line_end":223,"column_start":5,"column_end":65}},{"value":"/ `InvalidOutputSize`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7979,"byte_end":8003,"line_start":224,"line_end":224,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":8615,"byte_end":8629,"line_start":242,"line_end":242,"column_start":8,"column_end":22},"name":"finalize_boxed","qualname":"::VariableOutput::finalize_boxed","value":"pub fn finalize_boxed(Self) -> Box<[u8]>","parent":{"krate":0,"index":609},"children":[],"decl_id":null,"docs":" Retrieve result into a boxed slice and consume hasher.","sig":null,"attributes":[{"value":"/ Retrieve result into a boxed slice and consume hasher.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":8328,"byte_end":8386,"line_start":236,"line_end":236,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":8391,"byte_end":8394,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ `Box<[u8]>` is used instead of `Vec<u8>` to save stack space, since","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":8399,"byte_end":8470,"line_start":238,"line_end":238,"column_start":5,"column_end":76}},{"value":"/ they have size of 2 and 3 words respectively.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":8475,"byte_end":8524,"line_start":239,"line_end":239,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":8529,"byte_end":8554,"line_start":240,"line_end":240,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":618},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":8954,"byte_end":8973,"line_start":252,"line_end":252,"column_start":11,"column_end":30},"name":"VariableOutputReset","qualname":"::VariableOutputReset","value":"VariableOutputReset: VariableOutput + Reset","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620}],"decl_id":null,"docs":" Trait for hash functions with variable-size output able to reset themselves.\n","sig":null,"attributes":[{"value":"/ Trait for hash functions with variable-size output able to reset themselves.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":8863,"byte_end":8943,"line_start":251,"line_end":251,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9188,"byte_end":9211,"line_start":257,"line_end":257,"column_start":8,"column_end":31},"name":"finalize_variable_reset","qualname":"::VariableOutputReset::finalize_variable_reset","value":"pub fn finalize_variable_reset(&mut Self, &mut [u8])\n-> Result<(), InvalidBufferSize>","parent":{"krate":0,"index":618},"children":[],"decl_id":null,"docs":" Write result into the output buffer and reset the hasher state.","sig":null,"attributes":[{"value":"/ Write result into the output buffer and reset the hasher state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9004,"byte_end":9071,"line_start":253,"line_end":253,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9076,"byte_end":9079,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ Returns `Err(InvalidOutputSize)` if `out` size is not equal to","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9084,"byte_end":9150,"line_start":255,"line_end":255,"column_start":5,"column_end":71}},{"value":"/ `self.output_size()`.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9155,"byte_end":9180,"line_start":256,"line_end":256,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9573,"byte_end":9593,"line_start":265,"line_end":265,"column_start":8,"column_end":28},"name":"finalize_boxed_reset","qualname":"::VariableOutputReset::finalize_boxed_reset","value":"pub fn finalize_boxed_reset(&mut Self) -> Box<[u8]>","parent":{"krate":0,"index":618},"children":[],"decl_id":null,"docs":" Retrieve result into a boxed slice and reset the hasher state.","sig":null,"attributes":[{"value":"/ Retrieve result into a boxed slice and reset the hasher state.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9278,"byte_end":9344,"line_start":259,"line_end":259,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9349,"byte_end":9352,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ `Box<[u8]>` is used instead of `Vec<u8>` to save stack space, since","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9357,"byte_end":9428,"line_start":261,"line_end":261,"column_start":5,"column_end":76}},{"value":"/ they have size of 2 and 3 words respectively.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9433,"byte_end":9482,"line_start":262,"line_end":262,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9487,"byte_end":9512,"line_start":263,"line_end":263,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":674},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9937,"byte_end":9954,"line_start":276,"line_end":276,"column_start":12,"column_end":29},"name":"InvalidOutputSize","qualname":"::InvalidOutputSize","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type used in variable hash traits.\n","sig":null,"attributes":[{"value":"/ The error type used in variable hash traits.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9838,"byte_end":9886,"line_start":274,"line_end":274,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":683},"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":10351,"byte_end":10368,"line_start":290,"line_end":290,"column_start":12,"column_end":29},"name":"InvalidBufferSize","qualname":"::InvalidBufferSize","value":"","parent":null,"children":[],"decl_id":null,"docs":" Buffer length is not equal to hash output size.\n","sig":null,"attributes":[{"value":"/ Buffer length is not equal to hash output size.","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":10234,"byte_end":10285,"line_start":288,"line_end":288,"column_start":1,"column_end":52}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":15677,"byte_end":15698,"line_start":30,"line_end":30,"column_start":33,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":16282,"byte_end":16303,"line_start":51,"line_end":51,"column_start":36,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":16594,"byte_end":16615,"line_start":62,"line_end":62,"column_start":33,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":16995,"byte_end":17016,"line_start":76,"line_end":76,"column_start":37,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":17317,"byte_end":17338,"line_start":87,"line_end":87,"column_start":37,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":17636,"byte_end":17657,"line_start":98,"line_end":98,"column_start":38,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":18437,"byte_end":18458,"line_start":123,"line_end":123,"column_start":30,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":18864,"byte_end":18885,"line_start":140,"line_end":140,"column_start":28,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":19226,"byte_end":19247,"line_start":154,"line_end":154,"column_start":36,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":20374,"byte_end":20395,"line_start":24,"line_end":24,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":21224,"byte_end":21245,"line_start":52,"line_end":52,"column_start":24,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":21624,"byte_end":21645,"line_start":70,"line_end":70,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":21898,"byte_end":21919,"line_start":83,"line_end":83,"column_start":20,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":22251,"byte_end":22272,"line_start":96,"line_end":96,"column_start":28,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":22916,"byte_end":22937,"line_start":122,"line_end":122,"column_start":33,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":23297,"byte_end":23318,"line_start":136,"line_end":136,"column_start":24,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":23698,"byte_end":23719,"line_start":150,"line_end":150,"column_start":28,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":24926,"byte_end":24937,"line_start":32,"line_end":32,"column_start":24,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":25346,"byte_end":25357,"line_start":51,"line_end":51,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":25520,"byte_end":25531,"line_start":60,"line_end":60,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":26010,"byte_end":26021,"line_start":81,"line_end":81,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":26193,"byte_end":26204,"line_start":90,"line_end":90,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":26698,"byte_end":26709,"line_start":113,"line_end":113,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":27006,"byte_end":27017,"line_start":126,"line_end":126,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":27253,"byte_end":27264,"line_start":139,"line_end":139,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":27588,"byte_end":27599,"line_start":152,"line_end":152,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":27784,"byte_end":27795,"line_start":161,"line_end":161,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":28103,"byte_end":28114,"line_start":174,"line_end":174,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":28478,"byte_end":28489,"line_start":189,"line_end":189,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":29077,"byte_end":29088,"line_start":208,"line_end":208,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":29784,"byte_end":29795,"line_start":232,"line_end":232,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":30486,"byte_end":30497,"line_start":262,"line_end":262,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":30626,"byte_end":30637,"line_start":270,"line_end":270,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/xof_reader.rs","byte_start":31317,"byte_end":31337,"line_start":21,"line_end":21,"column_start":24,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/xof_reader.rs","byte_start":31623,"byte_end":31643,"line_start":33,"line_end":33,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/xof_reader.rs","byte_start":32101,"byte_end":32121,"line_start":52,"line_end":52,"column_start":27,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":34219,"byte_end":34220,"line_start":57,"line_end":57,"column_start":65,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":37564,"byte_end":37565,"line_start":179,"line_end":179,"column_start":76,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":39005,"byte_end":39008,"line_start":232,"line_end":232,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9979,"byte_end":9996,"line_start":278,"line_end":278,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":10212,"byte_end":10229,"line_start":286,"line_end":286,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":10393,"byte_end":10410,"line_start":292,"line_end":292,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":10581,"byte_end":10598,"line_start":299,"line_end":299,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":2190,"byte_end":2198,"line_start":55,"line_end":55,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":9}}],"macro_refs":[],"relations":[{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":15677,"byte_end":15698,"line_start":30,"line_end":30,"column_start":33,"column_end":54},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":627},"to":{"krate":0,"index":492}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":16282,"byte_end":16303,"line_start":51,"line_end":51,"column_start":36,"column_end":57},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":627},"to":{"krate":20,"index":32}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":16594,"byte_end":16615,"line_start":62,"line_end":62,"column_start":33,"column_end":54},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":627},"to":{"krate":0,"index":447}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":16995,"byte_end":17016,"line_start":76,"line_end":76,"column_start":37,"column_end":58},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":627},"to":{"krate":20,"index":41}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":17317,"byte_end":17338,"line_start":87,"line_end":87,"column_start":37,"column_end":58},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":627},"to":{"krate":0,"index":449}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":17636,"byte_end":17657,"line_start":98,"line_end":98,"column_start":38,"column_end":59},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":627},"to":{"krate":0,"index":451}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":18437,"byte_end":18458,"line_start":123,"line_end":123,"column_start":30,"column_end":51},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":627},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":18864,"byte_end":18885,"line_start":140,"line_end":140,"column_start":28,"column_end":49},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":627},"to":{"krate":20,"index":52}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/ct_variable.rs","byte_start":19226,"byte_end":19247,"line_start":154,"line_end":154,"column_start":36,"column_end":57},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":627},"to":{"krate":20,"index":54}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":20374,"byte_end":20395,"line_start":24,"line_end":24,"column_start":9,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":21224,"byte_end":21245,"line_start":52,"line_end":52,"column_start":24,"column_end":45},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":636},"to":{"krate":0,"index":492}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":21624,"byte_end":21645,"line_start":70,"line_end":70,"column_start":19,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":636},"to":{"krate":20,"index":52}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":21898,"byte_end":21919,"line_start":83,"line_end":83,"column_start":20,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":636},"to":{"krate":0,"index":585}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":22251,"byte_end":22272,"line_start":96,"line_end":96,"column_start":28,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":636},"to":{"krate":0,"index":609}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":22916,"byte_end":22937,"line_start":122,"line_end":122,"column_start":33,"column_end":54},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":636},"to":{"krate":0,"index":618}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":23297,"byte_end":23318,"line_start":136,"line_end":136,"column_start":24,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":636},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/rt_variable.rs","byte_start":23698,"byte_end":23719,"line_start":150,"line_end":150,"column_start":28,"column_end":49},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":636},"to":{"krate":5,"index":4688}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":24926,"byte_end":24937,"line_start":32,"line_end":32,"column_start":24,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":492}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":25346,"byte_end":25357,"line_start":51,"line_end":51,"column_start":27,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":644},"to":{"krate":20,"index":32}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":25520,"byte_end":25531,"line_start":60,"line_end":60,"column_start":9,"column_end":20},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":26010,"byte_end":26021,"line_start":81,"line_end":81,"column_start":25,"column_end":36},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":644},"to":{"krate":20,"index":44}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":26193,"byte_end":26204,"line_start":90,"line_end":90,"column_start":21,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":644},"to":{"krate":20,"index":56}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":26698,"byte_end":26709,"line_start":113,"line_end":113,"column_start":24,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":644},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":27006,"byte_end":27017,"line_start":126,"line_end":126,"column_start":19,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":644},"to":{"krate":20,"index":52}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":27253,"byte_end":27264,"line_start":139,"line_end":139,"column_start":20,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":585}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":27588,"byte_end":27599,"line_start":152,"line_end":152,"column_start":28,"column_end":39},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":644},"to":{"krate":20,"index":41}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":27784,"byte_end":27795,"line_start":161,"line_end":161,"column_start":25,"column_end":36},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":589}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":28103,"byte_end":28114,"line_start":174,"line_end":174,"column_start":30,"column_end":41},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":592}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":28478,"byte_end":28489,"line_start":189,"line_end":189,"column_start":30,"column_end":41},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":598}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":29077,"byte_end":29088,"line_start":208,"line_end":208,"column_start":35,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":605}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":29784,"byte_end":29795,"line_start":232,"line_end":232,"column_start":28,"column_end":39},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":644},"to":{"krate":5,"index":4688}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":30351,"byte_end":30357,"line_start":253,"line_end":253,"column_start":30,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":383},"to":{"krate":0,"index":380}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":30486,"byte_end":30497,"line_start":262,"line_end":262,"column_start":28,"column_end":39},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":383}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/wrapper.rs","byte_start":30626,"byte_end":30637,"line_start":270,"line_end":270,"column_start":23,"column_end":34},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":380}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/xof_reader.rs","byte_start":31317,"byte_end":31337,"line_start":21,"line_end":21,"column_start":24,"column_end":44},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":9595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/xof_reader.rs","byte_start":31623,"byte_end":31643,"line_start":33,"line_end":33,"column_start":23,"column_end":43},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":654},"to":{"krate":0,"index":595}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api/xof_reader.rs","byte_start":32101,"byte_end":32121,"line_start":52,"line_end":52,"column_start":27,"column_end":47},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":654},"to":{"krate":5,"index":4631}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11558,"byte_end":11571,"line_start":31,"line_end":31,"column_start":23,"column_end":36},"kind":"SuperTrait","from":{"krate":20,"index":32},"to":{"krate":0,"index":447}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11764,"byte_end":11777,"line_start":37,"line_end":37,"column_start":27,"column_end":40},"kind":"SuperTrait","from":{"krate":20,"index":32},"to":{"krate":0,"index":449}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11953,"byte_end":11963,"line_start":43,"line_end":43,"column_start":28,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":447},"to":{"krate":0,"index":451}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11966,"byte_end":11980,"line_start":43,"line_end":43,"column_start":41,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":449},"to":{"krate":0,"index":451}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":11983,"byte_end":11997,"line_start":43,"line_end":43,"column_start":58,"column_end":72},"kind":"SuperTrait","from":{"krate":20,"index":41},"to":{"krate":0,"index":451}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12432,"byte_end":12442,"line_start":54,"line_end":54,"column_start":33,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":447},"to":{"krate":0,"index":453}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12445,"byte_end":12459,"line_start":54,"line_end":54,"column_start":46,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":449},"to":{"krate":0,"index":453}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":12909,"byte_end":12922,"line_start":68,"line_end":68,"column_start":26,"column_end":39},"kind":"SuperTrait","from":{"krate":20,"index":32},"to":{"krate":0,"index":456}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13566,"byte_end":13576,"line_start":84,"line_end":84,"column_start":31,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":447},"to":{"krate":0,"index":458}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13579,"byte_end":13593,"line_start":84,"line_end":84,"column_start":44,"column_end":58},"kind":"SuperTrait","from":{"krate":20,"index":41},"to":{"krate":0,"index":458}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13596,"byte_end":13610,"line_start":84,"line_end":84,"column_start":61,"column_end":75},"kind":"SuperTrait","from":{"krate":0,"index":449},"to":{"krate":0,"index":458}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/core_api.rs","byte_start":13613,"byte_end":13618,"line_start":84,"line_end":84,"column_start":78,"column_end":83},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":458}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":32914,"byte_end":32928,"line_start":15,"line_end":15,"column_start":19,"column_end":33},"kind":"SuperTrait","from":{"krate":20,"index":41},"to":{"krate":0,"index":493}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":34219,"byte_end":34220,"line_start":57,"line_end":57,"column_start":65,"column_end":66},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":510},"to":{"krate":0,"index":493}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":37564,"byte_end":37565,"line_start":179,"line_end":179,"column_start":76,"column_end":77},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":536},"to":{"krate":0,"index":526}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/digest.rs","byte_start":39005,"byte_end":39008,"line_start":232,"line_end":232,"column_start":16,"column_end":19},"kind":{"Impl":{"id":38}},"from":{"krate":4,"index":315},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3153,"byte_end":3159,"line_start":91,"line_end":91,"column_start":24,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":585},"to":{"krate":0,"index":589}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3162,"byte_end":3176,"line_start":91,"line_end":91,"column_start":33,"column_end":47},"kind":"SuperTrait","from":{"krate":20,"index":41},"to":{"krate":0,"index":589}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3179,"byte_end":3184,"line_start":91,"line_end":91,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":589}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3624,"byte_end":3635,"line_start":105,"line_end":105,"column_start":29,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":589},"to":{"krate":0,"index":592}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":3638,"byte_end":3643,"line_start":105,"line_end":105,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":20,"index":52},"to":{"krate":0,"index":592}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4897,"byte_end":4902,"line_start":140,"line_end":140,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":598}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":4905,"byte_end":4911,"line_start":140,"line_end":140,"column_start":37,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":585},"to":{"krate":0,"index":598}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6124,"byte_end":6140,"line_start":177,"line_end":177,"column_start":34,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":598},"to":{"krate":0,"index":605}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":6143,"byte_end":6148,"line_start":177,"line_end":177,"column_start":53,"column_end":58},"kind":"SuperTrait","from":{"krate":20,"index":52},"to":{"krate":0,"index":605}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7068,"byte_end":7073,"line_start":201,"line_end":201,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":609}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":7076,"byte_end":7082,"line_start":201,"line_end":201,"column_start":35,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":585},"to":{"krate":0,"index":609}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":8975,"byte_end":8989,"line_start":252,"line_end":252,"column_start":32,"column_end":46},"kind":"SuperTrait","from":{"krate":0,"index":609},"to":{"krate":0,"index":618}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":8992,"byte_end":8997,"line_start":252,"line_end":252,"column_start":49,"column_end":54},"kind":"SuperTrait","from":{"krate":20,"index":52},"to":{"krate":0,"index":618}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":9979,"byte_end":9996,"line_start":278,"line_end":278,"column_start":23,"column_end":40},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":674},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":10212,"byte_end":10229,"line_start":286,"line_end":286,"column_start":28,"column_end":45},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":674},"to":{"krate":5,"index":2452}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":10393,"byte_end":10410,"line_start":292,"line_end":292,"column_start":23,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":9602}},{"span":{"file_name":"/root/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.10.3/src/lib.rs","byte_start":10581,"byte_end":10598,"line_start":299,"line_end":299,"column_start":28,"column_end":45},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":683},"to":{"krate":5,"index":2452}}]}